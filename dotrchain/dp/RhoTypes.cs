// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: RhoTypes.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from RhoTypes.proto</summary>
public static partial class RhoTypesReflection {

  #region Descriptor
  /// <summary>File descriptor for RhoTypes.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static RhoTypesReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cg5SaG9UeXBlcy5wcm90bxoVc2NhbGFwYi9zY2FsYXBiLnByb3RvItECCgNQ",
          "YXISFAoFc2VuZHMYASADKAsyBS5TZW5kEhoKCHJlY2VpdmVzGAIgAygLMggu",
          "UmVjZWl2ZRISCgRuZXdzGAQgAygLMgQuTmV3EhQKBWV4cHJzGAUgAygLMgUu",
          "RXhwchIXCgdtYXRjaGVzGAYgAygLMgYuTWF0Y2gSIwoMdW5mb3JnZWFibGVz",
          "GAcgAygLMg0uR1VuZm9yZ2VhYmxlEhgKB2J1bmRsZXMYCyADKAsyBy5CdW5k",
          "bGUSIAoLY29ubmVjdGl2ZXMYCCADKAsyCy5Db25uZWN0aXZlElsKC2xvY2Fs",
          "bHlGcmVlGAkgASgMQkbiP0MKQWNvb3AucmNoYWluLm1vZGVscy5BbHdheXNF",
          "cXVhbFtzY2FsYS5jb2xsZWN0aW9uLmltbXV0YWJsZS5CaXRTZXRdEhcKD2Nv",
          "bm5lY3RpdmVfdXNlZBgKIAEoCCJhChJUYWdnZWRDb250aW51YXRpb24SIgoI",
          "cGFyX2JvZHkYASABKAsyDi5QYXJXaXRoUmFuZG9tSAASGAoOc2NhbGFfYm9k",
          "eV9yZWYYAiABKANIAEINCgt0YWdnZWRfY29udCJvCg1QYXJXaXRoUmFuZG9t",
          "EhoKBGJvZHkYASABKAsyBC5QYXJCBuI/A/ABARJCCgtyYW5kb21TdGF0ZRgC",
          "IAEoDEIt4j8qCihjb29wLnJjaGFpbi5jcnlwdG8uaGFzaC5CbGFrZTJiNTEy",
          "UmFuZG9tIhUKBVBDb3N0EgwKBGNvc3QYASABKAQiawoRTGlzdFBhcldpdGhS",
          "YW5kb20SEgoEcGFycxgBIAMoCzIELlBhchJCCgtyYW5kb21TdGF0ZRgCIAEo",
          "DEIt4j8qCihjb29wLnJjaGFpbi5jcnlwdG8uaGFzaC5CbGFrZTJiNTEyUmFu",
          "ZG9tInMKA1ZhchITCglib3VuZF92YXIYASABKBFIABISCghmcmVlX3ZhchgC",
          "IAEoEUgAEiQKCHdpbGRjYXJkGAMgASgLMhAuVmFyLldpbGRjYXJkTXNnSAAa",
          "DQoLV2lsZGNhcmRNc2dCDgoMdmFyX2luc3RhbmNlIkkKBkJ1bmRsZRIaCgRi",
          "b2R5GAEgASgLMgQuUGFyQgbiPwPwAQESEQoJd3JpdGVGbGFnGAIgASgIEhAK",
          "CHJlYWRGbGFnGAMgASgIIsABCgRTZW5kEhoKBGNoYW4YASABKAsyBC5QYXJC",
          "BuI/A/ABARISCgRkYXRhGAIgAygLMgQuUGFyEhIKCnBlcnNpc3RlbnQYAyAB",
          "KAgSWwoLbG9jYWxseUZyZWUYBSABKAxCRuI/QwpBY29vcC5yY2hhaW4ubW9k",
          "ZWxzLkFsd2F5c0VxdWFsW3NjYWxhLmNvbGxlY3Rpb24uaW1tdXRhYmxlLkJp",
          "dFNldF0SFwoPY29ubmVjdGl2ZV91c2VkGAYgASgIIm8KC1JlY2VpdmVCaW5k",
          "EhYKCHBhdHRlcm5zGAEgAygLMgQuUGFyEhwKBnNvdXJjZRgCIAEoCzIELlBh",
          "ckIG4j8D8AEBEhcKCXJlbWFpbmRlchgDIAEoCzIELlZhchIRCglmcmVlQ291",
          "bnQYBCABKAUiUQoLQmluZFBhdHRlcm4SFgoIcGF0dGVybnMYASADKAsyBC5Q",
          "YXISFwoJcmVtYWluZGVyGAIgASgLMgQuVmFyEhEKCWZyZWVDb3VudBgDIAEo",
          "BSIyChBMaXN0QmluZFBhdHRlcm5zEh4KCHBhdHRlcm5zGAEgAygLMgwuQmlu",
          "ZFBhdHRlcm4i7QEKB1JlY2VpdmUSGwoFYmluZHMYASADKAsyDC5SZWNlaXZl",
          "QmluZBIaCgRib2R5GAIgASgLMgQuUGFyQgbiPwPwAQESEgoKcGVyc2lzdGVu",
          "dBgDIAEoCBIMCgRwZWVrGAQgASgIEhEKCWJpbmRDb3VudBgFIAEoBRJbCgts",
          "b2NhbGx5RnJlZRgGIAEoDEJG4j9DCkFjb29wLnJjaGFpbi5tb2RlbHMuQWx3",
          "YXlzRXF1YWxbc2NhbGEuY29sbGVjdGlvbi5pbW11dGFibGUuQml0U2V0XRIX",
          "Cg9jb25uZWN0aXZlX3VzZWQYByABKAgi/gEKA05ldxIRCgliaW5kQ291bnQY",
          "ASABKBESFwoBcBgCIAEoCzIELlBhckIG4j8D8AEBEgsKA3VyaRgDIAMoCRIo",
          "CgppbmplY3Rpb25zGAQgAygLMhQuTmV3LkluamVjdGlvbnNFbnRyeRJbCgts",
          "b2NhbGx5RnJlZRgFIAEoDEJG4j9DCkFjb29wLnJjaGFpbi5tb2RlbHMuQWx3",
          "YXlzRXF1YWxbc2NhbGEuY29sbGVjdGlvbi5pbW11dGFibGUuQml0U2V0XRo3",
          "Cg9JbmplY3Rpb25zRW50cnkSCwoDa2V5GAEgASgJEhMKBXZhbHVlGAIgASgL",
          "MgQuUGFyOgI4ASJbCglNYXRjaENhc2USHQoHcGF0dGVybhgBIAEoCzIELlBh",
          "ckIG4j8D8AEBEhwKBnNvdXJjZRgCIAEoCzIELlBhckIG4j8D8AEBEhEKCWZy",
          "ZWVDb3VudBgDIAEoBSK2AQoFTWF0Y2gSHAoGdGFyZ2V0GAEgASgLMgQuUGFy",
          "QgbiPwPwAQESGQoFY2FzZXMYAiADKAsyCi5NYXRjaENhc2USWwoLbG9jYWxs",
          "eUZyZWUYBCABKAxCRuI/QwpBY29vcC5yY2hhaW4ubW9kZWxzLkFsd2F5c0Vx",
          "dWFsW3NjYWxhLmNvbGxlY3Rpb24uaW1tdXRhYmxlLkJpdFNldF0SFwoPY29u",
          "bmVjdGl2ZV91c2VkGAUgASgIItEHCgRFeHByEhAKBmdfYm9vbBgBIAEoCEgA",
          "Eg8KBWdfaW50GAIgASgSSAASEgoIZ19zdHJpbmcYAyABKAlIABIPCgVnX3Vy",
          "aRgEIAEoCUgAEhYKDGdfYnl0ZV9hcnJheRgZIAEoDEgAEhsKCmVfbm90X2Jv",
          "ZHkYBSABKAsyBS5FTm90SAASGwoKZV9uZWdfYm9keRgGIAEoCzIFLkVOZWdI",
          "ABIdCgtlX211bHRfYm9keRgHIAEoCzIGLkVNdWx0SAASGwoKZV9kaXZfYm9k",
          "eRgIIAEoCzIFLkVEaXZIABIdCgtlX3BsdXNfYm9keRgJIAEoCzIGLkVQbHVz",
          "SAASHwoMZV9taW51c19ib2R5GAogASgLMgcuRU1pbnVzSAASGQoJZV9sdF9i",
          "b2R5GAsgASgLMgQuRUx0SAASGwoKZV9sdGVfYm9keRgMIAEoCzIFLkVMdGVI",
          "ABIZCgllX2d0X2JvZHkYDSABKAsyBC5FR3RIABIbCgplX2d0ZV9ib2R5GA4g",
          "ASgLMgUuRUd0ZUgAEhkKCWVfZXFfYm9keRgPIAEoCzIELkVFcUgAEhsKCmVf",
          "bmVxX2JvZHkYECABKAsyBS5FTmVxSAASGwoKZV9hbmRfYm9keRgRIAEoCzIF",
          "LkVBbmRIABIZCgllX29yX2JvZHkYEiABKAsyBC5FT3JIABIbCgplX3Zhcl9i",
          "b2R5GBMgASgLMgUuRVZhckgAEh0KC2VfbGlzdF9ib2R5GBQgASgLMgYuRUxp",
          "c3RIABIfCgxlX3R1cGxlX2JvZHkYFSABKAsyBy5FVHVwbGVIABI7CgplX3Nl",
          "dF9ib2R5GBYgASgLMgUuRVNldEIe4j8bChljb29wLnJjaGFpbi5tb2RlbHMu",
          "UGFyU2V0SAASOwoKZV9tYXBfYm9keRgXIAEoCzIFLkVNYXBCHuI/GwoZY29v",
          "cC5yY2hhaW4ubW9kZWxzLlBhck1hcEgAEiEKDWVfbWV0aG9kX2JvZHkYGCAB",
          "KAsyCC5FTWV0aG9kSAASIwoOZV9tYXRjaGVzX2JvZHkYGyABKAsyCS5FTWF0",
          "Y2hlc0gAEjIKFmVfcGVyY2VudF9wZXJjZW50X2JvZHkYHCABKAsyEC5FUGVy",
          "Y2VudFBlcmNlbnRIABImChBlX3BsdXNfcGx1c19ib2R5GB0gASgLMgouRVBs",
          "dXNQbHVzSAASKgoSZV9taW51c19taW51c19ib2R5GB4gASgLMgwuRU1pbnVz",
          "TWludXNIABIbCgplX21vZF9ib2R5GB8gASgLMgUuRU1vZEgAQg8KDWV4cHJf",
          "aW5zdGFuY2UiqAEKBUVMaXN0EhAKAnBzGAEgAygLMgQuUGFyElsKC2xvY2Fs",
          "bHlGcmVlGAMgASgMQkbiP0MKQWNvb3AucmNoYWluLm1vZGVscy5BbHdheXNF",
          "cXVhbFtzY2FsYS5jb2xsZWN0aW9uLmltbXV0YWJsZS5CaXRTZXRdEhcKD2Nv",
          "bm5lY3RpdmVfdXNlZBgEIAEoCBIXCglyZW1haW5kZXIYBSABKAsyBC5WYXIi",
          "kAEKBkVUdXBsZRIQCgJwcxgBIAMoCzIELlBhchJbCgtsb2NhbGx5RnJlZRgD",
          "IAEoDEJG4j9DCkFjb29wLnJjaGFpbi5tb2RlbHMuQWx3YXlzRXF1YWxbc2Nh",
          "bGEuY29sbGVjdGlvbi5pbW11dGFibGUuQml0U2V0XRIXCg9jb25uZWN0aXZl",
          "X3VzZWQYBCABKAgipwEKBEVTZXQSEAoCcHMYASADKAsyBC5QYXISWwoLbG9j",
          "YWxseUZyZWUYAyABKAxCRuI/QwpBY29vcC5yY2hhaW4ubW9kZWxzLkFsd2F5",
          "c0VxdWFsW3NjYWxhLmNvbGxlY3Rpb24uaW1tdXRhYmxlLkJpdFNldF0SFwoP",
          "Y29ubmVjdGl2ZV91c2VkGAQgASgIEhcKCXJlbWFpbmRlchgFIAEoCzIELlZh",
          "ciKxAQoERU1hcBIaCgNrdnMYASADKAsyDS5LZXlWYWx1ZVBhaXISWwoLbG9j",
          "YWxseUZyZWUYAyABKAxCRuI/QwpBY29vcC5yY2hhaW4ubW9kZWxzLkFsd2F5",
          "c0VxdWFsW3NjYWxhLmNvbGxlY3Rpb24uaW1tdXRhYmxlLkJpdFNldF0SFwoP",
          "Y29ubmVjdGl2ZV91c2VkGAQgASgIEhcKCXJlbWFpbmRlchgFIAEoCzIELlZh",
          "ciLKAQoHRU1ldGhvZBISCgptZXRob2ROYW1lGAEgASgJEhwKBnRhcmdldBgC",
          "IAEoCzIELlBhckIG4j8D8AEBEhcKCWFyZ3VtZW50cxgDIAMoCzIELlBhchJb",
          "Cgtsb2NhbGx5RnJlZRgFIAEoDEJG4j9DCkFjb29wLnJjaGFpbi5tb2RlbHMu",
          "QWx3YXlzRXF1YWxbc2NhbGEuY29sbGVjdGlvbi5pbW11dGFibGUuQml0U2V0",
          "XRIXCg9jb25uZWN0aXZlX3VzZWQYBiABKAgiRgoMS2V5VmFsdWVQYWlyEhkK",
          "A2tleRgBIAEoCzIELlBhckIG4j8D8AEBEhsKBXZhbHVlGAIgASgLMgQuUGFy",
          "QgbiPwPwAQEiHwoERVZhchIXCgF2GAEgASgLMgQuVmFyQgbiPwPwAQEiHwoE",
          "RU5vdBIXCgFwGAEgASgLMgQuUGFyQgbiPwPwAQEiHwoERU5lZxIXCgFwGAEg",
          "ASgLMgQuUGFyQgbiPwPwAQEiOwoFRU11bHQSGAoCcDEYASABKAsyBC5QYXJC",
          "BuI/A/ABARIYCgJwMhgCIAEoCzIELlBhckIG4j8D8AEBIjoKBEVEaXYSGAoC",
          "cDEYASABKAsyBC5QYXJCBuI/A/ABARIYCgJwMhgCIAEoCzIELlBhckIG4j8D",
          "8AEBIjoKBEVNb2QSGAoCcDEYASABKAsyBC5QYXJCBuI/A/ABARIYCgJwMhgC",
          "IAEoCzIELlBhckIG4j8D8AEBIjsKBUVQbHVzEhgKAnAxGAEgASgLMgQuUGFy",
          "QgbiPwPwAQESGAoCcDIYAiABKAsyBC5QYXJCBuI/A/ABASI8CgZFTWludXMS",
          "GAoCcDEYASABKAsyBC5QYXJCBuI/A/ABARIYCgJwMhgCIAEoCzIELlBhckIG",
          "4j8D8AEBIjkKA0VMdBIYCgJwMRgBIAEoCzIELlBhckIG4j8D8AEBEhgKAnAy",
          "GAIgASgLMgQuUGFyQgbiPwPwAQEiOgoERUx0ZRIYCgJwMRgBIAEoCzIELlBh",
          "ckIG4j8D8AEBEhgKAnAyGAIgASgLMgQuUGFyQgbiPwPwAQEiOQoDRUd0EhgK",
          "AnAxGAEgASgLMgQuUGFyQgbiPwPwAQESGAoCcDIYAiABKAsyBC5QYXJCBuI/",
          "A/ABASI6CgRFR3RlEhgKAnAxGAEgASgLMgQuUGFyQgbiPwPwAQESGAoCcDIY",
          "AiABKAsyBC5QYXJCBuI/A/ABASI5CgNFRXESGAoCcDEYASABKAsyBC5QYXJC",
          "BuI/A/ABARIYCgJwMhgCIAEoCzIELlBhckIG4j8D8AEBIjoKBEVOZXESGAoC",
          "cDEYASABKAsyBC5QYXJCBuI/A/ABARIYCgJwMhgCIAEoCzIELlBhckIG4j8D",
          "8AEBIjoKBEVBbmQSGAoCcDEYASABKAsyBC5QYXJCBuI/A/ABARIYCgJwMhgC",
          "IAEoCzIELlBhckIG4j8D8AEBIjkKA0VPchIYCgJwMRgBIAEoCzIELlBhckIG",
          "4j8D8AEBEhgKAnAyGAIgASgLMgQuUGFyQgbiPwPwAQEiRwoIRU1hdGNoZXMS",
          "HAoGdGFyZ2V0GAEgASgLMgQuUGFyQgbiPwPwAQESHQoHcGF0dGVybhgCIAEo",
          "CzIELlBhckIG4j8D8AEBIkUKD0VQZXJjZW50UGVyY2VudBIYCgJwMRgBIAEo",
          "CzIELlBhckIG4j8D8AEBEhgKAnAyGAIgASgLMgQuUGFyQgbiPwPwAQEiPwoJ",
          "RVBsdXNQbHVzEhgKAnAxGAEgASgLMgQuUGFyQgbiPwPwAQESGAoCcDIYAiAB",
          "KAsyBC5QYXJCBuI/A/ABASJBCgtFTWludXNNaW51cxIYCgJwMRgBIAEoCzIE",
          "LlBhckIG4j8D8AEBEhgKAnAyGAIgASgLMgQuUGFyQgbiPwPwAQEipQIKCkNv",
          "bm5lY3RpdmUSKAoNY29ubl9hbmRfYm9keRgBIAEoCzIPLkNvbm5lY3RpdmVC",
          "b2R5SAASJwoMY29ubl9vcl9ib2R5GAIgASgLMg8uQ29ubmVjdGl2ZUJvZHlI",
          "ABIdCg1jb25uX25vdF9ib2R5GAMgASgLMgQuUGFySAASHwoMdmFyX3JlZl9i",
          "b2R5GAQgASgLMgcuVmFyUmVmSAASEwoJY29ubl9ib29sGAUgASgISAASEgoI",
          "Y29ubl9pbnQYBiABKAhIABIVCgtjb25uX3N0cmluZxgHIAEoCEgAEhIKCGNv",
          "bm5fdXJpGAggASgISAASGQoPY29ubl9ieXRlX2FycmF5GAkgASgISABCFQoT",
          "Y29ubmVjdGl2ZV9pbnN0YW5jZSImCgZWYXJSZWYSDQoFaW5kZXgYASABKBES",
          "DQoFZGVwdGgYAiABKBEiIgoOQ29ubmVjdGl2ZUJvZHkSEAoCcHMYASADKAsy",
          "BC5QYXIiFwoIRGVwbG95SWQSCwoDc2lnGAEgASgMIh8KCkRlcGxveWVySWQS",
          "EQoJcHVibGljS2V5GAEgASgMIsgBCgxHVW5mb3JnZWFibGUSIwoOZ19wcml2",
          "YXRlX2JvZHkYASABKAsyCS5HUHJpdmF0ZUgAEiYKEGdfZGVwbG95X2lkX2Jv",
          "ZHkYAiABKAsyCi5HRGVwbG95SWRIABIqChJnX2RlcGxveWVyX2lkX2JvZHkY",
          "AyABKAsyDC5HRGVwbG95ZXJJZEgAEi8KFWdfc3lzX2F1dGhfdG9rZW5fYm9k",
          "eRgEIAEoCzIOLkdTeXNBdXRoVG9rZW5IAEIOCgx1bmZfaW5zdGFuY2UiFgoI",
          "R1ByaXZhdGUSCgoCaWQYASABKAwiGAoJR0RlcGxveUlkEgsKA3NpZxgBIAEo",
          "DCIgCgtHRGVwbG95ZXJJZBIRCglwdWJsaWNLZXkYASABKAwiDwoNR1N5c0F1",
          "dGhUb2tlbkLGAeI/wgEKEmNvb3AucmNoYWluLm1vZGVscxo2Y29vcC5yY2hh",
          "aW4ubW9kZWxzLkJpdFNldEJ5dGVzTWFwcGVyLmJpdFNldEJ5dGVzTWFwcGVy",
          "Gjhjb29wLnJjaGFpbi5tb2RlbHMuUGFyU2V0VHlwZU1hcHBlci5wYXJTZXRF",
          "U2V0VHlwZU1hcHBlcho4Y29vcC5yY2hhaW4ubW9kZWxzLlBhck1hcFR5cGVN",
          "YXBwZXIucGFyTWFwRU1hcFR5cGVNYXBwZXJIAGIGcHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::Scalapb.ScalapbReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::Par), global::Par.Parser, new[]{ "Sends", "Receives", "News", "Exprs", "Matches", "Unforgeables", "Bundles", "Connectives", "LocallyFree", "ConnectiveUsed" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TaggedContinuation), global::TaggedContinuation.Parser, new[]{ "ParBody", "ScalaBodyRef" }, new[]{ "TaggedCont" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ParWithRandom), global::ParWithRandom.Parser, new[]{ "Body", "RandomState" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PCost), global::PCost.Parser, new[]{ "Cost" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListParWithRandom), global::ListParWithRandom.Parser, new[]{ "Pars", "RandomState" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Var), global::Var.Parser, new[]{ "BoundVar", "FreeVar", "Wildcard" }, new[]{ "VarInstance" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Var.Types.WildcardMsg), global::Var.Types.WildcardMsg.Parser, null, null, null, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::Bundle), global::Bundle.Parser, new[]{ "Body", "WriteFlag", "ReadFlag" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Send), global::Send.Parser, new[]{ "Chan", "Data", "Persistent", "LocallyFree", "ConnectiveUsed" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ReceiveBind), global::ReceiveBind.Parser, new[]{ "Patterns", "Source", "Remainder", "FreeCount" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BindPattern), global::BindPattern.Parser, new[]{ "Patterns", "Remainder", "FreeCount" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListBindPatterns), global::ListBindPatterns.Parser, new[]{ "Patterns" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Receive), global::Receive.Parser, new[]{ "Binds", "Body", "Persistent", "Peek", "BindCount", "LocallyFree", "ConnectiveUsed" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::New), global::New.Parser, new[]{ "BindCount", "P", "Uri", "Injections", "LocallyFree" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::MatchCase), global::MatchCase.Parser, new[]{ "Pattern", "Source", "FreeCount" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Match), global::Match.Parser, new[]{ "Target", "Cases", "LocallyFree", "ConnectiveUsed" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Expr), global::Expr.Parser, new[]{ "GBool", "GInt", "GString", "GUri", "GByteArray", "ENotBody", "ENegBody", "EMultBody", "EDivBody", "EPlusBody", "EMinusBody", "ELtBody", "ELteBody", "EGtBody", "EGteBody", "EEqBody", "ENeqBody", "EAndBody", "EOrBody", "EVarBody", "EListBody", "ETupleBody", "ESetBody", "EMapBody", "EMethodBody", "EMatchesBody", "EPercentPercentBody", "EPlusPlusBody", "EMinusMinusBody", "EModBody" }, new[]{ "ExprInstance" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::EList), global::EList.Parser, new[]{ "Ps", "LocallyFree", "ConnectiveUsed", "Remainder" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ETuple), global::ETuple.Parser, new[]{ "Ps", "LocallyFree", "ConnectiveUsed" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ESet), global::ESet.Parser, new[]{ "Ps", "LocallyFree", "ConnectiveUsed", "Remainder" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::EMap), global::EMap.Parser, new[]{ "Kvs", "LocallyFree", "ConnectiveUsed", "Remainder" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::EMethod), global::EMethod.Parser, new[]{ "MethodName", "Target", "Arguments", "LocallyFree", "ConnectiveUsed" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::KeyValuePair), global::KeyValuePair.Parser, new[]{ "Key", "Value" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::EVar), global::EVar.Parser, new[]{ "V" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ENot), global::ENot.Parser, new[]{ "P" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ENeg), global::ENeg.Parser, new[]{ "P" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::EMult), global::EMult.Parser, new[]{ "P1", "P2" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::EDiv), global::EDiv.Parser, new[]{ "P1", "P2" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::EMod), global::EMod.Parser, new[]{ "P1", "P2" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::EPlus), global::EPlus.Parser, new[]{ "P1", "P2" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::EMinus), global::EMinus.Parser, new[]{ "P1", "P2" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ELt), global::ELt.Parser, new[]{ "P1", "P2" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ELte), global::ELte.Parser, new[]{ "P1", "P2" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::EGt), global::EGt.Parser, new[]{ "P1", "P2" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::EGte), global::EGte.Parser, new[]{ "P1", "P2" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::EEq), global::EEq.Parser, new[]{ "P1", "P2" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ENeq), global::ENeq.Parser, new[]{ "P1", "P2" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::EAnd), global::EAnd.Parser, new[]{ "P1", "P2" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::EOr), global::EOr.Parser, new[]{ "P1", "P2" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::EMatches), global::EMatches.Parser, new[]{ "Target", "Pattern" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::EPercentPercent), global::EPercentPercent.Parser, new[]{ "P1", "P2" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::EPlusPlus), global::EPlusPlus.Parser, new[]{ "P1", "P2" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::EMinusMinus), global::EMinusMinus.Parser, new[]{ "P1", "P2" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Connective), global::Connective.Parser, new[]{ "ConnAndBody", "ConnOrBody", "ConnNotBody", "VarRefBody", "ConnBool", "ConnInt", "ConnString", "ConnUri", "ConnByteArray" }, new[]{ "ConnectiveInstance" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VarRef), global::VarRef.Parser, new[]{ "Index", "Depth" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ConnectiveBody), global::ConnectiveBody.Parser, new[]{ "Ps" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DeployId), global::DeployId.Parser, new[]{ "Sig" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DeployerId), global::DeployerId.Parser, new[]{ "PublicKey" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GUnforgeable), global::GUnforgeable.Parser, new[]{ "GPrivateBody", "GDeployIdBody", "GDeployerIdBody", "GSysAuthTokenBody" }, new[]{ "UnfInstance" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GPrivate), global::GPrivate.Parser, new[]{ "Id" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GDeployId), global::GDeployId.Parser, new[]{ "Sig" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GDeployerId), global::GDeployerId.Parser, new[]{ "PublicKey" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GSysAuthToken), global::GSysAuthToken.Parser, null, null, null, null, null)
        }));
  }
  #endregion

}
#region Messages
/// <summary>
///*
/// Rholang process
///
/// For example, `@0!(1) | @2!(3) | for(x &lt;- @0) { Nil }` has two sends
/// and one receive.
///
/// The Nil process is a `Par` with no sends, receives, etc.
/// </summary>
public sealed partial class Par : pb::IMessage<Par>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<Par> _parser = new pb::MessageParser<Par>(() => new Par());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Par> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RhoTypesReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Par() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Par(Par other) : this() {
    sends_ = other.sends_.Clone();
    receives_ = other.receives_.Clone();
    news_ = other.news_.Clone();
    exprs_ = other.exprs_.Clone();
    matches_ = other.matches_.Clone();
    unforgeables_ = other.unforgeables_.Clone();
    bundles_ = other.bundles_.Clone();
    connectives_ = other.connectives_.Clone();
    locallyFree_ = other.locallyFree_;
    connectiveUsed_ = other.connectiveUsed_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Par Clone() {
    return new Par(this);
  }

  /// <summary>Field number for the "sends" field.</summary>
  public const int SendsFieldNumber = 1;
  private static readonly pb::FieldCodec<global::Send> _repeated_sends_codec
      = pb::FieldCodec.ForMessage(10, global::Send.Parser);
  private readonly pbc::RepeatedField<global::Send> sends_ = new pbc::RepeatedField<global::Send>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Send> Sends {
    get { return sends_; }
  }

  /// <summary>Field number for the "receives" field.</summary>
  public const int ReceivesFieldNumber = 2;
  private static readonly pb::FieldCodec<global::Receive> _repeated_receives_codec
      = pb::FieldCodec.ForMessage(18, global::Receive.Parser);
  private readonly pbc::RepeatedField<global::Receive> receives_ = new pbc::RepeatedField<global::Receive>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Receive> Receives {
    get { return receives_; }
  }

  /// <summary>Field number for the "news" field.</summary>
  public const int NewsFieldNumber = 4;
  private static readonly pb::FieldCodec<global::New> _repeated_news_codec
      = pb::FieldCodec.ForMessage(34, global::New.Parser);
  private readonly pbc::RepeatedField<global::New> news_ = new pbc::RepeatedField<global::New>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::New> News {
    get { return news_; }
  }

  /// <summary>Field number for the "exprs" field.</summary>
  public const int ExprsFieldNumber = 5;
  private static readonly pb::FieldCodec<global::Expr> _repeated_exprs_codec
      = pb::FieldCodec.ForMessage(42, global::Expr.Parser);
  private readonly pbc::RepeatedField<global::Expr> exprs_ = new pbc::RepeatedField<global::Expr>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Expr> Exprs {
    get { return exprs_; }
  }

  /// <summary>Field number for the "matches" field.</summary>
  public const int MatchesFieldNumber = 6;
  private static readonly pb::FieldCodec<global::Match> _repeated_matches_codec
      = pb::FieldCodec.ForMessage(50, global::Match.Parser);
  private readonly pbc::RepeatedField<global::Match> matches_ = new pbc::RepeatedField<global::Match>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Match> Matches {
    get { return matches_; }
  }

  /// <summary>Field number for the "unforgeables" field.</summary>
  public const int UnforgeablesFieldNumber = 7;
  private static readonly pb::FieldCodec<global::GUnforgeable> _repeated_unforgeables_codec
      = pb::FieldCodec.ForMessage(58, global::GUnforgeable.Parser);
  private readonly pbc::RepeatedField<global::GUnforgeable> unforgeables_ = new pbc::RepeatedField<global::GUnforgeable>();
  /// <summary>
  /// unforgeable names
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::GUnforgeable> Unforgeables {
    get { return unforgeables_; }
  }

  /// <summary>Field number for the "bundles" field.</summary>
  public const int BundlesFieldNumber = 11;
  private static readonly pb::FieldCodec<global::Bundle> _repeated_bundles_codec
      = pb::FieldCodec.ForMessage(90, global::Bundle.Parser);
  private readonly pbc::RepeatedField<global::Bundle> bundles_ = new pbc::RepeatedField<global::Bundle>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Bundle> Bundles {
    get { return bundles_; }
  }

  /// <summary>Field number for the "connectives" field.</summary>
  public const int ConnectivesFieldNumber = 8;
  private static readonly pb::FieldCodec<global::Connective> _repeated_connectives_codec
      = pb::FieldCodec.ForMessage(66, global::Connective.Parser);
  private readonly pbc::RepeatedField<global::Connective> connectives_ = new pbc::RepeatedField<global::Connective>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Connective> Connectives {
    get { return connectives_; }
  }

  /// <summary>Field number for the "locallyFree" field.</summary>
  public const int LocallyFreeFieldNumber = 9;
  private pb::ByteString locallyFree_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString LocallyFree {
    get { return locallyFree_; }
    set {
      locallyFree_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "connective_used" field.</summary>
  public const int ConnectiveUsedFieldNumber = 10;
  private bool connectiveUsed_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool ConnectiveUsed {
    get { return connectiveUsed_; }
    set {
      connectiveUsed_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Par);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Par other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!sends_.Equals(other.sends_)) return false;
    if(!receives_.Equals(other.receives_)) return false;
    if(!news_.Equals(other.news_)) return false;
    if(!exprs_.Equals(other.exprs_)) return false;
    if(!matches_.Equals(other.matches_)) return false;
    if(!unforgeables_.Equals(other.unforgeables_)) return false;
    if(!bundles_.Equals(other.bundles_)) return false;
    if(!connectives_.Equals(other.connectives_)) return false;
    if (LocallyFree != other.LocallyFree) return false;
    if (ConnectiveUsed != other.ConnectiveUsed) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= sends_.GetHashCode();
    hash ^= receives_.GetHashCode();
    hash ^= news_.GetHashCode();
    hash ^= exprs_.GetHashCode();
    hash ^= matches_.GetHashCode();
    hash ^= unforgeables_.GetHashCode();
    hash ^= bundles_.GetHashCode();
    hash ^= connectives_.GetHashCode();
    if (LocallyFree.Length != 0) hash ^= LocallyFree.GetHashCode();
    if (ConnectiveUsed != false) hash ^= ConnectiveUsed.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    sends_.WriteTo(output, _repeated_sends_codec);
    receives_.WriteTo(output, _repeated_receives_codec);
    news_.WriteTo(output, _repeated_news_codec);
    exprs_.WriteTo(output, _repeated_exprs_codec);
    matches_.WriteTo(output, _repeated_matches_codec);
    unforgeables_.WriteTo(output, _repeated_unforgeables_codec);
    connectives_.WriteTo(output, _repeated_connectives_codec);
    if (LocallyFree.Length != 0) {
      output.WriteRawTag(74);
      output.WriteBytes(LocallyFree);
    }
    if (ConnectiveUsed != false) {
      output.WriteRawTag(80);
      output.WriteBool(ConnectiveUsed);
    }
    bundles_.WriteTo(output, _repeated_bundles_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    sends_.WriteTo(ref output, _repeated_sends_codec);
    receives_.WriteTo(ref output, _repeated_receives_codec);
    news_.WriteTo(ref output, _repeated_news_codec);
    exprs_.WriteTo(ref output, _repeated_exprs_codec);
    matches_.WriteTo(ref output, _repeated_matches_codec);
    unforgeables_.WriteTo(ref output, _repeated_unforgeables_codec);
    connectives_.WriteTo(ref output, _repeated_connectives_codec);
    if (LocallyFree.Length != 0) {
      output.WriteRawTag(74);
      output.WriteBytes(LocallyFree);
    }
    if (ConnectiveUsed != false) {
      output.WriteRawTag(80);
      output.WriteBool(ConnectiveUsed);
    }
    bundles_.WriteTo(ref output, _repeated_bundles_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += sends_.CalculateSize(_repeated_sends_codec);
    size += receives_.CalculateSize(_repeated_receives_codec);
    size += news_.CalculateSize(_repeated_news_codec);
    size += exprs_.CalculateSize(_repeated_exprs_codec);
    size += matches_.CalculateSize(_repeated_matches_codec);
    size += unforgeables_.CalculateSize(_repeated_unforgeables_codec);
    size += bundles_.CalculateSize(_repeated_bundles_codec);
    size += connectives_.CalculateSize(_repeated_connectives_codec);
    if (LocallyFree.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(LocallyFree);
    }
    if (ConnectiveUsed != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Par other) {
    if (other == null) {
      return;
    }
    sends_.Add(other.sends_);
    receives_.Add(other.receives_);
    news_.Add(other.news_);
    exprs_.Add(other.exprs_);
    matches_.Add(other.matches_);
    unforgeables_.Add(other.unforgeables_);
    bundles_.Add(other.bundles_);
    connectives_.Add(other.connectives_);
    if (other.LocallyFree.Length != 0) {
      LocallyFree = other.LocallyFree;
    }
    if (other.ConnectiveUsed != false) {
      ConnectiveUsed = other.ConnectiveUsed;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          sends_.AddEntriesFrom(input, _repeated_sends_codec);
          break;
        }
        case 18: {
          receives_.AddEntriesFrom(input, _repeated_receives_codec);
          break;
        }
        case 34: {
          news_.AddEntriesFrom(input, _repeated_news_codec);
          break;
        }
        case 42: {
          exprs_.AddEntriesFrom(input, _repeated_exprs_codec);
          break;
        }
        case 50: {
          matches_.AddEntriesFrom(input, _repeated_matches_codec);
          break;
        }
        case 58: {
          unforgeables_.AddEntriesFrom(input, _repeated_unforgeables_codec);
          break;
        }
        case 66: {
          connectives_.AddEntriesFrom(input, _repeated_connectives_codec);
          break;
        }
        case 74: {
          LocallyFree = input.ReadBytes();
          break;
        }
        case 80: {
          ConnectiveUsed = input.ReadBool();
          break;
        }
        case 90: {
          bundles_.AddEntriesFrom(input, _repeated_bundles_codec);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          sends_.AddEntriesFrom(ref input, _repeated_sends_codec);
          break;
        }
        case 18: {
          receives_.AddEntriesFrom(ref input, _repeated_receives_codec);
          break;
        }
        case 34: {
          news_.AddEntriesFrom(ref input, _repeated_news_codec);
          break;
        }
        case 42: {
          exprs_.AddEntriesFrom(ref input, _repeated_exprs_codec);
          break;
        }
        case 50: {
          matches_.AddEntriesFrom(ref input, _repeated_matches_codec);
          break;
        }
        case 58: {
          unforgeables_.AddEntriesFrom(ref input, _repeated_unforgeables_codec);
          break;
        }
        case 66: {
          connectives_.AddEntriesFrom(ref input, _repeated_connectives_codec);
          break;
        }
        case 74: {
          LocallyFree = input.ReadBytes();
          break;
        }
        case 80: {
          ConnectiveUsed = input.ReadBool();
          break;
        }
        case 90: {
          bundles_.AddEntriesFrom(ref input, _repeated_bundles_codec);
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///*
/// Either rholang code or code built in to the interpreter.
/// </summary>
public sealed partial class TaggedContinuation : pb::IMessage<TaggedContinuation>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<TaggedContinuation> _parser = new pb::MessageParser<TaggedContinuation>(() => new TaggedContinuation());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TaggedContinuation> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RhoTypesReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TaggedContinuation() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TaggedContinuation(TaggedContinuation other) : this() {
    switch (other.TaggedContCase) {
      case TaggedContOneofCase.ParBody:
        ParBody = other.ParBody.Clone();
        break;
      case TaggedContOneofCase.ScalaBodyRef:
        ScalaBodyRef = other.ScalaBodyRef;
        break;
    }

    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TaggedContinuation Clone() {
    return new TaggedContinuation(this);
  }

  /// <summary>Field number for the "par_body" field.</summary>
  public const int ParBodyFieldNumber = 1;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ParWithRandom ParBody {
    get { return taggedContCase_ == TaggedContOneofCase.ParBody ? (global::ParWithRandom) taggedCont_ : null; }
    set {
      taggedCont_ = value;
      taggedContCase_ = value == null ? TaggedContOneofCase.None : TaggedContOneofCase.ParBody;
    }
  }

  /// <summary>Field number for the "scala_body_ref" field.</summary>
  public const int ScalaBodyRefFieldNumber = 2;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long ScalaBodyRef {
    get { return taggedContCase_ == TaggedContOneofCase.ScalaBodyRef ? (long) taggedCont_ : 0L; }
    set {
      taggedCont_ = value;
      taggedContCase_ = TaggedContOneofCase.ScalaBodyRef;
    }
  }

  private object taggedCont_;
  /// <summary>Enum of possible cases for the "tagged_cont" oneof.</summary>
  public enum TaggedContOneofCase {
    None = 0,
    ParBody = 1,
    ScalaBodyRef = 2,
  }
  private TaggedContOneofCase taggedContCase_ = TaggedContOneofCase.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TaggedContOneofCase TaggedContCase {
    get { return taggedContCase_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearTaggedCont() {
    taggedContCase_ = TaggedContOneofCase.None;
    taggedCont_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TaggedContinuation);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TaggedContinuation other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ParBody, other.ParBody)) return false;
    if (ScalaBodyRef != other.ScalaBodyRef) return false;
    if (TaggedContCase != other.TaggedContCase) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (taggedContCase_ == TaggedContOneofCase.ParBody) hash ^= ParBody.GetHashCode();
    if (taggedContCase_ == TaggedContOneofCase.ScalaBodyRef) hash ^= ScalaBodyRef.GetHashCode();
    hash ^= (int) taggedContCase_;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (taggedContCase_ == TaggedContOneofCase.ParBody) {
      output.WriteRawTag(10);
      output.WriteMessage(ParBody);
    }
    if (taggedContCase_ == TaggedContOneofCase.ScalaBodyRef) {
      output.WriteRawTag(16);
      output.WriteInt64(ScalaBodyRef);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (taggedContCase_ == TaggedContOneofCase.ParBody) {
      output.WriteRawTag(10);
      output.WriteMessage(ParBody);
    }
    if (taggedContCase_ == TaggedContOneofCase.ScalaBodyRef) {
      output.WriteRawTag(16);
      output.WriteInt64(ScalaBodyRef);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (taggedContCase_ == TaggedContOneofCase.ParBody) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ParBody);
    }
    if (taggedContCase_ == TaggedContOneofCase.ScalaBodyRef) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ScalaBodyRef);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TaggedContinuation other) {
    if (other == null) {
      return;
    }
    switch (other.TaggedContCase) {
      case TaggedContOneofCase.ParBody:
        if (ParBody == null) {
          ParBody = new global::ParWithRandom();
        }
        ParBody.MergeFrom(other.ParBody);
        break;
      case TaggedContOneofCase.ScalaBodyRef:
        ScalaBodyRef = other.ScalaBodyRef;
        break;
    }

    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          global::ParWithRandom subBuilder = new global::ParWithRandom();
          if (taggedContCase_ == TaggedContOneofCase.ParBody) {
            subBuilder.MergeFrom(ParBody);
          }
          input.ReadMessage(subBuilder);
          ParBody = subBuilder;
          break;
        }
        case 16: {
          ScalaBodyRef = input.ReadInt64();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          global::ParWithRandom subBuilder = new global::ParWithRandom();
          if (taggedContCase_ == TaggedContOneofCase.ParBody) {
            subBuilder.MergeFrom(ParBody);
          }
          input.ReadMessage(subBuilder);
          ParBody = subBuilder;
          break;
        }
        case 16: {
          ScalaBodyRef = input.ReadInt64();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///*
/// Rholang code along with the state of a split random number
/// generator for generating new unforgeable names.
/// </summary>
public sealed partial class ParWithRandom : pb::IMessage<ParWithRandom>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ParWithRandom> _parser = new pb::MessageParser<ParWithRandom>(() => new ParWithRandom());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ParWithRandom> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RhoTypesReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ParWithRandom() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ParWithRandom(ParWithRandom other) : this() {
    body_ = other.body_ != null ? other.body_.Clone() : null;
    randomState_ = other.randomState_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ParWithRandom Clone() {
    return new ParWithRandom(this);
  }

  /// <summary>Field number for the "body" field.</summary>
  public const int BodyFieldNumber = 1;
  private global::Par body_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Par Body {
    get { return body_; }
    set {
      body_ = value;
    }
  }

  /// <summary>Field number for the "randomState" field.</summary>
  public const int RandomStateFieldNumber = 2;
  private pb::ByteString randomState_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString RandomState {
    get { return randomState_; }
    set {
      randomState_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ParWithRandom);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ParWithRandom other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Body, other.Body)) return false;
    if (RandomState != other.RandomState) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (body_ != null) hash ^= Body.GetHashCode();
    if (RandomState.Length != 0) hash ^= RandomState.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (body_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Body);
    }
    if (RandomState.Length != 0) {
      output.WriteRawTag(18);
      output.WriteBytes(RandomState);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (body_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Body);
    }
    if (RandomState.Length != 0) {
      output.WriteRawTag(18);
      output.WriteBytes(RandomState);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (body_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Body);
    }
    if (RandomState.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(RandomState);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ParWithRandom other) {
    if (other == null) {
      return;
    }
    if (other.body_ != null) {
      if (body_ == null) {
        Body = new global::Par();
      }
      Body.MergeFrom(other.Body);
    }
    if (other.RandomState.Length != 0) {
      RandomState = other.RandomState;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (body_ == null) {
            Body = new global::Par();
          }
          input.ReadMessage(Body);
          break;
        }
        case 18: {
          RandomState = input.ReadBytes();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          if (body_ == null) {
            Body = new global::Par();
          }
          input.ReadMessage(Body);
          break;
        }
        case 18: {
          RandomState = input.ReadBytes();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///*
/// Cost of the performed operations.
/// </summary>
public sealed partial class PCost : pb::IMessage<PCost>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<PCost> _parser = new pb::MessageParser<PCost>(() => new PCost());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PCost> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RhoTypesReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PCost() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PCost(PCost other) : this() {
    cost_ = other.cost_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PCost Clone() {
    return new PCost(this);
  }

  /// <summary>Field number for the "cost" field.</summary>
  public const int CostFieldNumber = 1;
  private ulong cost_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Cost {
    get { return cost_; }
    set {
      cost_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PCost);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PCost other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Cost != other.Cost) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Cost != 0UL) hash ^= Cost.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (Cost != 0UL) {
      output.WriteRawTag(8);
      output.WriteUInt64(Cost);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (Cost != 0UL) {
      output.WriteRawTag(8);
      output.WriteUInt64(Cost);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Cost != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Cost);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PCost other) {
    if (other == null) {
      return;
    }
    if (other.Cost != 0UL) {
      Cost = other.Cost;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Cost = input.ReadUInt64();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Cost = input.ReadUInt64();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class ListParWithRandom : pb::IMessage<ListParWithRandom>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ListParWithRandom> _parser = new pb::MessageParser<ListParWithRandom>(() => new ListParWithRandom());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListParWithRandom> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RhoTypesReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListParWithRandom() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListParWithRandom(ListParWithRandom other) : this() {
    pars_ = other.pars_.Clone();
    randomState_ = other.randomState_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListParWithRandom Clone() {
    return new ListParWithRandom(this);
  }

  /// <summary>Field number for the "pars" field.</summary>
  public const int ParsFieldNumber = 1;
  private static readonly pb::FieldCodec<global::Par> _repeated_pars_codec
      = pb::FieldCodec.ForMessage(10, global::Par.Parser);
  private readonly pbc::RepeatedField<global::Par> pars_ = new pbc::RepeatedField<global::Par>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Par> Pars {
    get { return pars_; }
  }

  /// <summary>Field number for the "randomState" field.</summary>
  public const int RandomStateFieldNumber = 2;
  private pb::ByteString randomState_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString RandomState {
    get { return randomState_; }
    set {
      randomState_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListParWithRandom);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListParWithRandom other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!pars_.Equals(other.pars_)) return false;
    if (RandomState != other.RandomState) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= pars_.GetHashCode();
    if (RandomState.Length != 0) hash ^= RandomState.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    pars_.WriteTo(output, _repeated_pars_codec);
    if (RandomState.Length != 0) {
      output.WriteRawTag(18);
      output.WriteBytes(RandomState);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    pars_.WriteTo(ref output, _repeated_pars_codec);
    if (RandomState.Length != 0) {
      output.WriteRawTag(18);
      output.WriteBytes(RandomState);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += pars_.CalculateSize(_repeated_pars_codec);
    if (RandomState.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(RandomState);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListParWithRandom other) {
    if (other == null) {
      return;
    }
    pars_.Add(other.pars_);
    if (other.RandomState.Length != 0) {
      RandomState = other.RandomState;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          pars_.AddEntriesFrom(input, _repeated_pars_codec);
          break;
        }
        case 18: {
          RandomState = input.ReadBytes();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          pars_.AddEntriesFrom(ref input, _repeated_pars_codec);
          break;
        }
        case 18: {
          RandomState = input.ReadBytes();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// While we use vars in both positions, when producing the normalized
/// representation we need a discipline to track whether a var is a name or a
/// process.
/// These are DeBruijn levels
/// </summary>
public sealed partial class Var : pb::IMessage<Var>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<Var> _parser = new pb::MessageParser<Var>(() => new Var());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Var> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RhoTypesReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Var() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Var(Var other) : this() {
    switch (other.VarInstanceCase) {
      case VarInstanceOneofCase.BoundVar:
        BoundVar = other.BoundVar;
        break;
      case VarInstanceOneofCase.FreeVar:
        FreeVar = other.FreeVar;
        break;
      case VarInstanceOneofCase.Wildcard:
        Wildcard = other.Wildcard.Clone();
        break;
    }

    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Var Clone() {
    return new Var(this);
  }

  /// <summary>Field number for the "bound_var" field.</summary>
  public const int BoundVarFieldNumber = 1;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BoundVar {
    get { return varInstanceCase_ == VarInstanceOneofCase.BoundVar ? (int) varInstance_ : 0; }
    set {
      varInstance_ = value;
      varInstanceCase_ = VarInstanceOneofCase.BoundVar;
    }
  }

  /// <summary>Field number for the "free_var" field.</summary>
  public const int FreeVarFieldNumber = 2;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FreeVar {
    get { return varInstanceCase_ == VarInstanceOneofCase.FreeVar ? (int) varInstance_ : 0; }
    set {
      varInstance_ = value;
      varInstanceCase_ = VarInstanceOneofCase.FreeVar;
    }
  }

  /// <summary>Field number for the "wildcard" field.</summary>
  public const int WildcardFieldNumber = 3;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Var.Types.WildcardMsg Wildcard {
    get { return varInstanceCase_ == VarInstanceOneofCase.Wildcard ? (global::Var.Types.WildcardMsg) varInstance_ : null; }
    set {
      varInstance_ = value;
      varInstanceCase_ = value == null ? VarInstanceOneofCase.None : VarInstanceOneofCase.Wildcard;
    }
  }

  private object varInstance_;
  /// <summary>Enum of possible cases for the "var_instance" oneof.</summary>
  public enum VarInstanceOneofCase {
    None = 0,
    BoundVar = 1,
    FreeVar = 2,
    Wildcard = 3,
  }
  private VarInstanceOneofCase varInstanceCase_ = VarInstanceOneofCase.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VarInstanceOneofCase VarInstanceCase {
    get { return varInstanceCase_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarInstance() {
    varInstanceCase_ = VarInstanceOneofCase.None;
    varInstance_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Var);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Var other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (BoundVar != other.BoundVar) return false;
    if (FreeVar != other.FreeVar) return false;
    if (!object.Equals(Wildcard, other.Wildcard)) return false;
    if (VarInstanceCase != other.VarInstanceCase) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (varInstanceCase_ == VarInstanceOneofCase.BoundVar) hash ^= BoundVar.GetHashCode();
    if (varInstanceCase_ == VarInstanceOneofCase.FreeVar) hash ^= FreeVar.GetHashCode();
    if (varInstanceCase_ == VarInstanceOneofCase.Wildcard) hash ^= Wildcard.GetHashCode();
    hash ^= (int) varInstanceCase_;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (varInstanceCase_ == VarInstanceOneofCase.BoundVar) {
      output.WriteRawTag(8);
      output.WriteSInt32(BoundVar);
    }
    if (varInstanceCase_ == VarInstanceOneofCase.FreeVar) {
      output.WriteRawTag(16);
      output.WriteSInt32(FreeVar);
    }
    if (varInstanceCase_ == VarInstanceOneofCase.Wildcard) {
      output.WriteRawTag(26);
      output.WriteMessage(Wildcard);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (varInstanceCase_ == VarInstanceOneofCase.BoundVar) {
      output.WriteRawTag(8);
      output.WriteSInt32(BoundVar);
    }
    if (varInstanceCase_ == VarInstanceOneofCase.FreeVar) {
      output.WriteRawTag(16);
      output.WriteSInt32(FreeVar);
    }
    if (varInstanceCase_ == VarInstanceOneofCase.Wildcard) {
      output.WriteRawTag(26);
      output.WriteMessage(Wildcard);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (varInstanceCase_ == VarInstanceOneofCase.BoundVar) {
      size += 1 + pb::CodedOutputStream.ComputeSInt32Size(BoundVar);
    }
    if (varInstanceCase_ == VarInstanceOneofCase.FreeVar) {
      size += 1 + pb::CodedOutputStream.ComputeSInt32Size(FreeVar);
    }
    if (varInstanceCase_ == VarInstanceOneofCase.Wildcard) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Wildcard);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Var other) {
    if (other == null) {
      return;
    }
    switch (other.VarInstanceCase) {
      case VarInstanceOneofCase.BoundVar:
        BoundVar = other.BoundVar;
        break;
      case VarInstanceOneofCase.FreeVar:
        FreeVar = other.FreeVar;
        break;
      case VarInstanceOneofCase.Wildcard:
        if (Wildcard == null) {
          Wildcard = new global::Var.Types.WildcardMsg();
        }
        Wildcard.MergeFrom(other.Wildcard);
        break;
    }

    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          BoundVar = input.ReadSInt32();
          break;
        }
        case 16: {
          FreeVar = input.ReadSInt32();
          break;
        }
        case 26: {
          global::Var.Types.WildcardMsg subBuilder = new global::Var.Types.WildcardMsg();
          if (varInstanceCase_ == VarInstanceOneofCase.Wildcard) {
            subBuilder.MergeFrom(Wildcard);
          }
          input.ReadMessage(subBuilder);
          Wildcard = subBuilder;
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          BoundVar = input.ReadSInt32();
          break;
        }
        case 16: {
          FreeVar = input.ReadSInt32();
          break;
        }
        case 26: {
          global::Var.Types.WildcardMsg subBuilder = new global::Var.Types.WildcardMsg();
          if (varInstanceCase_ == VarInstanceOneofCase.Wildcard) {
            subBuilder.MergeFrom(Wildcard);
          }
          input.ReadMessage(subBuilder);
          Wildcard = subBuilder;
          break;
        }
      }
    }
  }
  #endif

  #region Nested types
  /// <summary>Container for nested types declared in the Var message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public sealed partial class WildcardMsg : pb::IMessage<WildcardMsg>
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        , pb::IBufferMessage
    #endif
    {
      private static readonly pb::MessageParser<WildcardMsg> _parser = new pb::MessageParser<WildcardMsg>(() => new WildcardMsg());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<WildcardMsg> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::Var.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public WildcardMsg() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public WildcardMsg(WildcardMsg other) : this() {
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public WildcardMsg Clone() {
        return new WildcardMsg(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as WildcardMsg);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(WildcardMsg other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        output.WriteRawMessage(this);
      #else
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
        if (_unknownFields != null) {
          _unknownFields.WriteTo(ref output);
        }
      }
      #endif

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(WildcardMsg other) {
        if (other == null) {
          return;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        input.ReadRawMessage(this);
      #else
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
          }
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
              break;
          }
        }
      }
      #endif

    }

  }
  #endregion

}

/// <summary>
///*
/// Nothing can be received from a (quoted) bundle with `readFlag = false`.
/// Likeise nothing can be sent to a (quoted) bundle with `writeFlag = false`.
///
/// If both flags are set to false, bundle allows only for equivalance check.
/// </summary>
public sealed partial class Bundle : pb::IMessage<Bundle>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<Bundle> _parser = new pb::MessageParser<Bundle>(() => new Bundle());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Bundle> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RhoTypesReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Bundle() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Bundle(Bundle other) : this() {
    body_ = other.body_ != null ? other.body_.Clone() : null;
    writeFlag_ = other.writeFlag_;
    readFlag_ = other.readFlag_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Bundle Clone() {
    return new Bundle(this);
  }

  /// <summary>Field number for the "body" field.</summary>
  public const int BodyFieldNumber = 1;
  private global::Par body_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Par Body {
    get { return body_; }
    set {
      body_ = value;
    }
  }

  /// <summary>Field number for the "writeFlag" field.</summary>
  public const int WriteFlagFieldNumber = 2;
  private bool writeFlag_;
  /// <summary>
  /// flag indicating whether bundle is writeable
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool WriteFlag {
    get { return writeFlag_; }
    set {
      writeFlag_ = value;
    }
  }

  /// <summary>Field number for the "readFlag" field.</summary>
  public const int ReadFlagFieldNumber = 3;
  private bool readFlag_;
  /// <summary>
  /// flag indicating whether bundle is readable
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool ReadFlag {
    get { return readFlag_; }
    set {
      readFlag_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Bundle);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Bundle other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Body, other.Body)) return false;
    if (WriteFlag != other.WriteFlag) return false;
    if (ReadFlag != other.ReadFlag) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (body_ != null) hash ^= Body.GetHashCode();
    if (WriteFlag != false) hash ^= WriteFlag.GetHashCode();
    if (ReadFlag != false) hash ^= ReadFlag.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (body_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Body);
    }
    if (WriteFlag != false) {
      output.WriteRawTag(16);
      output.WriteBool(WriteFlag);
    }
    if (ReadFlag != false) {
      output.WriteRawTag(24);
      output.WriteBool(ReadFlag);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (body_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Body);
    }
    if (WriteFlag != false) {
      output.WriteRawTag(16);
      output.WriteBool(WriteFlag);
    }
    if (ReadFlag != false) {
      output.WriteRawTag(24);
      output.WriteBool(ReadFlag);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (body_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Body);
    }
    if (WriteFlag != false) {
      size += 1 + 1;
    }
    if (ReadFlag != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Bundle other) {
    if (other == null) {
      return;
    }
    if (other.body_ != null) {
      if (body_ == null) {
        Body = new global::Par();
      }
      Body.MergeFrom(other.Body);
    }
    if (other.WriteFlag != false) {
      WriteFlag = other.WriteFlag;
    }
    if (other.ReadFlag != false) {
      ReadFlag = other.ReadFlag;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (body_ == null) {
            Body = new global::Par();
          }
          input.ReadMessage(Body);
          break;
        }
        case 16: {
          WriteFlag = input.ReadBool();
          break;
        }
        case 24: {
          ReadFlag = input.ReadBool();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          if (body_ == null) {
            Body = new global::Par();
          }
          input.ReadMessage(Body);
          break;
        }
        case 16: {
          WriteFlag = input.ReadBool();
          break;
        }
        case 24: {
          ReadFlag = input.ReadBool();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///*
/// A send is written `chan!(data)` or `chan!!(data)` for a persistent send.
///
/// Upon send, all free variables in data are substituted with their values.
/// </summary>
public sealed partial class Send : pb::IMessage<Send>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<Send> _parser = new pb::MessageParser<Send>(() => new Send());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Send> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RhoTypesReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Send() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Send(Send other) : this() {
    chan_ = other.chan_ != null ? other.chan_.Clone() : null;
    data_ = other.data_.Clone();
    persistent_ = other.persistent_;
    locallyFree_ = other.locallyFree_;
    connectiveUsed_ = other.connectiveUsed_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Send Clone() {
    return new Send(this);
  }

  /// <summary>Field number for the "chan" field.</summary>
  public const int ChanFieldNumber = 1;
  private global::Par chan_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Par Chan {
    get { return chan_; }
    set {
      chan_ = value;
    }
  }

  /// <summary>Field number for the "data" field.</summary>
  public const int DataFieldNumber = 2;
  private static readonly pb::FieldCodec<global::Par> _repeated_data_codec
      = pb::FieldCodec.ForMessage(18, global::Par.Parser);
  private readonly pbc::RepeatedField<global::Par> data_ = new pbc::RepeatedField<global::Par>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Par> Data {
    get { return data_; }
  }

  /// <summary>Field number for the "persistent" field.</summary>
  public const int PersistentFieldNumber = 3;
  private bool persistent_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Persistent {
    get { return persistent_; }
    set {
      persistent_ = value;
    }
  }

  /// <summary>Field number for the "locallyFree" field.</summary>
  public const int LocallyFreeFieldNumber = 5;
  private pb::ByteString locallyFree_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString LocallyFree {
    get { return locallyFree_; }
    set {
      locallyFree_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "connective_used" field.</summary>
  public const int ConnectiveUsedFieldNumber = 6;
  private bool connectiveUsed_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool ConnectiveUsed {
    get { return connectiveUsed_; }
    set {
      connectiveUsed_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Send);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Send other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Chan, other.Chan)) return false;
    if(!data_.Equals(other.data_)) return false;
    if (Persistent != other.Persistent) return false;
    if (LocallyFree != other.LocallyFree) return false;
    if (ConnectiveUsed != other.ConnectiveUsed) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (chan_ != null) hash ^= Chan.GetHashCode();
    hash ^= data_.GetHashCode();
    if (Persistent != false) hash ^= Persistent.GetHashCode();
    if (LocallyFree.Length != 0) hash ^= LocallyFree.GetHashCode();
    if (ConnectiveUsed != false) hash ^= ConnectiveUsed.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (chan_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Chan);
    }
    data_.WriteTo(output, _repeated_data_codec);
    if (Persistent != false) {
      output.WriteRawTag(24);
      output.WriteBool(Persistent);
    }
    if (LocallyFree.Length != 0) {
      output.WriteRawTag(42);
      output.WriteBytes(LocallyFree);
    }
    if (ConnectiveUsed != false) {
      output.WriteRawTag(48);
      output.WriteBool(ConnectiveUsed);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (chan_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Chan);
    }
    data_.WriteTo(ref output, _repeated_data_codec);
    if (Persistent != false) {
      output.WriteRawTag(24);
      output.WriteBool(Persistent);
    }
    if (LocallyFree.Length != 0) {
      output.WriteRawTag(42);
      output.WriteBytes(LocallyFree);
    }
    if (ConnectiveUsed != false) {
      output.WriteRawTag(48);
      output.WriteBool(ConnectiveUsed);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (chan_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Chan);
    }
    size += data_.CalculateSize(_repeated_data_codec);
    if (Persistent != false) {
      size += 1 + 1;
    }
    if (LocallyFree.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(LocallyFree);
    }
    if (ConnectiveUsed != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Send other) {
    if (other == null) {
      return;
    }
    if (other.chan_ != null) {
      if (chan_ == null) {
        Chan = new global::Par();
      }
      Chan.MergeFrom(other.Chan);
    }
    data_.Add(other.data_);
    if (other.Persistent != false) {
      Persistent = other.Persistent;
    }
    if (other.LocallyFree.Length != 0) {
      LocallyFree = other.LocallyFree;
    }
    if (other.ConnectiveUsed != false) {
      ConnectiveUsed = other.ConnectiveUsed;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (chan_ == null) {
            Chan = new global::Par();
          }
          input.ReadMessage(Chan);
          break;
        }
        case 18: {
          data_.AddEntriesFrom(input, _repeated_data_codec);
          break;
        }
        case 24: {
          Persistent = input.ReadBool();
          break;
        }
        case 42: {
          LocallyFree = input.ReadBytes();
          break;
        }
        case 48: {
          ConnectiveUsed = input.ReadBool();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          if (chan_ == null) {
            Chan = new global::Par();
          }
          input.ReadMessage(Chan);
          break;
        }
        case 18: {
          data_.AddEntriesFrom(ref input, _repeated_data_codec);
          break;
        }
        case 24: {
          Persistent = input.ReadBool();
          break;
        }
        case 42: {
          LocallyFree = input.ReadBytes();
          break;
        }
        case 48: {
          ConnectiveUsed = input.ReadBool();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class ReceiveBind : pb::IMessage<ReceiveBind>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ReceiveBind> _parser = new pb::MessageParser<ReceiveBind>(() => new ReceiveBind());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ReceiveBind> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RhoTypesReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReceiveBind() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReceiveBind(ReceiveBind other) : this() {
    patterns_ = other.patterns_.Clone();
    source_ = other.source_ != null ? other.source_.Clone() : null;
    remainder_ = other.remainder_ != null ? other.remainder_.Clone() : null;
    freeCount_ = other.freeCount_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReceiveBind Clone() {
    return new ReceiveBind(this);
  }

  /// <summary>Field number for the "patterns" field.</summary>
  public const int PatternsFieldNumber = 1;
  private static readonly pb::FieldCodec<global::Par> _repeated_patterns_codec
      = pb::FieldCodec.ForMessage(10, global::Par.Parser);
  private readonly pbc::RepeatedField<global::Par> patterns_ = new pbc::RepeatedField<global::Par>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Par> Patterns {
    get { return patterns_; }
  }

  /// <summary>Field number for the "source" field.</summary>
  public const int SourceFieldNumber = 2;
  private global::Par source_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Par Source {
    get { return source_; }
    set {
      source_ = value;
    }
  }

  /// <summary>Field number for the "remainder" field.</summary>
  public const int RemainderFieldNumber = 3;
  private global::Var remainder_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Var Remainder {
    get { return remainder_; }
    set {
      remainder_ = value;
    }
  }

  /// <summary>Field number for the "freeCount" field.</summary>
  public const int FreeCountFieldNumber = 4;
  private int freeCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FreeCount {
    get { return freeCount_; }
    set {
      freeCount_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ReceiveBind);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ReceiveBind other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!patterns_.Equals(other.patterns_)) return false;
    if (!object.Equals(Source, other.Source)) return false;
    if (!object.Equals(Remainder, other.Remainder)) return false;
    if (FreeCount != other.FreeCount) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= patterns_.GetHashCode();
    if (source_ != null) hash ^= Source.GetHashCode();
    if (remainder_ != null) hash ^= Remainder.GetHashCode();
    if (FreeCount != 0) hash ^= FreeCount.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    patterns_.WriteTo(output, _repeated_patterns_codec);
    if (source_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Source);
    }
    if (remainder_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Remainder);
    }
    if (FreeCount != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(FreeCount);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    patterns_.WriteTo(ref output, _repeated_patterns_codec);
    if (source_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Source);
    }
    if (remainder_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Remainder);
    }
    if (FreeCount != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(FreeCount);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += patterns_.CalculateSize(_repeated_patterns_codec);
    if (source_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
    }
    if (remainder_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Remainder);
    }
    if (FreeCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeCount);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ReceiveBind other) {
    if (other == null) {
      return;
    }
    patterns_.Add(other.patterns_);
    if (other.source_ != null) {
      if (source_ == null) {
        Source = new global::Par();
      }
      Source.MergeFrom(other.Source);
    }
    if (other.remainder_ != null) {
      if (remainder_ == null) {
        Remainder = new global::Var();
      }
      Remainder.MergeFrom(other.Remainder);
    }
    if (other.FreeCount != 0) {
      FreeCount = other.FreeCount;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          patterns_.AddEntriesFrom(input, _repeated_patterns_codec);
          break;
        }
        case 18: {
          if (source_ == null) {
            Source = new global::Par();
          }
          input.ReadMessage(Source);
          break;
        }
        case 26: {
          if (remainder_ == null) {
            Remainder = new global::Var();
          }
          input.ReadMessage(Remainder);
          break;
        }
        case 32: {
          FreeCount = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          patterns_.AddEntriesFrom(ref input, _repeated_patterns_codec);
          break;
        }
        case 18: {
          if (source_ == null) {
            Source = new global::Par();
          }
          input.ReadMessage(Source);
          break;
        }
        case 26: {
          if (remainder_ == null) {
            Remainder = new global::Var();
          }
          input.ReadMessage(Remainder);
          break;
        }
        case 32: {
          FreeCount = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class BindPattern : pb::IMessage<BindPattern>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<BindPattern> _parser = new pb::MessageParser<BindPattern>(() => new BindPattern());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BindPattern> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RhoTypesReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BindPattern() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BindPattern(BindPattern other) : this() {
    patterns_ = other.patterns_.Clone();
    remainder_ = other.remainder_ != null ? other.remainder_.Clone() : null;
    freeCount_ = other.freeCount_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BindPattern Clone() {
    return new BindPattern(this);
  }

  /// <summary>Field number for the "patterns" field.</summary>
  public const int PatternsFieldNumber = 1;
  private static readonly pb::FieldCodec<global::Par> _repeated_patterns_codec
      = pb::FieldCodec.ForMessage(10, global::Par.Parser);
  private readonly pbc::RepeatedField<global::Par> patterns_ = new pbc::RepeatedField<global::Par>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Par> Patterns {
    get { return patterns_; }
  }

  /// <summary>Field number for the "remainder" field.</summary>
  public const int RemainderFieldNumber = 2;
  private global::Var remainder_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Var Remainder {
    get { return remainder_; }
    set {
      remainder_ = value;
    }
  }

  /// <summary>Field number for the "freeCount" field.</summary>
  public const int FreeCountFieldNumber = 3;
  private int freeCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FreeCount {
    get { return freeCount_; }
    set {
      freeCount_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BindPattern);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BindPattern other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!patterns_.Equals(other.patterns_)) return false;
    if (!object.Equals(Remainder, other.Remainder)) return false;
    if (FreeCount != other.FreeCount) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= patterns_.GetHashCode();
    if (remainder_ != null) hash ^= Remainder.GetHashCode();
    if (FreeCount != 0) hash ^= FreeCount.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    patterns_.WriteTo(output, _repeated_patterns_codec);
    if (remainder_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Remainder);
    }
    if (FreeCount != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(FreeCount);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    patterns_.WriteTo(ref output, _repeated_patterns_codec);
    if (remainder_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Remainder);
    }
    if (FreeCount != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(FreeCount);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += patterns_.CalculateSize(_repeated_patterns_codec);
    if (remainder_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Remainder);
    }
    if (FreeCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeCount);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BindPattern other) {
    if (other == null) {
      return;
    }
    patterns_.Add(other.patterns_);
    if (other.remainder_ != null) {
      if (remainder_ == null) {
        Remainder = new global::Var();
      }
      Remainder.MergeFrom(other.Remainder);
    }
    if (other.FreeCount != 0) {
      FreeCount = other.FreeCount;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          patterns_.AddEntriesFrom(input, _repeated_patterns_codec);
          break;
        }
        case 18: {
          if (remainder_ == null) {
            Remainder = new global::Var();
          }
          input.ReadMessage(Remainder);
          break;
        }
        case 24: {
          FreeCount = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          patterns_.AddEntriesFrom(ref input, _repeated_patterns_codec);
          break;
        }
        case 18: {
          if (remainder_ == null) {
            Remainder = new global::Var();
          }
          input.ReadMessage(Remainder);
          break;
        }
        case 24: {
          FreeCount = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class ListBindPatterns : pb::IMessage<ListBindPatterns>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ListBindPatterns> _parser = new pb::MessageParser<ListBindPatterns>(() => new ListBindPatterns());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListBindPatterns> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RhoTypesReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListBindPatterns() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListBindPatterns(ListBindPatterns other) : this() {
    patterns_ = other.patterns_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListBindPatterns Clone() {
    return new ListBindPatterns(this);
  }

  /// <summary>Field number for the "patterns" field.</summary>
  public const int PatternsFieldNumber = 1;
  private static readonly pb::FieldCodec<global::BindPattern> _repeated_patterns_codec
      = pb::FieldCodec.ForMessage(10, global::BindPattern.Parser);
  private readonly pbc::RepeatedField<global::BindPattern> patterns_ = new pbc::RepeatedField<global::BindPattern>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::BindPattern> Patterns {
    get { return patterns_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListBindPatterns);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListBindPatterns other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!patterns_.Equals(other.patterns_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= patterns_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    patterns_.WriteTo(output, _repeated_patterns_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    patterns_.WriteTo(ref output, _repeated_patterns_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += patterns_.CalculateSize(_repeated_patterns_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListBindPatterns other) {
    if (other == null) {
      return;
    }
    patterns_.Add(other.patterns_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          patterns_.AddEntriesFrom(input, _repeated_patterns_codec);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          patterns_.AddEntriesFrom(ref input, _repeated_patterns_codec);
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///*
/// A receive is written `for(binds) { body }`
/// i.e. `for(patterns &lt;- source) { body }`
/// or for a persistent recieve: `for(patterns &lt;= source) { body }`.
///
/// It's an error for free Variable to occur more than once in a pattern.
/// </summary>
public sealed partial class Receive : pb::IMessage<Receive>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<Receive> _parser = new pb::MessageParser<Receive>(() => new Receive());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Receive> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RhoTypesReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Receive() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Receive(Receive other) : this() {
    binds_ = other.binds_.Clone();
    body_ = other.body_ != null ? other.body_.Clone() : null;
    persistent_ = other.persistent_;
    peek_ = other.peek_;
    bindCount_ = other.bindCount_;
    locallyFree_ = other.locallyFree_;
    connectiveUsed_ = other.connectiveUsed_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Receive Clone() {
    return new Receive(this);
  }

  /// <summary>Field number for the "binds" field.</summary>
  public const int BindsFieldNumber = 1;
  private static readonly pb::FieldCodec<global::ReceiveBind> _repeated_binds_codec
      = pb::FieldCodec.ForMessage(10, global::ReceiveBind.Parser);
  private readonly pbc::RepeatedField<global::ReceiveBind> binds_ = new pbc::RepeatedField<global::ReceiveBind>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ReceiveBind> Binds {
    get { return binds_; }
  }

  /// <summary>Field number for the "body" field.</summary>
  public const int BodyFieldNumber = 2;
  private global::Par body_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Par Body {
    get { return body_; }
    set {
      body_ = value;
    }
  }

  /// <summary>Field number for the "persistent" field.</summary>
  public const int PersistentFieldNumber = 3;
  private bool persistent_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Persistent {
    get { return persistent_; }
    set {
      persistent_ = value;
    }
  }

  /// <summary>Field number for the "peek" field.</summary>
  public const int PeekFieldNumber = 4;
  private bool peek_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Peek {
    get { return peek_; }
    set {
      peek_ = value;
    }
  }

  /// <summary>Field number for the "bindCount" field.</summary>
  public const int BindCountFieldNumber = 5;
  private int bindCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BindCount {
    get { return bindCount_; }
    set {
      bindCount_ = value;
    }
  }

  /// <summary>Field number for the "locallyFree" field.</summary>
  public const int LocallyFreeFieldNumber = 6;
  private pb::ByteString locallyFree_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString LocallyFree {
    get { return locallyFree_; }
    set {
      locallyFree_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "connective_used" field.</summary>
  public const int ConnectiveUsedFieldNumber = 7;
  private bool connectiveUsed_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool ConnectiveUsed {
    get { return connectiveUsed_; }
    set {
      connectiveUsed_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Receive);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Receive other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!binds_.Equals(other.binds_)) return false;
    if (!object.Equals(Body, other.Body)) return false;
    if (Persistent != other.Persistent) return false;
    if (Peek != other.Peek) return false;
    if (BindCount != other.BindCount) return false;
    if (LocallyFree != other.LocallyFree) return false;
    if (ConnectiveUsed != other.ConnectiveUsed) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= binds_.GetHashCode();
    if (body_ != null) hash ^= Body.GetHashCode();
    if (Persistent != false) hash ^= Persistent.GetHashCode();
    if (Peek != false) hash ^= Peek.GetHashCode();
    if (BindCount != 0) hash ^= BindCount.GetHashCode();
    if (LocallyFree.Length != 0) hash ^= LocallyFree.GetHashCode();
    if (ConnectiveUsed != false) hash ^= ConnectiveUsed.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    binds_.WriteTo(output, _repeated_binds_codec);
    if (body_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Body);
    }
    if (Persistent != false) {
      output.WriteRawTag(24);
      output.WriteBool(Persistent);
    }
    if (Peek != false) {
      output.WriteRawTag(32);
      output.WriteBool(Peek);
    }
    if (BindCount != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(BindCount);
    }
    if (LocallyFree.Length != 0) {
      output.WriteRawTag(50);
      output.WriteBytes(LocallyFree);
    }
    if (ConnectiveUsed != false) {
      output.WriteRawTag(56);
      output.WriteBool(ConnectiveUsed);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    binds_.WriteTo(ref output, _repeated_binds_codec);
    if (body_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Body);
    }
    if (Persistent != false) {
      output.WriteRawTag(24);
      output.WriteBool(Persistent);
    }
    if (Peek != false) {
      output.WriteRawTag(32);
      output.WriteBool(Peek);
    }
    if (BindCount != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(BindCount);
    }
    if (LocallyFree.Length != 0) {
      output.WriteRawTag(50);
      output.WriteBytes(LocallyFree);
    }
    if (ConnectiveUsed != false) {
      output.WriteRawTag(56);
      output.WriteBool(ConnectiveUsed);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += binds_.CalculateSize(_repeated_binds_codec);
    if (body_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Body);
    }
    if (Persistent != false) {
      size += 1 + 1;
    }
    if (Peek != false) {
      size += 1 + 1;
    }
    if (BindCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BindCount);
    }
    if (LocallyFree.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(LocallyFree);
    }
    if (ConnectiveUsed != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Receive other) {
    if (other == null) {
      return;
    }
    binds_.Add(other.binds_);
    if (other.body_ != null) {
      if (body_ == null) {
        Body = new global::Par();
      }
      Body.MergeFrom(other.Body);
    }
    if (other.Persistent != false) {
      Persistent = other.Persistent;
    }
    if (other.Peek != false) {
      Peek = other.Peek;
    }
    if (other.BindCount != 0) {
      BindCount = other.BindCount;
    }
    if (other.LocallyFree.Length != 0) {
      LocallyFree = other.LocallyFree;
    }
    if (other.ConnectiveUsed != false) {
      ConnectiveUsed = other.ConnectiveUsed;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          binds_.AddEntriesFrom(input, _repeated_binds_codec);
          break;
        }
        case 18: {
          if (body_ == null) {
            Body = new global::Par();
          }
          input.ReadMessage(Body);
          break;
        }
        case 24: {
          Persistent = input.ReadBool();
          break;
        }
        case 32: {
          Peek = input.ReadBool();
          break;
        }
        case 40: {
          BindCount = input.ReadInt32();
          break;
        }
        case 50: {
          LocallyFree = input.ReadBytes();
          break;
        }
        case 56: {
          ConnectiveUsed = input.ReadBool();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          binds_.AddEntriesFrom(ref input, _repeated_binds_codec);
          break;
        }
        case 18: {
          if (body_ == null) {
            Body = new global::Par();
          }
          input.ReadMessage(Body);
          break;
        }
        case 24: {
          Persistent = input.ReadBool();
          break;
        }
        case 32: {
          Peek = input.ReadBool();
          break;
        }
        case 40: {
          BindCount = input.ReadInt32();
          break;
        }
        case 50: {
          LocallyFree = input.ReadBytes();
          break;
        }
        case 56: {
          ConnectiveUsed = input.ReadBool();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Number of variables bound in the new statement.
/// For normalized form, p should not contain solely another new.
/// Also for normalized form, the first use should be level+0, next use level+1
/// up to level+count for the last used variable.
/// </summary>
public sealed partial class New : pb::IMessage<New>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<New> _parser = new pb::MessageParser<New>(() => new New());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<New> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RhoTypesReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public New() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public New(New other) : this() {
    bindCount_ = other.bindCount_;
    p_ = other.p_ != null ? other.p_.Clone() : null;
    uri_ = other.uri_.Clone();
    injections_ = other.injections_.Clone();
    locallyFree_ = other.locallyFree_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public New Clone() {
    return new New(this);
  }

  /// <summary>Field number for the "bindCount" field.</summary>
  public const int BindCountFieldNumber = 1;
  private int bindCount_;
  /// <summary>
  /// Includes any uris listed below. This makes it easier to substitute or walk a term.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BindCount {
    get { return bindCount_; }
    set {
      bindCount_ = value;
    }
  }

  /// <summary>Field number for the "p" field.</summary>
  public const int PFieldNumber = 2;
  private global::Par p_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Par P {
    get { return p_; }
    set {
      p_ = value;
    }
  }

  /// <summary>Field number for the "uri" field.</summary>
  public const int UriFieldNumber = 3;
  private static readonly pb::FieldCodec<string> _repeated_uri_codec
      = pb::FieldCodec.ForString(26);
  private readonly pbc::RepeatedField<string> uri_ = new pbc::RepeatedField<string>();
  /// <summary>
  /// For normalization, uri-referenced variables come at the end, and in lexicographical order.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<string> Uri {
    get { return uri_; }
  }

  /// <summary>Field number for the "injections" field.</summary>
  public const int InjectionsFieldNumber = 4;
  private static readonly pbc::MapField<string, global::Par>.Codec _map_injections_codec
      = new pbc::MapField<string, global::Par>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::Par.Parser), 34);
  private readonly pbc::MapField<string, global::Par> injections_ = new pbc::MapField<string, global::Par>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<string, global::Par> Injections {
    get { return injections_; }
  }

  /// <summary>Field number for the "locallyFree" field.</summary>
  public const int LocallyFreeFieldNumber = 5;
  private pb::ByteString locallyFree_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString LocallyFree {
    get { return locallyFree_; }
    set {
      locallyFree_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as New);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(New other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (BindCount != other.BindCount) return false;
    if (!object.Equals(P, other.P)) return false;
    if(!uri_.Equals(other.uri_)) return false;
    if (!Injections.Equals(other.Injections)) return false;
    if (LocallyFree != other.LocallyFree) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (BindCount != 0) hash ^= BindCount.GetHashCode();
    if (p_ != null) hash ^= P.GetHashCode();
    hash ^= uri_.GetHashCode();
    hash ^= Injections.GetHashCode();
    if (LocallyFree.Length != 0) hash ^= LocallyFree.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (BindCount != 0) {
      output.WriteRawTag(8);
      output.WriteSInt32(BindCount);
    }
    if (p_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(P);
    }
    uri_.WriteTo(output, _repeated_uri_codec);
    injections_.WriteTo(output, _map_injections_codec);
    if (LocallyFree.Length != 0) {
      output.WriteRawTag(42);
      output.WriteBytes(LocallyFree);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (BindCount != 0) {
      output.WriteRawTag(8);
      output.WriteSInt32(BindCount);
    }
    if (p_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(P);
    }
    uri_.WriteTo(ref output, _repeated_uri_codec);
    injections_.WriteTo(ref output, _map_injections_codec);
    if (LocallyFree.Length != 0) {
      output.WriteRawTag(42);
      output.WriteBytes(LocallyFree);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (BindCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeSInt32Size(BindCount);
    }
    if (p_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(P);
    }
    size += uri_.CalculateSize(_repeated_uri_codec);
    size += injections_.CalculateSize(_map_injections_codec);
    if (LocallyFree.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(LocallyFree);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(New other) {
    if (other == null) {
      return;
    }
    if (other.BindCount != 0) {
      BindCount = other.BindCount;
    }
    if (other.p_ != null) {
      if (p_ == null) {
        P = new global::Par();
      }
      P.MergeFrom(other.P);
    }
    uri_.Add(other.uri_);
    injections_.Add(other.injections_);
    if (other.LocallyFree.Length != 0) {
      LocallyFree = other.LocallyFree;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          BindCount = input.ReadSInt32();
          break;
        }
        case 18: {
          if (p_ == null) {
            P = new global::Par();
          }
          input.ReadMessage(P);
          break;
        }
        case 26: {
          uri_.AddEntriesFrom(input, _repeated_uri_codec);
          break;
        }
        case 34: {
          injections_.AddEntriesFrom(input, _map_injections_codec);
          break;
        }
        case 42: {
          LocallyFree = input.ReadBytes();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          BindCount = input.ReadSInt32();
          break;
        }
        case 18: {
          if (p_ == null) {
            P = new global::Par();
          }
          input.ReadMessage(P);
          break;
        }
        case 26: {
          uri_.AddEntriesFrom(ref input, _repeated_uri_codec);
          break;
        }
        case 34: {
          injections_.AddEntriesFrom(ref input, _map_injections_codec);
          break;
        }
        case 42: {
          LocallyFree = input.ReadBytes();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class MatchCase : pb::IMessage<MatchCase>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<MatchCase> _parser = new pb::MessageParser<MatchCase>(() => new MatchCase());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MatchCase> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RhoTypesReflection.Descriptor.MessageTypes[13]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MatchCase() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MatchCase(MatchCase other) : this() {
    pattern_ = other.pattern_ != null ? other.pattern_.Clone() : null;
    source_ = other.source_ != null ? other.source_.Clone() : null;
    freeCount_ = other.freeCount_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MatchCase Clone() {
    return new MatchCase(this);
  }

  /// <summary>Field number for the "pattern" field.</summary>
  public const int PatternFieldNumber = 1;
  private global::Par pattern_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Par Pattern {
    get { return pattern_; }
    set {
      pattern_ = value;
    }
  }

  /// <summary>Field number for the "source" field.</summary>
  public const int SourceFieldNumber = 2;
  private global::Par source_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Par Source {
    get { return source_; }
    set {
      source_ = value;
    }
  }

  /// <summary>Field number for the "freeCount" field.</summary>
  public const int FreeCountFieldNumber = 3;
  private int freeCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FreeCount {
    get { return freeCount_; }
    set {
      freeCount_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MatchCase);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MatchCase other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Pattern, other.Pattern)) return false;
    if (!object.Equals(Source, other.Source)) return false;
    if (FreeCount != other.FreeCount) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (pattern_ != null) hash ^= Pattern.GetHashCode();
    if (source_ != null) hash ^= Source.GetHashCode();
    if (FreeCount != 0) hash ^= FreeCount.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (pattern_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Pattern);
    }
    if (source_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Source);
    }
    if (FreeCount != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(FreeCount);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (pattern_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Pattern);
    }
    if (source_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Source);
    }
    if (FreeCount != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(FreeCount);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (pattern_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pattern);
    }
    if (source_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
    }
    if (FreeCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeCount);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MatchCase other) {
    if (other == null) {
      return;
    }
    if (other.pattern_ != null) {
      if (pattern_ == null) {
        Pattern = new global::Par();
      }
      Pattern.MergeFrom(other.Pattern);
    }
    if (other.source_ != null) {
      if (source_ == null) {
        Source = new global::Par();
      }
      Source.MergeFrom(other.Source);
    }
    if (other.FreeCount != 0) {
      FreeCount = other.FreeCount;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (pattern_ == null) {
            Pattern = new global::Par();
          }
          input.ReadMessage(Pattern);
          break;
        }
        case 18: {
          if (source_ == null) {
            Source = new global::Par();
          }
          input.ReadMessage(Source);
          break;
        }
        case 24: {
          FreeCount = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          if (pattern_ == null) {
            Pattern = new global::Par();
          }
          input.ReadMessage(Pattern);
          break;
        }
        case 18: {
          if (source_ == null) {
            Source = new global::Par();
          }
          input.ReadMessage(Source);
          break;
        }
        case 24: {
          FreeCount = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class Match : pb::IMessage<Match>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<Match> _parser = new pb::MessageParser<Match>(() => new Match());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Match> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RhoTypesReflection.Descriptor.MessageTypes[14]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Match() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Match(Match other) : this() {
    target_ = other.target_ != null ? other.target_.Clone() : null;
    cases_ = other.cases_.Clone();
    locallyFree_ = other.locallyFree_;
    connectiveUsed_ = other.connectiveUsed_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Match Clone() {
    return new Match(this);
  }

  /// <summary>Field number for the "target" field.</summary>
  public const int TargetFieldNumber = 1;
  private global::Par target_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Par Target {
    get { return target_; }
    set {
      target_ = value;
    }
  }

  /// <summary>Field number for the "cases" field.</summary>
  public const int CasesFieldNumber = 2;
  private static readonly pb::FieldCodec<global::MatchCase> _repeated_cases_codec
      = pb::FieldCodec.ForMessage(18, global::MatchCase.Parser);
  private readonly pbc::RepeatedField<global::MatchCase> cases_ = new pbc::RepeatedField<global::MatchCase>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::MatchCase> Cases {
    get { return cases_; }
  }

  /// <summary>Field number for the "locallyFree" field.</summary>
  public const int LocallyFreeFieldNumber = 4;
  private pb::ByteString locallyFree_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString LocallyFree {
    get { return locallyFree_; }
    set {
      locallyFree_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "connective_used" field.</summary>
  public const int ConnectiveUsedFieldNumber = 5;
  private bool connectiveUsed_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool ConnectiveUsed {
    get { return connectiveUsed_; }
    set {
      connectiveUsed_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Match);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Match other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Target, other.Target)) return false;
    if(!cases_.Equals(other.cases_)) return false;
    if (LocallyFree != other.LocallyFree) return false;
    if (ConnectiveUsed != other.ConnectiveUsed) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (target_ != null) hash ^= Target.GetHashCode();
    hash ^= cases_.GetHashCode();
    if (LocallyFree.Length != 0) hash ^= LocallyFree.GetHashCode();
    if (ConnectiveUsed != false) hash ^= ConnectiveUsed.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (target_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Target);
    }
    cases_.WriteTo(output, _repeated_cases_codec);
    if (LocallyFree.Length != 0) {
      output.WriteRawTag(34);
      output.WriteBytes(LocallyFree);
    }
    if (ConnectiveUsed != false) {
      output.WriteRawTag(40);
      output.WriteBool(ConnectiveUsed);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (target_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Target);
    }
    cases_.WriteTo(ref output, _repeated_cases_codec);
    if (LocallyFree.Length != 0) {
      output.WriteRawTag(34);
      output.WriteBytes(LocallyFree);
    }
    if (ConnectiveUsed != false) {
      output.WriteRawTag(40);
      output.WriteBool(ConnectiveUsed);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (target_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Target);
    }
    size += cases_.CalculateSize(_repeated_cases_codec);
    if (LocallyFree.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(LocallyFree);
    }
    if (ConnectiveUsed != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Match other) {
    if (other == null) {
      return;
    }
    if (other.target_ != null) {
      if (target_ == null) {
        Target = new global::Par();
      }
      Target.MergeFrom(other.Target);
    }
    cases_.Add(other.cases_);
    if (other.LocallyFree.Length != 0) {
      LocallyFree = other.LocallyFree;
    }
    if (other.ConnectiveUsed != false) {
      ConnectiveUsed = other.ConnectiveUsed;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (target_ == null) {
            Target = new global::Par();
          }
          input.ReadMessage(Target);
          break;
        }
        case 18: {
          cases_.AddEntriesFrom(input, _repeated_cases_codec);
          break;
        }
        case 34: {
          LocallyFree = input.ReadBytes();
          break;
        }
        case 40: {
          ConnectiveUsed = input.ReadBool();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          if (target_ == null) {
            Target = new global::Par();
          }
          input.ReadMessage(Target);
          break;
        }
        case 18: {
          cases_.AddEntriesFrom(ref input, _repeated_cases_codec);
          break;
        }
        case 34: {
          LocallyFree = input.ReadBytes();
          break;
        }
        case 40: {
          ConnectiveUsed = input.ReadBool();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Any process may be an operand to an expression.
/// Only processes equivalent to a ground process of compatible type will reduce.
/// </summary>
public sealed partial class Expr : pb::IMessage<Expr>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<Expr> _parser = new pb::MessageParser<Expr>(() => new Expr());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Expr> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RhoTypesReflection.Descriptor.MessageTypes[15]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Expr() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Expr(Expr other) : this() {
    switch (other.ExprInstanceCase) {
      case ExprInstanceOneofCase.GBool:
        GBool = other.GBool;
        break;
      case ExprInstanceOneofCase.GInt:
        GInt = other.GInt;
        break;
      case ExprInstanceOneofCase.GString:
        GString = other.GString;
        break;
      case ExprInstanceOneofCase.GUri:
        GUri = other.GUri;
        break;
      case ExprInstanceOneofCase.GByteArray:
        GByteArray = other.GByteArray;
        break;
      case ExprInstanceOneofCase.ENotBody:
        ENotBody = other.ENotBody.Clone();
        break;
      case ExprInstanceOneofCase.ENegBody:
        ENegBody = other.ENegBody.Clone();
        break;
      case ExprInstanceOneofCase.EMultBody:
        EMultBody = other.EMultBody.Clone();
        break;
      case ExprInstanceOneofCase.EDivBody:
        EDivBody = other.EDivBody.Clone();
        break;
      case ExprInstanceOneofCase.EPlusBody:
        EPlusBody = other.EPlusBody.Clone();
        break;
      case ExprInstanceOneofCase.EMinusBody:
        EMinusBody = other.EMinusBody.Clone();
        break;
      case ExprInstanceOneofCase.ELtBody:
        ELtBody = other.ELtBody.Clone();
        break;
      case ExprInstanceOneofCase.ELteBody:
        ELteBody = other.ELteBody.Clone();
        break;
      case ExprInstanceOneofCase.EGtBody:
        EGtBody = other.EGtBody.Clone();
        break;
      case ExprInstanceOneofCase.EGteBody:
        EGteBody = other.EGteBody.Clone();
        break;
      case ExprInstanceOneofCase.EEqBody:
        EEqBody = other.EEqBody.Clone();
        break;
      case ExprInstanceOneofCase.ENeqBody:
        ENeqBody = other.ENeqBody.Clone();
        break;
      case ExprInstanceOneofCase.EAndBody:
        EAndBody = other.EAndBody.Clone();
        break;
      case ExprInstanceOneofCase.EOrBody:
        EOrBody = other.EOrBody.Clone();
        break;
      case ExprInstanceOneofCase.EVarBody:
        EVarBody = other.EVarBody.Clone();
        break;
      case ExprInstanceOneofCase.EListBody:
        EListBody = other.EListBody.Clone();
        break;
      case ExprInstanceOneofCase.ETupleBody:
        ETupleBody = other.ETupleBody.Clone();
        break;
      case ExprInstanceOneofCase.ESetBody:
        ESetBody = other.ESetBody.Clone();
        break;
      case ExprInstanceOneofCase.EMapBody:
        EMapBody = other.EMapBody.Clone();
        break;
      case ExprInstanceOneofCase.EMethodBody:
        EMethodBody = other.EMethodBody.Clone();
        break;
      case ExprInstanceOneofCase.EMatchesBody:
        EMatchesBody = other.EMatchesBody.Clone();
        break;
      case ExprInstanceOneofCase.EPercentPercentBody:
        EPercentPercentBody = other.EPercentPercentBody.Clone();
        break;
      case ExprInstanceOneofCase.EPlusPlusBody:
        EPlusPlusBody = other.EPlusPlusBody.Clone();
        break;
      case ExprInstanceOneofCase.EMinusMinusBody:
        EMinusMinusBody = other.EMinusMinusBody.Clone();
        break;
      case ExprInstanceOneofCase.EModBody:
        EModBody = other.EModBody.Clone();
        break;
    }

    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Expr Clone() {
    return new Expr(this);
  }

  /// <summary>Field number for the "g_bool" field.</summary>
  public const int GBoolFieldNumber = 1;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool GBool {
    get { return exprInstanceCase_ == ExprInstanceOneofCase.GBool ? (bool) exprInstance_ : false; }
    set {
      exprInstance_ = value;
      exprInstanceCase_ = ExprInstanceOneofCase.GBool;
    }
  }

  /// <summary>Field number for the "g_int" field.</summary>
  public const int GIntFieldNumber = 2;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long GInt {
    get { return exprInstanceCase_ == ExprInstanceOneofCase.GInt ? (long) exprInstance_ : 0L; }
    set {
      exprInstance_ = value;
      exprInstanceCase_ = ExprInstanceOneofCase.GInt;
    }
  }

  /// <summary>Field number for the "g_string" field.</summary>
  public const int GStringFieldNumber = 3;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string GString {
    get { return exprInstanceCase_ == ExprInstanceOneofCase.GString ? (string) exprInstance_ : ""; }
    set {
      exprInstance_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      exprInstanceCase_ = ExprInstanceOneofCase.GString;
    }
  }

  /// <summary>Field number for the "g_uri" field.</summary>
  public const int GUriFieldNumber = 4;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string GUri {
    get { return exprInstanceCase_ == ExprInstanceOneofCase.GUri ? (string) exprInstance_ : ""; }
    set {
      exprInstance_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      exprInstanceCase_ = ExprInstanceOneofCase.GUri;
    }
  }

  /// <summary>Field number for the "g_byte_array" field.</summary>
  public const int GByteArrayFieldNumber = 25;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString GByteArray {
    get { return exprInstanceCase_ == ExprInstanceOneofCase.GByteArray ? (pb::ByteString) exprInstance_ : pb::ByteString.Empty; }
    set {
      exprInstance_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      exprInstanceCase_ = ExprInstanceOneofCase.GByteArray;
    }
  }

  /// <summary>Field number for the "e_not_body" field.</summary>
  public const int ENotBodyFieldNumber = 5;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ENot ENotBody {
    get { return exprInstanceCase_ == ExprInstanceOneofCase.ENotBody ? (global::ENot) exprInstance_ : null; }
    set {
      exprInstance_ = value;
      exprInstanceCase_ = value == null ? ExprInstanceOneofCase.None : ExprInstanceOneofCase.ENotBody;
    }
  }

  /// <summary>Field number for the "e_neg_body" field.</summary>
  public const int ENegBodyFieldNumber = 6;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ENeg ENegBody {
    get { return exprInstanceCase_ == ExprInstanceOneofCase.ENegBody ? (global::ENeg) exprInstance_ : null; }
    set {
      exprInstance_ = value;
      exprInstanceCase_ = value == null ? ExprInstanceOneofCase.None : ExprInstanceOneofCase.ENegBody;
    }
  }

  /// <summary>Field number for the "e_mult_body" field.</summary>
  public const int EMultBodyFieldNumber = 7;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::EMult EMultBody {
    get { return exprInstanceCase_ == ExprInstanceOneofCase.EMultBody ? (global::EMult) exprInstance_ : null; }
    set {
      exprInstance_ = value;
      exprInstanceCase_ = value == null ? ExprInstanceOneofCase.None : ExprInstanceOneofCase.EMultBody;
    }
  }

  /// <summary>Field number for the "e_div_body" field.</summary>
  public const int EDivBodyFieldNumber = 8;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::EDiv EDivBody {
    get { return exprInstanceCase_ == ExprInstanceOneofCase.EDivBody ? (global::EDiv) exprInstance_ : null; }
    set {
      exprInstance_ = value;
      exprInstanceCase_ = value == null ? ExprInstanceOneofCase.None : ExprInstanceOneofCase.EDivBody;
    }
  }

  /// <summary>Field number for the "e_plus_body" field.</summary>
  public const int EPlusBodyFieldNumber = 9;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::EPlus EPlusBody {
    get { return exprInstanceCase_ == ExprInstanceOneofCase.EPlusBody ? (global::EPlus) exprInstance_ : null; }
    set {
      exprInstance_ = value;
      exprInstanceCase_ = value == null ? ExprInstanceOneofCase.None : ExprInstanceOneofCase.EPlusBody;
    }
  }

  /// <summary>Field number for the "e_minus_body" field.</summary>
  public const int EMinusBodyFieldNumber = 10;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::EMinus EMinusBody {
    get { return exprInstanceCase_ == ExprInstanceOneofCase.EMinusBody ? (global::EMinus) exprInstance_ : null; }
    set {
      exprInstance_ = value;
      exprInstanceCase_ = value == null ? ExprInstanceOneofCase.None : ExprInstanceOneofCase.EMinusBody;
    }
  }

  /// <summary>Field number for the "e_lt_body" field.</summary>
  public const int ELtBodyFieldNumber = 11;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ELt ELtBody {
    get { return exprInstanceCase_ == ExprInstanceOneofCase.ELtBody ? (global::ELt) exprInstance_ : null; }
    set {
      exprInstance_ = value;
      exprInstanceCase_ = value == null ? ExprInstanceOneofCase.None : ExprInstanceOneofCase.ELtBody;
    }
  }

  /// <summary>Field number for the "e_lte_body" field.</summary>
  public const int ELteBodyFieldNumber = 12;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ELte ELteBody {
    get { return exprInstanceCase_ == ExprInstanceOneofCase.ELteBody ? (global::ELte) exprInstance_ : null; }
    set {
      exprInstance_ = value;
      exprInstanceCase_ = value == null ? ExprInstanceOneofCase.None : ExprInstanceOneofCase.ELteBody;
    }
  }

  /// <summary>Field number for the "e_gt_body" field.</summary>
  public const int EGtBodyFieldNumber = 13;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::EGt EGtBody {
    get { return exprInstanceCase_ == ExprInstanceOneofCase.EGtBody ? (global::EGt) exprInstance_ : null; }
    set {
      exprInstance_ = value;
      exprInstanceCase_ = value == null ? ExprInstanceOneofCase.None : ExprInstanceOneofCase.EGtBody;
    }
  }

  /// <summary>Field number for the "e_gte_body" field.</summary>
  public const int EGteBodyFieldNumber = 14;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::EGte EGteBody {
    get { return exprInstanceCase_ == ExprInstanceOneofCase.EGteBody ? (global::EGte) exprInstance_ : null; }
    set {
      exprInstance_ = value;
      exprInstanceCase_ = value == null ? ExprInstanceOneofCase.None : ExprInstanceOneofCase.EGteBody;
    }
  }

  /// <summary>Field number for the "e_eq_body" field.</summary>
  public const int EEqBodyFieldNumber = 15;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::EEq EEqBody {
    get { return exprInstanceCase_ == ExprInstanceOneofCase.EEqBody ? (global::EEq) exprInstance_ : null; }
    set {
      exprInstance_ = value;
      exprInstanceCase_ = value == null ? ExprInstanceOneofCase.None : ExprInstanceOneofCase.EEqBody;
    }
  }

  /// <summary>Field number for the "e_neq_body" field.</summary>
  public const int ENeqBodyFieldNumber = 16;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ENeq ENeqBody {
    get { return exprInstanceCase_ == ExprInstanceOneofCase.ENeqBody ? (global::ENeq) exprInstance_ : null; }
    set {
      exprInstance_ = value;
      exprInstanceCase_ = value == null ? ExprInstanceOneofCase.None : ExprInstanceOneofCase.ENeqBody;
    }
  }

  /// <summary>Field number for the "e_and_body" field.</summary>
  public const int EAndBodyFieldNumber = 17;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::EAnd EAndBody {
    get { return exprInstanceCase_ == ExprInstanceOneofCase.EAndBody ? (global::EAnd) exprInstance_ : null; }
    set {
      exprInstance_ = value;
      exprInstanceCase_ = value == null ? ExprInstanceOneofCase.None : ExprInstanceOneofCase.EAndBody;
    }
  }

  /// <summary>Field number for the "e_or_body" field.</summary>
  public const int EOrBodyFieldNumber = 18;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::EOr EOrBody {
    get { return exprInstanceCase_ == ExprInstanceOneofCase.EOrBody ? (global::EOr) exprInstance_ : null; }
    set {
      exprInstance_ = value;
      exprInstanceCase_ = value == null ? ExprInstanceOneofCase.None : ExprInstanceOneofCase.EOrBody;
    }
  }

  /// <summary>Field number for the "e_var_body" field.</summary>
  public const int EVarBodyFieldNumber = 19;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::EVar EVarBody {
    get { return exprInstanceCase_ == ExprInstanceOneofCase.EVarBody ? (global::EVar) exprInstance_ : null; }
    set {
      exprInstance_ = value;
      exprInstanceCase_ = value == null ? ExprInstanceOneofCase.None : ExprInstanceOneofCase.EVarBody;
    }
  }

  /// <summary>Field number for the "e_list_body" field.</summary>
  public const int EListBodyFieldNumber = 20;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::EList EListBody {
    get { return exprInstanceCase_ == ExprInstanceOneofCase.EListBody ? (global::EList) exprInstance_ : null; }
    set {
      exprInstance_ = value;
      exprInstanceCase_ = value == null ? ExprInstanceOneofCase.None : ExprInstanceOneofCase.EListBody;
    }
  }

  /// <summary>Field number for the "e_tuple_body" field.</summary>
  public const int ETupleBodyFieldNumber = 21;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ETuple ETupleBody {
    get { return exprInstanceCase_ == ExprInstanceOneofCase.ETupleBody ? (global::ETuple) exprInstance_ : null; }
    set {
      exprInstance_ = value;
      exprInstanceCase_ = value == null ? ExprInstanceOneofCase.None : ExprInstanceOneofCase.ETupleBody;
    }
  }

  /// <summary>Field number for the "e_set_body" field.</summary>
  public const int ESetBodyFieldNumber = 22;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ESet ESetBody {
    get { return exprInstanceCase_ == ExprInstanceOneofCase.ESetBody ? (global::ESet) exprInstance_ : null; }
    set {
      exprInstance_ = value;
      exprInstanceCase_ = value == null ? ExprInstanceOneofCase.None : ExprInstanceOneofCase.ESetBody;
    }
  }

  /// <summary>Field number for the "e_map_body" field.</summary>
  public const int EMapBodyFieldNumber = 23;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::EMap EMapBody {
    get { return exprInstanceCase_ == ExprInstanceOneofCase.EMapBody ? (global::EMap) exprInstance_ : null; }
    set {
      exprInstance_ = value;
      exprInstanceCase_ = value == null ? ExprInstanceOneofCase.None : ExprInstanceOneofCase.EMapBody;
    }
  }

  /// <summary>Field number for the "e_method_body" field.</summary>
  public const int EMethodBodyFieldNumber = 24;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::EMethod EMethodBody {
    get { return exprInstanceCase_ == ExprInstanceOneofCase.EMethodBody ? (global::EMethod) exprInstance_ : null; }
    set {
      exprInstance_ = value;
      exprInstanceCase_ = value == null ? ExprInstanceOneofCase.None : ExprInstanceOneofCase.EMethodBody;
    }
  }

  /// <summary>Field number for the "e_matches_body" field.</summary>
  public const int EMatchesBodyFieldNumber = 27;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::EMatches EMatchesBody {
    get { return exprInstanceCase_ == ExprInstanceOneofCase.EMatchesBody ? (global::EMatches) exprInstance_ : null; }
    set {
      exprInstance_ = value;
      exprInstanceCase_ = value == null ? ExprInstanceOneofCase.None : ExprInstanceOneofCase.EMatchesBody;
    }
  }

  /// <summary>Field number for the "e_percent_percent_body" field.</summary>
  public const int EPercentPercentBodyFieldNumber = 28;
  /// <summary>
  /// string interpolation
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::EPercentPercent EPercentPercentBody {
    get { return exprInstanceCase_ == ExprInstanceOneofCase.EPercentPercentBody ? (global::EPercentPercent) exprInstance_ : null; }
    set {
      exprInstance_ = value;
      exprInstanceCase_ = value == null ? ExprInstanceOneofCase.None : ExprInstanceOneofCase.EPercentPercentBody;
    }
  }

  /// <summary>Field number for the "e_plus_plus_body" field.</summary>
  public const int EPlusPlusBodyFieldNumber = 29;
  /// <summary>
  /// concatenation
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::EPlusPlus EPlusPlusBody {
    get { return exprInstanceCase_ == ExprInstanceOneofCase.EPlusPlusBody ? (global::EPlusPlus) exprInstance_ : null; }
    set {
      exprInstance_ = value;
      exprInstanceCase_ = value == null ? ExprInstanceOneofCase.None : ExprInstanceOneofCase.EPlusPlusBody;
    }
  }

  /// <summary>Field number for the "e_minus_minus_body" field.</summary>
  public const int EMinusMinusBodyFieldNumber = 30;
  /// <summary>
  /// set difference
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::EMinusMinus EMinusMinusBody {
    get { return exprInstanceCase_ == ExprInstanceOneofCase.EMinusMinusBody ? (global::EMinusMinus) exprInstance_ : null; }
    set {
      exprInstance_ = value;
      exprInstanceCase_ = value == null ? ExprInstanceOneofCase.None : ExprInstanceOneofCase.EMinusMinusBody;
    }
  }

  /// <summary>Field number for the "e_mod_body" field.</summary>
  public const int EModBodyFieldNumber = 31;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::EMod EModBody {
    get { return exprInstanceCase_ == ExprInstanceOneofCase.EModBody ? (global::EMod) exprInstance_ : null; }
    set {
      exprInstance_ = value;
      exprInstanceCase_ = value == null ? ExprInstanceOneofCase.None : ExprInstanceOneofCase.EModBody;
    }
  }

  private object exprInstance_;
  /// <summary>Enum of possible cases for the "expr_instance" oneof.</summary>
  public enum ExprInstanceOneofCase {
    None = 0,
    GBool = 1,
    GInt = 2,
    GString = 3,
    GUri = 4,
    GByteArray = 25,
    ENotBody = 5,
    ENegBody = 6,
    EMultBody = 7,
    EDivBody = 8,
    EPlusBody = 9,
    EMinusBody = 10,
    ELtBody = 11,
    ELteBody = 12,
    EGtBody = 13,
    EGteBody = 14,
    EEqBody = 15,
    ENeqBody = 16,
    EAndBody = 17,
    EOrBody = 18,
    EVarBody = 19,
    EListBody = 20,
    ETupleBody = 21,
    ESetBody = 22,
    EMapBody = 23,
    EMethodBody = 24,
    EMatchesBody = 27,
    EPercentPercentBody = 28,
    EPlusPlusBody = 29,
    EMinusMinusBody = 30,
    EModBody = 31,
  }
  private ExprInstanceOneofCase exprInstanceCase_ = ExprInstanceOneofCase.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ExprInstanceOneofCase ExprInstanceCase {
    get { return exprInstanceCase_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearExprInstance() {
    exprInstanceCase_ = ExprInstanceOneofCase.None;
    exprInstance_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Expr);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Expr other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (GBool != other.GBool) return false;
    if (GInt != other.GInt) return false;
    if (GString != other.GString) return false;
    if (GUri != other.GUri) return false;
    if (GByteArray != other.GByteArray) return false;
    if (!object.Equals(ENotBody, other.ENotBody)) return false;
    if (!object.Equals(ENegBody, other.ENegBody)) return false;
    if (!object.Equals(EMultBody, other.EMultBody)) return false;
    if (!object.Equals(EDivBody, other.EDivBody)) return false;
    if (!object.Equals(EPlusBody, other.EPlusBody)) return false;
    if (!object.Equals(EMinusBody, other.EMinusBody)) return false;
    if (!object.Equals(ELtBody, other.ELtBody)) return false;
    if (!object.Equals(ELteBody, other.ELteBody)) return false;
    if (!object.Equals(EGtBody, other.EGtBody)) return false;
    if (!object.Equals(EGteBody, other.EGteBody)) return false;
    if (!object.Equals(EEqBody, other.EEqBody)) return false;
    if (!object.Equals(ENeqBody, other.ENeqBody)) return false;
    if (!object.Equals(EAndBody, other.EAndBody)) return false;
    if (!object.Equals(EOrBody, other.EOrBody)) return false;
    if (!object.Equals(EVarBody, other.EVarBody)) return false;
    if (!object.Equals(EListBody, other.EListBody)) return false;
    if (!object.Equals(ETupleBody, other.ETupleBody)) return false;
    if (!object.Equals(ESetBody, other.ESetBody)) return false;
    if (!object.Equals(EMapBody, other.EMapBody)) return false;
    if (!object.Equals(EMethodBody, other.EMethodBody)) return false;
    if (!object.Equals(EMatchesBody, other.EMatchesBody)) return false;
    if (!object.Equals(EPercentPercentBody, other.EPercentPercentBody)) return false;
    if (!object.Equals(EPlusPlusBody, other.EPlusPlusBody)) return false;
    if (!object.Equals(EMinusMinusBody, other.EMinusMinusBody)) return false;
    if (!object.Equals(EModBody, other.EModBody)) return false;
    if (ExprInstanceCase != other.ExprInstanceCase) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (exprInstanceCase_ == ExprInstanceOneofCase.GBool) hash ^= GBool.GetHashCode();
    if (exprInstanceCase_ == ExprInstanceOneofCase.GInt) hash ^= GInt.GetHashCode();
    if (exprInstanceCase_ == ExprInstanceOneofCase.GString) hash ^= GString.GetHashCode();
    if (exprInstanceCase_ == ExprInstanceOneofCase.GUri) hash ^= GUri.GetHashCode();
    if (exprInstanceCase_ == ExprInstanceOneofCase.GByteArray) hash ^= GByteArray.GetHashCode();
    if (exprInstanceCase_ == ExprInstanceOneofCase.ENotBody) hash ^= ENotBody.GetHashCode();
    if (exprInstanceCase_ == ExprInstanceOneofCase.ENegBody) hash ^= ENegBody.GetHashCode();
    if (exprInstanceCase_ == ExprInstanceOneofCase.EMultBody) hash ^= EMultBody.GetHashCode();
    if (exprInstanceCase_ == ExprInstanceOneofCase.EDivBody) hash ^= EDivBody.GetHashCode();
    if (exprInstanceCase_ == ExprInstanceOneofCase.EPlusBody) hash ^= EPlusBody.GetHashCode();
    if (exprInstanceCase_ == ExprInstanceOneofCase.EMinusBody) hash ^= EMinusBody.GetHashCode();
    if (exprInstanceCase_ == ExprInstanceOneofCase.ELtBody) hash ^= ELtBody.GetHashCode();
    if (exprInstanceCase_ == ExprInstanceOneofCase.ELteBody) hash ^= ELteBody.GetHashCode();
    if (exprInstanceCase_ == ExprInstanceOneofCase.EGtBody) hash ^= EGtBody.GetHashCode();
    if (exprInstanceCase_ == ExprInstanceOneofCase.EGteBody) hash ^= EGteBody.GetHashCode();
    if (exprInstanceCase_ == ExprInstanceOneofCase.EEqBody) hash ^= EEqBody.GetHashCode();
    if (exprInstanceCase_ == ExprInstanceOneofCase.ENeqBody) hash ^= ENeqBody.GetHashCode();
    if (exprInstanceCase_ == ExprInstanceOneofCase.EAndBody) hash ^= EAndBody.GetHashCode();
    if (exprInstanceCase_ == ExprInstanceOneofCase.EOrBody) hash ^= EOrBody.GetHashCode();
    if (exprInstanceCase_ == ExprInstanceOneofCase.EVarBody) hash ^= EVarBody.GetHashCode();
    if (exprInstanceCase_ == ExprInstanceOneofCase.EListBody) hash ^= EListBody.GetHashCode();
    if (exprInstanceCase_ == ExprInstanceOneofCase.ETupleBody) hash ^= ETupleBody.GetHashCode();
    if (exprInstanceCase_ == ExprInstanceOneofCase.ESetBody) hash ^= ESetBody.GetHashCode();
    if (exprInstanceCase_ == ExprInstanceOneofCase.EMapBody) hash ^= EMapBody.GetHashCode();
    if (exprInstanceCase_ == ExprInstanceOneofCase.EMethodBody) hash ^= EMethodBody.GetHashCode();
    if (exprInstanceCase_ == ExprInstanceOneofCase.EMatchesBody) hash ^= EMatchesBody.GetHashCode();
    if (exprInstanceCase_ == ExprInstanceOneofCase.EPercentPercentBody) hash ^= EPercentPercentBody.GetHashCode();
    if (exprInstanceCase_ == ExprInstanceOneofCase.EPlusPlusBody) hash ^= EPlusPlusBody.GetHashCode();
    if (exprInstanceCase_ == ExprInstanceOneofCase.EMinusMinusBody) hash ^= EMinusMinusBody.GetHashCode();
    if (exprInstanceCase_ == ExprInstanceOneofCase.EModBody) hash ^= EModBody.GetHashCode();
    hash ^= (int) exprInstanceCase_;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (exprInstanceCase_ == ExprInstanceOneofCase.GBool) {
      output.WriteRawTag(8);
      output.WriteBool(GBool);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.GInt) {
      output.WriteRawTag(16);
      output.WriteSInt64(GInt);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.GString) {
      output.WriteRawTag(26);
      output.WriteString(GString);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.GUri) {
      output.WriteRawTag(34);
      output.WriteString(GUri);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.ENotBody) {
      output.WriteRawTag(42);
      output.WriteMessage(ENotBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.ENegBody) {
      output.WriteRawTag(50);
      output.WriteMessage(ENegBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.EMultBody) {
      output.WriteRawTag(58);
      output.WriteMessage(EMultBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.EDivBody) {
      output.WriteRawTag(66);
      output.WriteMessage(EDivBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.EPlusBody) {
      output.WriteRawTag(74);
      output.WriteMessage(EPlusBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.EMinusBody) {
      output.WriteRawTag(82);
      output.WriteMessage(EMinusBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.ELtBody) {
      output.WriteRawTag(90);
      output.WriteMessage(ELtBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.ELteBody) {
      output.WriteRawTag(98);
      output.WriteMessage(ELteBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.EGtBody) {
      output.WriteRawTag(106);
      output.WriteMessage(EGtBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.EGteBody) {
      output.WriteRawTag(114);
      output.WriteMessage(EGteBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.EEqBody) {
      output.WriteRawTag(122);
      output.WriteMessage(EEqBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.ENeqBody) {
      output.WriteRawTag(130, 1);
      output.WriteMessage(ENeqBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.EAndBody) {
      output.WriteRawTag(138, 1);
      output.WriteMessage(EAndBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.EOrBody) {
      output.WriteRawTag(146, 1);
      output.WriteMessage(EOrBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.EVarBody) {
      output.WriteRawTag(154, 1);
      output.WriteMessage(EVarBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.EListBody) {
      output.WriteRawTag(162, 1);
      output.WriteMessage(EListBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.ETupleBody) {
      output.WriteRawTag(170, 1);
      output.WriteMessage(ETupleBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.ESetBody) {
      output.WriteRawTag(178, 1);
      output.WriteMessage(ESetBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.EMapBody) {
      output.WriteRawTag(186, 1);
      output.WriteMessage(EMapBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.EMethodBody) {
      output.WriteRawTag(194, 1);
      output.WriteMessage(EMethodBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.GByteArray) {
      output.WriteRawTag(202, 1);
      output.WriteBytes(GByteArray);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.EMatchesBody) {
      output.WriteRawTag(218, 1);
      output.WriteMessage(EMatchesBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.EPercentPercentBody) {
      output.WriteRawTag(226, 1);
      output.WriteMessage(EPercentPercentBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.EPlusPlusBody) {
      output.WriteRawTag(234, 1);
      output.WriteMessage(EPlusPlusBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.EMinusMinusBody) {
      output.WriteRawTag(242, 1);
      output.WriteMessage(EMinusMinusBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.EModBody) {
      output.WriteRawTag(250, 1);
      output.WriteMessage(EModBody);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (exprInstanceCase_ == ExprInstanceOneofCase.GBool) {
      output.WriteRawTag(8);
      output.WriteBool(GBool);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.GInt) {
      output.WriteRawTag(16);
      output.WriteSInt64(GInt);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.GString) {
      output.WriteRawTag(26);
      output.WriteString(GString);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.GUri) {
      output.WriteRawTag(34);
      output.WriteString(GUri);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.ENotBody) {
      output.WriteRawTag(42);
      output.WriteMessage(ENotBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.ENegBody) {
      output.WriteRawTag(50);
      output.WriteMessage(ENegBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.EMultBody) {
      output.WriteRawTag(58);
      output.WriteMessage(EMultBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.EDivBody) {
      output.WriteRawTag(66);
      output.WriteMessage(EDivBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.EPlusBody) {
      output.WriteRawTag(74);
      output.WriteMessage(EPlusBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.EMinusBody) {
      output.WriteRawTag(82);
      output.WriteMessage(EMinusBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.ELtBody) {
      output.WriteRawTag(90);
      output.WriteMessage(ELtBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.ELteBody) {
      output.WriteRawTag(98);
      output.WriteMessage(ELteBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.EGtBody) {
      output.WriteRawTag(106);
      output.WriteMessage(EGtBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.EGteBody) {
      output.WriteRawTag(114);
      output.WriteMessage(EGteBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.EEqBody) {
      output.WriteRawTag(122);
      output.WriteMessage(EEqBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.ENeqBody) {
      output.WriteRawTag(130, 1);
      output.WriteMessage(ENeqBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.EAndBody) {
      output.WriteRawTag(138, 1);
      output.WriteMessage(EAndBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.EOrBody) {
      output.WriteRawTag(146, 1);
      output.WriteMessage(EOrBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.EVarBody) {
      output.WriteRawTag(154, 1);
      output.WriteMessage(EVarBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.EListBody) {
      output.WriteRawTag(162, 1);
      output.WriteMessage(EListBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.ETupleBody) {
      output.WriteRawTag(170, 1);
      output.WriteMessage(ETupleBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.ESetBody) {
      output.WriteRawTag(178, 1);
      output.WriteMessage(ESetBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.EMapBody) {
      output.WriteRawTag(186, 1);
      output.WriteMessage(EMapBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.EMethodBody) {
      output.WriteRawTag(194, 1);
      output.WriteMessage(EMethodBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.GByteArray) {
      output.WriteRawTag(202, 1);
      output.WriteBytes(GByteArray);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.EMatchesBody) {
      output.WriteRawTag(218, 1);
      output.WriteMessage(EMatchesBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.EPercentPercentBody) {
      output.WriteRawTag(226, 1);
      output.WriteMessage(EPercentPercentBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.EPlusPlusBody) {
      output.WriteRawTag(234, 1);
      output.WriteMessage(EPlusPlusBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.EMinusMinusBody) {
      output.WriteRawTag(242, 1);
      output.WriteMessage(EMinusMinusBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.EModBody) {
      output.WriteRawTag(250, 1);
      output.WriteMessage(EModBody);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (exprInstanceCase_ == ExprInstanceOneofCase.GBool) {
      size += 1 + 1;
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.GInt) {
      size += 1 + pb::CodedOutputStream.ComputeSInt64Size(GInt);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.GString) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(GString);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.GUri) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(GUri);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.GByteArray) {
      size += 2 + pb::CodedOutputStream.ComputeBytesSize(GByteArray);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.ENotBody) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ENotBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.ENegBody) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ENegBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.EMultBody) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(EMultBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.EDivBody) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(EDivBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.EPlusBody) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(EPlusBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.EMinusBody) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(EMinusBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.ELtBody) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ELtBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.ELteBody) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ELteBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.EGtBody) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(EGtBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.EGteBody) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(EGteBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.EEqBody) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(EEqBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.ENeqBody) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(ENeqBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.EAndBody) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(EAndBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.EOrBody) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(EOrBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.EVarBody) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(EVarBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.EListBody) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(EListBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.ETupleBody) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(ETupleBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.ESetBody) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(ESetBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.EMapBody) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(EMapBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.EMethodBody) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(EMethodBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.EMatchesBody) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(EMatchesBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.EPercentPercentBody) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(EPercentPercentBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.EPlusPlusBody) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(EPlusPlusBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.EMinusMinusBody) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(EMinusMinusBody);
    }
    if (exprInstanceCase_ == ExprInstanceOneofCase.EModBody) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(EModBody);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Expr other) {
    if (other == null) {
      return;
    }
    switch (other.ExprInstanceCase) {
      case ExprInstanceOneofCase.GBool:
        GBool = other.GBool;
        break;
      case ExprInstanceOneofCase.GInt:
        GInt = other.GInt;
        break;
      case ExprInstanceOneofCase.GString:
        GString = other.GString;
        break;
      case ExprInstanceOneofCase.GUri:
        GUri = other.GUri;
        break;
      case ExprInstanceOneofCase.GByteArray:
        GByteArray = other.GByteArray;
        break;
      case ExprInstanceOneofCase.ENotBody:
        if (ENotBody == null) {
          ENotBody = new global::ENot();
        }
        ENotBody.MergeFrom(other.ENotBody);
        break;
      case ExprInstanceOneofCase.ENegBody:
        if (ENegBody == null) {
          ENegBody = new global::ENeg();
        }
        ENegBody.MergeFrom(other.ENegBody);
        break;
      case ExprInstanceOneofCase.EMultBody:
        if (EMultBody == null) {
          EMultBody = new global::EMult();
        }
        EMultBody.MergeFrom(other.EMultBody);
        break;
      case ExprInstanceOneofCase.EDivBody:
        if (EDivBody == null) {
          EDivBody = new global::EDiv();
        }
        EDivBody.MergeFrom(other.EDivBody);
        break;
      case ExprInstanceOneofCase.EPlusBody:
        if (EPlusBody == null) {
          EPlusBody = new global::EPlus();
        }
        EPlusBody.MergeFrom(other.EPlusBody);
        break;
      case ExprInstanceOneofCase.EMinusBody:
        if (EMinusBody == null) {
          EMinusBody = new global::EMinus();
        }
        EMinusBody.MergeFrom(other.EMinusBody);
        break;
      case ExprInstanceOneofCase.ELtBody:
        if (ELtBody == null) {
          ELtBody = new global::ELt();
        }
        ELtBody.MergeFrom(other.ELtBody);
        break;
      case ExprInstanceOneofCase.ELteBody:
        if (ELteBody == null) {
          ELteBody = new global::ELte();
        }
        ELteBody.MergeFrom(other.ELteBody);
        break;
      case ExprInstanceOneofCase.EGtBody:
        if (EGtBody == null) {
          EGtBody = new global::EGt();
        }
        EGtBody.MergeFrom(other.EGtBody);
        break;
      case ExprInstanceOneofCase.EGteBody:
        if (EGteBody == null) {
          EGteBody = new global::EGte();
        }
        EGteBody.MergeFrom(other.EGteBody);
        break;
      case ExprInstanceOneofCase.EEqBody:
        if (EEqBody == null) {
          EEqBody = new global::EEq();
        }
        EEqBody.MergeFrom(other.EEqBody);
        break;
      case ExprInstanceOneofCase.ENeqBody:
        if (ENeqBody == null) {
          ENeqBody = new global::ENeq();
        }
        ENeqBody.MergeFrom(other.ENeqBody);
        break;
      case ExprInstanceOneofCase.EAndBody:
        if (EAndBody == null) {
          EAndBody = new global::EAnd();
        }
        EAndBody.MergeFrom(other.EAndBody);
        break;
      case ExprInstanceOneofCase.EOrBody:
        if (EOrBody == null) {
          EOrBody = new global::EOr();
        }
        EOrBody.MergeFrom(other.EOrBody);
        break;
      case ExprInstanceOneofCase.EVarBody:
        if (EVarBody == null) {
          EVarBody = new global::EVar();
        }
        EVarBody.MergeFrom(other.EVarBody);
        break;
      case ExprInstanceOneofCase.EListBody:
        if (EListBody == null) {
          EListBody = new global::EList();
        }
        EListBody.MergeFrom(other.EListBody);
        break;
      case ExprInstanceOneofCase.ETupleBody:
        if (ETupleBody == null) {
          ETupleBody = new global::ETuple();
        }
        ETupleBody.MergeFrom(other.ETupleBody);
        break;
      case ExprInstanceOneofCase.ESetBody:
        if (ESetBody == null) {
          ESetBody = new global::ESet();
        }
        ESetBody.MergeFrom(other.ESetBody);
        break;
      case ExprInstanceOneofCase.EMapBody:
        if (EMapBody == null) {
          EMapBody = new global::EMap();
        }
        EMapBody.MergeFrom(other.EMapBody);
        break;
      case ExprInstanceOneofCase.EMethodBody:
        if (EMethodBody == null) {
          EMethodBody = new global::EMethod();
        }
        EMethodBody.MergeFrom(other.EMethodBody);
        break;
      case ExprInstanceOneofCase.EMatchesBody:
        if (EMatchesBody == null) {
          EMatchesBody = new global::EMatches();
        }
        EMatchesBody.MergeFrom(other.EMatchesBody);
        break;
      case ExprInstanceOneofCase.EPercentPercentBody:
        if (EPercentPercentBody == null) {
          EPercentPercentBody = new global::EPercentPercent();
        }
        EPercentPercentBody.MergeFrom(other.EPercentPercentBody);
        break;
      case ExprInstanceOneofCase.EPlusPlusBody:
        if (EPlusPlusBody == null) {
          EPlusPlusBody = new global::EPlusPlus();
        }
        EPlusPlusBody.MergeFrom(other.EPlusPlusBody);
        break;
      case ExprInstanceOneofCase.EMinusMinusBody:
        if (EMinusMinusBody == null) {
          EMinusMinusBody = new global::EMinusMinus();
        }
        EMinusMinusBody.MergeFrom(other.EMinusMinusBody);
        break;
      case ExprInstanceOneofCase.EModBody:
        if (EModBody == null) {
          EModBody = new global::EMod();
        }
        EModBody.MergeFrom(other.EModBody);
        break;
    }

    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          GBool = input.ReadBool();
          break;
        }
        case 16: {
          GInt = input.ReadSInt64();
          break;
        }
        case 26: {
          GString = input.ReadString();
          break;
        }
        case 34: {
          GUri = input.ReadString();
          break;
        }
        case 42: {
          global::ENot subBuilder = new global::ENot();
          if (exprInstanceCase_ == ExprInstanceOneofCase.ENotBody) {
            subBuilder.MergeFrom(ENotBody);
          }
          input.ReadMessage(subBuilder);
          ENotBody = subBuilder;
          break;
        }
        case 50: {
          global::ENeg subBuilder = new global::ENeg();
          if (exprInstanceCase_ == ExprInstanceOneofCase.ENegBody) {
            subBuilder.MergeFrom(ENegBody);
          }
          input.ReadMessage(subBuilder);
          ENegBody = subBuilder;
          break;
        }
        case 58: {
          global::EMult subBuilder = new global::EMult();
          if (exprInstanceCase_ == ExprInstanceOneofCase.EMultBody) {
            subBuilder.MergeFrom(EMultBody);
          }
          input.ReadMessage(subBuilder);
          EMultBody = subBuilder;
          break;
        }
        case 66: {
          global::EDiv subBuilder = new global::EDiv();
          if (exprInstanceCase_ == ExprInstanceOneofCase.EDivBody) {
            subBuilder.MergeFrom(EDivBody);
          }
          input.ReadMessage(subBuilder);
          EDivBody = subBuilder;
          break;
        }
        case 74: {
          global::EPlus subBuilder = new global::EPlus();
          if (exprInstanceCase_ == ExprInstanceOneofCase.EPlusBody) {
            subBuilder.MergeFrom(EPlusBody);
          }
          input.ReadMessage(subBuilder);
          EPlusBody = subBuilder;
          break;
        }
        case 82: {
          global::EMinus subBuilder = new global::EMinus();
          if (exprInstanceCase_ == ExprInstanceOneofCase.EMinusBody) {
            subBuilder.MergeFrom(EMinusBody);
          }
          input.ReadMessage(subBuilder);
          EMinusBody = subBuilder;
          break;
        }
        case 90: {
          global::ELt subBuilder = new global::ELt();
          if (exprInstanceCase_ == ExprInstanceOneofCase.ELtBody) {
            subBuilder.MergeFrom(ELtBody);
          }
          input.ReadMessage(subBuilder);
          ELtBody = subBuilder;
          break;
        }
        case 98: {
          global::ELte subBuilder = new global::ELte();
          if (exprInstanceCase_ == ExprInstanceOneofCase.ELteBody) {
            subBuilder.MergeFrom(ELteBody);
          }
          input.ReadMessage(subBuilder);
          ELteBody = subBuilder;
          break;
        }
        case 106: {
          global::EGt subBuilder = new global::EGt();
          if (exprInstanceCase_ == ExprInstanceOneofCase.EGtBody) {
            subBuilder.MergeFrom(EGtBody);
          }
          input.ReadMessage(subBuilder);
          EGtBody = subBuilder;
          break;
        }
        case 114: {
          global::EGte subBuilder = new global::EGte();
          if (exprInstanceCase_ == ExprInstanceOneofCase.EGteBody) {
            subBuilder.MergeFrom(EGteBody);
          }
          input.ReadMessage(subBuilder);
          EGteBody = subBuilder;
          break;
        }
        case 122: {
          global::EEq subBuilder = new global::EEq();
          if (exprInstanceCase_ == ExprInstanceOneofCase.EEqBody) {
            subBuilder.MergeFrom(EEqBody);
          }
          input.ReadMessage(subBuilder);
          EEqBody = subBuilder;
          break;
        }
        case 130: {
          global::ENeq subBuilder = new global::ENeq();
          if (exprInstanceCase_ == ExprInstanceOneofCase.ENeqBody) {
            subBuilder.MergeFrom(ENeqBody);
          }
          input.ReadMessage(subBuilder);
          ENeqBody = subBuilder;
          break;
        }
        case 138: {
          global::EAnd subBuilder = new global::EAnd();
          if (exprInstanceCase_ == ExprInstanceOneofCase.EAndBody) {
            subBuilder.MergeFrom(EAndBody);
          }
          input.ReadMessage(subBuilder);
          EAndBody = subBuilder;
          break;
        }
        case 146: {
          global::EOr subBuilder = new global::EOr();
          if (exprInstanceCase_ == ExprInstanceOneofCase.EOrBody) {
            subBuilder.MergeFrom(EOrBody);
          }
          input.ReadMessage(subBuilder);
          EOrBody = subBuilder;
          break;
        }
        case 154: {
          global::EVar subBuilder = new global::EVar();
          if (exprInstanceCase_ == ExprInstanceOneofCase.EVarBody) {
            subBuilder.MergeFrom(EVarBody);
          }
          input.ReadMessage(subBuilder);
          EVarBody = subBuilder;
          break;
        }
        case 162: {
          global::EList subBuilder = new global::EList();
          if (exprInstanceCase_ == ExprInstanceOneofCase.EListBody) {
            subBuilder.MergeFrom(EListBody);
          }
          input.ReadMessage(subBuilder);
          EListBody = subBuilder;
          break;
        }
        case 170: {
          global::ETuple subBuilder = new global::ETuple();
          if (exprInstanceCase_ == ExprInstanceOneofCase.ETupleBody) {
            subBuilder.MergeFrom(ETupleBody);
          }
          input.ReadMessage(subBuilder);
          ETupleBody = subBuilder;
          break;
        }
        case 178: {
          global::ESet subBuilder = new global::ESet();
          if (exprInstanceCase_ == ExprInstanceOneofCase.ESetBody) {
            subBuilder.MergeFrom(ESetBody);
          }
          input.ReadMessage(subBuilder);
          ESetBody = subBuilder;
          break;
        }
        case 186: {
          global::EMap subBuilder = new global::EMap();
          if (exprInstanceCase_ == ExprInstanceOneofCase.EMapBody) {
            subBuilder.MergeFrom(EMapBody);
          }
          input.ReadMessage(subBuilder);
          EMapBody = subBuilder;
          break;
        }
        case 194: {
          global::EMethod subBuilder = new global::EMethod();
          if (exprInstanceCase_ == ExprInstanceOneofCase.EMethodBody) {
            subBuilder.MergeFrom(EMethodBody);
          }
          input.ReadMessage(subBuilder);
          EMethodBody = subBuilder;
          break;
        }
        case 202: {
          GByteArray = input.ReadBytes();
          break;
        }
        case 218: {
          global::EMatches subBuilder = new global::EMatches();
          if (exprInstanceCase_ == ExprInstanceOneofCase.EMatchesBody) {
            subBuilder.MergeFrom(EMatchesBody);
          }
          input.ReadMessage(subBuilder);
          EMatchesBody = subBuilder;
          break;
        }
        case 226: {
          global::EPercentPercent subBuilder = new global::EPercentPercent();
          if (exprInstanceCase_ == ExprInstanceOneofCase.EPercentPercentBody) {
            subBuilder.MergeFrom(EPercentPercentBody);
          }
          input.ReadMessage(subBuilder);
          EPercentPercentBody = subBuilder;
          break;
        }
        case 234: {
          global::EPlusPlus subBuilder = new global::EPlusPlus();
          if (exprInstanceCase_ == ExprInstanceOneofCase.EPlusPlusBody) {
            subBuilder.MergeFrom(EPlusPlusBody);
          }
          input.ReadMessage(subBuilder);
          EPlusPlusBody = subBuilder;
          break;
        }
        case 242: {
          global::EMinusMinus subBuilder = new global::EMinusMinus();
          if (exprInstanceCase_ == ExprInstanceOneofCase.EMinusMinusBody) {
            subBuilder.MergeFrom(EMinusMinusBody);
          }
          input.ReadMessage(subBuilder);
          EMinusMinusBody = subBuilder;
          break;
        }
        case 250: {
          global::EMod subBuilder = new global::EMod();
          if (exprInstanceCase_ == ExprInstanceOneofCase.EModBody) {
            subBuilder.MergeFrom(EModBody);
          }
          input.ReadMessage(subBuilder);
          EModBody = subBuilder;
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          GBool = input.ReadBool();
          break;
        }
        case 16: {
          GInt = input.ReadSInt64();
          break;
        }
        case 26: {
          GString = input.ReadString();
          break;
        }
        case 34: {
          GUri = input.ReadString();
          break;
        }
        case 42: {
          global::ENot subBuilder = new global::ENot();
          if (exprInstanceCase_ == ExprInstanceOneofCase.ENotBody) {
            subBuilder.MergeFrom(ENotBody);
          }
          input.ReadMessage(subBuilder);
          ENotBody = subBuilder;
          break;
        }
        case 50: {
          global::ENeg subBuilder = new global::ENeg();
          if (exprInstanceCase_ == ExprInstanceOneofCase.ENegBody) {
            subBuilder.MergeFrom(ENegBody);
          }
          input.ReadMessage(subBuilder);
          ENegBody = subBuilder;
          break;
        }
        case 58: {
          global::EMult subBuilder = new global::EMult();
          if (exprInstanceCase_ == ExprInstanceOneofCase.EMultBody) {
            subBuilder.MergeFrom(EMultBody);
          }
          input.ReadMessage(subBuilder);
          EMultBody = subBuilder;
          break;
        }
        case 66: {
          global::EDiv subBuilder = new global::EDiv();
          if (exprInstanceCase_ == ExprInstanceOneofCase.EDivBody) {
            subBuilder.MergeFrom(EDivBody);
          }
          input.ReadMessage(subBuilder);
          EDivBody = subBuilder;
          break;
        }
        case 74: {
          global::EPlus subBuilder = new global::EPlus();
          if (exprInstanceCase_ == ExprInstanceOneofCase.EPlusBody) {
            subBuilder.MergeFrom(EPlusBody);
          }
          input.ReadMessage(subBuilder);
          EPlusBody = subBuilder;
          break;
        }
        case 82: {
          global::EMinus subBuilder = new global::EMinus();
          if (exprInstanceCase_ == ExprInstanceOneofCase.EMinusBody) {
            subBuilder.MergeFrom(EMinusBody);
          }
          input.ReadMessage(subBuilder);
          EMinusBody = subBuilder;
          break;
        }
        case 90: {
          global::ELt subBuilder = new global::ELt();
          if (exprInstanceCase_ == ExprInstanceOneofCase.ELtBody) {
            subBuilder.MergeFrom(ELtBody);
          }
          input.ReadMessage(subBuilder);
          ELtBody = subBuilder;
          break;
        }
        case 98: {
          global::ELte subBuilder = new global::ELte();
          if (exprInstanceCase_ == ExprInstanceOneofCase.ELteBody) {
            subBuilder.MergeFrom(ELteBody);
          }
          input.ReadMessage(subBuilder);
          ELteBody = subBuilder;
          break;
        }
        case 106: {
          global::EGt subBuilder = new global::EGt();
          if (exprInstanceCase_ == ExprInstanceOneofCase.EGtBody) {
            subBuilder.MergeFrom(EGtBody);
          }
          input.ReadMessage(subBuilder);
          EGtBody = subBuilder;
          break;
        }
        case 114: {
          global::EGte subBuilder = new global::EGte();
          if (exprInstanceCase_ == ExprInstanceOneofCase.EGteBody) {
            subBuilder.MergeFrom(EGteBody);
          }
          input.ReadMessage(subBuilder);
          EGteBody = subBuilder;
          break;
        }
        case 122: {
          global::EEq subBuilder = new global::EEq();
          if (exprInstanceCase_ == ExprInstanceOneofCase.EEqBody) {
            subBuilder.MergeFrom(EEqBody);
          }
          input.ReadMessage(subBuilder);
          EEqBody = subBuilder;
          break;
        }
        case 130: {
          global::ENeq subBuilder = new global::ENeq();
          if (exprInstanceCase_ == ExprInstanceOneofCase.ENeqBody) {
            subBuilder.MergeFrom(ENeqBody);
          }
          input.ReadMessage(subBuilder);
          ENeqBody = subBuilder;
          break;
        }
        case 138: {
          global::EAnd subBuilder = new global::EAnd();
          if (exprInstanceCase_ == ExprInstanceOneofCase.EAndBody) {
            subBuilder.MergeFrom(EAndBody);
          }
          input.ReadMessage(subBuilder);
          EAndBody = subBuilder;
          break;
        }
        case 146: {
          global::EOr subBuilder = new global::EOr();
          if (exprInstanceCase_ == ExprInstanceOneofCase.EOrBody) {
            subBuilder.MergeFrom(EOrBody);
          }
          input.ReadMessage(subBuilder);
          EOrBody = subBuilder;
          break;
        }
        case 154: {
          global::EVar subBuilder = new global::EVar();
          if (exprInstanceCase_ == ExprInstanceOneofCase.EVarBody) {
            subBuilder.MergeFrom(EVarBody);
          }
          input.ReadMessage(subBuilder);
          EVarBody = subBuilder;
          break;
        }
        case 162: {
          global::EList subBuilder = new global::EList();
          if (exprInstanceCase_ == ExprInstanceOneofCase.EListBody) {
            subBuilder.MergeFrom(EListBody);
          }
          input.ReadMessage(subBuilder);
          EListBody = subBuilder;
          break;
        }
        case 170: {
          global::ETuple subBuilder = new global::ETuple();
          if (exprInstanceCase_ == ExprInstanceOneofCase.ETupleBody) {
            subBuilder.MergeFrom(ETupleBody);
          }
          input.ReadMessage(subBuilder);
          ETupleBody = subBuilder;
          break;
        }
        case 178: {
          global::ESet subBuilder = new global::ESet();
          if (exprInstanceCase_ == ExprInstanceOneofCase.ESetBody) {
            subBuilder.MergeFrom(ESetBody);
          }
          input.ReadMessage(subBuilder);
          ESetBody = subBuilder;
          break;
        }
        case 186: {
          global::EMap subBuilder = new global::EMap();
          if (exprInstanceCase_ == ExprInstanceOneofCase.EMapBody) {
            subBuilder.MergeFrom(EMapBody);
          }
          input.ReadMessage(subBuilder);
          EMapBody = subBuilder;
          break;
        }
        case 194: {
          global::EMethod subBuilder = new global::EMethod();
          if (exprInstanceCase_ == ExprInstanceOneofCase.EMethodBody) {
            subBuilder.MergeFrom(EMethodBody);
          }
          input.ReadMessage(subBuilder);
          EMethodBody = subBuilder;
          break;
        }
        case 202: {
          GByteArray = input.ReadBytes();
          break;
        }
        case 218: {
          global::EMatches subBuilder = new global::EMatches();
          if (exprInstanceCase_ == ExprInstanceOneofCase.EMatchesBody) {
            subBuilder.MergeFrom(EMatchesBody);
          }
          input.ReadMessage(subBuilder);
          EMatchesBody = subBuilder;
          break;
        }
        case 226: {
          global::EPercentPercent subBuilder = new global::EPercentPercent();
          if (exprInstanceCase_ == ExprInstanceOneofCase.EPercentPercentBody) {
            subBuilder.MergeFrom(EPercentPercentBody);
          }
          input.ReadMessage(subBuilder);
          EPercentPercentBody = subBuilder;
          break;
        }
        case 234: {
          global::EPlusPlus subBuilder = new global::EPlusPlus();
          if (exprInstanceCase_ == ExprInstanceOneofCase.EPlusPlusBody) {
            subBuilder.MergeFrom(EPlusPlusBody);
          }
          input.ReadMessage(subBuilder);
          EPlusPlusBody = subBuilder;
          break;
        }
        case 242: {
          global::EMinusMinus subBuilder = new global::EMinusMinus();
          if (exprInstanceCase_ == ExprInstanceOneofCase.EMinusMinusBody) {
            subBuilder.MergeFrom(EMinusMinusBody);
          }
          input.ReadMessage(subBuilder);
          EMinusMinusBody = subBuilder;
          break;
        }
        case 250: {
          global::EMod subBuilder = new global::EMod();
          if (exprInstanceCase_ == ExprInstanceOneofCase.EModBody) {
            subBuilder.MergeFrom(EModBody);
          }
          input.ReadMessage(subBuilder);
          EModBody = subBuilder;
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class EList : pb::IMessage<EList>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<EList> _parser = new pb::MessageParser<EList>(() => new EList());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<EList> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RhoTypesReflection.Descriptor.MessageTypes[16]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EList() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EList(EList other) : this() {
    ps_ = other.ps_.Clone();
    locallyFree_ = other.locallyFree_;
    connectiveUsed_ = other.connectiveUsed_;
    remainder_ = other.remainder_ != null ? other.remainder_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EList Clone() {
    return new EList(this);
  }

  /// <summary>Field number for the "ps" field.</summary>
  public const int PsFieldNumber = 1;
  private static readonly pb::FieldCodec<global::Par> _repeated_ps_codec
      = pb::FieldCodec.ForMessage(10, global::Par.Parser);
  private readonly pbc::RepeatedField<global::Par> ps_ = new pbc::RepeatedField<global::Par>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Par> Ps {
    get { return ps_; }
  }

  /// <summary>Field number for the "locallyFree" field.</summary>
  public const int LocallyFreeFieldNumber = 3;
  private pb::ByteString locallyFree_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString LocallyFree {
    get { return locallyFree_; }
    set {
      locallyFree_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "connective_used" field.</summary>
  public const int ConnectiveUsedFieldNumber = 4;
  private bool connectiveUsed_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool ConnectiveUsed {
    get { return connectiveUsed_; }
    set {
      connectiveUsed_ = value;
    }
  }

  /// <summary>Field number for the "remainder" field.</summary>
  public const int RemainderFieldNumber = 5;
  private global::Var remainder_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Var Remainder {
    get { return remainder_; }
    set {
      remainder_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as EList);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(EList other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!ps_.Equals(other.ps_)) return false;
    if (LocallyFree != other.LocallyFree) return false;
    if (ConnectiveUsed != other.ConnectiveUsed) return false;
    if (!object.Equals(Remainder, other.Remainder)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= ps_.GetHashCode();
    if (LocallyFree.Length != 0) hash ^= LocallyFree.GetHashCode();
    if (ConnectiveUsed != false) hash ^= ConnectiveUsed.GetHashCode();
    if (remainder_ != null) hash ^= Remainder.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    ps_.WriteTo(output, _repeated_ps_codec);
    if (LocallyFree.Length != 0) {
      output.WriteRawTag(26);
      output.WriteBytes(LocallyFree);
    }
    if (ConnectiveUsed != false) {
      output.WriteRawTag(32);
      output.WriteBool(ConnectiveUsed);
    }
    if (remainder_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(Remainder);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    ps_.WriteTo(ref output, _repeated_ps_codec);
    if (LocallyFree.Length != 0) {
      output.WriteRawTag(26);
      output.WriteBytes(LocallyFree);
    }
    if (ConnectiveUsed != false) {
      output.WriteRawTag(32);
      output.WriteBool(ConnectiveUsed);
    }
    if (remainder_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(Remainder);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += ps_.CalculateSize(_repeated_ps_codec);
    if (LocallyFree.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(LocallyFree);
    }
    if (ConnectiveUsed != false) {
      size += 1 + 1;
    }
    if (remainder_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Remainder);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(EList other) {
    if (other == null) {
      return;
    }
    ps_.Add(other.ps_);
    if (other.LocallyFree.Length != 0) {
      LocallyFree = other.LocallyFree;
    }
    if (other.ConnectiveUsed != false) {
      ConnectiveUsed = other.ConnectiveUsed;
    }
    if (other.remainder_ != null) {
      if (remainder_ == null) {
        Remainder = new global::Var();
      }
      Remainder.MergeFrom(other.Remainder);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          ps_.AddEntriesFrom(input, _repeated_ps_codec);
          break;
        }
        case 26: {
          LocallyFree = input.ReadBytes();
          break;
        }
        case 32: {
          ConnectiveUsed = input.ReadBool();
          break;
        }
        case 42: {
          if (remainder_ == null) {
            Remainder = new global::Var();
          }
          input.ReadMessage(Remainder);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          ps_.AddEntriesFrom(ref input, _repeated_ps_codec);
          break;
        }
        case 26: {
          LocallyFree = input.ReadBytes();
          break;
        }
        case 32: {
          ConnectiveUsed = input.ReadBool();
          break;
        }
        case 42: {
          if (remainder_ == null) {
            Remainder = new global::Var();
          }
          input.ReadMessage(Remainder);
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class ETuple : pb::IMessage<ETuple>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ETuple> _parser = new pb::MessageParser<ETuple>(() => new ETuple());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ETuple> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RhoTypesReflection.Descriptor.MessageTypes[17]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ETuple() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ETuple(ETuple other) : this() {
    ps_ = other.ps_.Clone();
    locallyFree_ = other.locallyFree_;
    connectiveUsed_ = other.connectiveUsed_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ETuple Clone() {
    return new ETuple(this);
  }

  /// <summary>Field number for the "ps" field.</summary>
  public const int PsFieldNumber = 1;
  private static readonly pb::FieldCodec<global::Par> _repeated_ps_codec
      = pb::FieldCodec.ForMessage(10, global::Par.Parser);
  private readonly pbc::RepeatedField<global::Par> ps_ = new pbc::RepeatedField<global::Par>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Par> Ps {
    get { return ps_; }
  }

  /// <summary>Field number for the "locallyFree" field.</summary>
  public const int LocallyFreeFieldNumber = 3;
  private pb::ByteString locallyFree_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString LocallyFree {
    get { return locallyFree_; }
    set {
      locallyFree_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "connective_used" field.</summary>
  public const int ConnectiveUsedFieldNumber = 4;
  private bool connectiveUsed_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool ConnectiveUsed {
    get { return connectiveUsed_; }
    set {
      connectiveUsed_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ETuple);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ETuple other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!ps_.Equals(other.ps_)) return false;
    if (LocallyFree != other.LocallyFree) return false;
    if (ConnectiveUsed != other.ConnectiveUsed) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= ps_.GetHashCode();
    if (LocallyFree.Length != 0) hash ^= LocallyFree.GetHashCode();
    if (ConnectiveUsed != false) hash ^= ConnectiveUsed.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    ps_.WriteTo(output, _repeated_ps_codec);
    if (LocallyFree.Length != 0) {
      output.WriteRawTag(26);
      output.WriteBytes(LocallyFree);
    }
    if (ConnectiveUsed != false) {
      output.WriteRawTag(32);
      output.WriteBool(ConnectiveUsed);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    ps_.WriteTo(ref output, _repeated_ps_codec);
    if (LocallyFree.Length != 0) {
      output.WriteRawTag(26);
      output.WriteBytes(LocallyFree);
    }
    if (ConnectiveUsed != false) {
      output.WriteRawTag(32);
      output.WriteBool(ConnectiveUsed);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += ps_.CalculateSize(_repeated_ps_codec);
    if (LocallyFree.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(LocallyFree);
    }
    if (ConnectiveUsed != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ETuple other) {
    if (other == null) {
      return;
    }
    ps_.Add(other.ps_);
    if (other.LocallyFree.Length != 0) {
      LocallyFree = other.LocallyFree;
    }
    if (other.ConnectiveUsed != false) {
      ConnectiveUsed = other.ConnectiveUsed;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          ps_.AddEntriesFrom(input, _repeated_ps_codec);
          break;
        }
        case 26: {
          LocallyFree = input.ReadBytes();
          break;
        }
        case 32: {
          ConnectiveUsed = input.ReadBool();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          ps_.AddEntriesFrom(ref input, _repeated_ps_codec);
          break;
        }
        case 26: {
          LocallyFree = input.ReadBytes();
          break;
        }
        case 32: {
          ConnectiveUsed = input.ReadBool();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class ESet : pb::IMessage<ESet>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ESet> _parser = new pb::MessageParser<ESet>(() => new ESet());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ESet> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RhoTypesReflection.Descriptor.MessageTypes[18]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ESet() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ESet(ESet other) : this() {
    ps_ = other.ps_.Clone();
    locallyFree_ = other.locallyFree_;
    connectiveUsed_ = other.connectiveUsed_;
    remainder_ = other.remainder_ != null ? other.remainder_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ESet Clone() {
    return new ESet(this);
  }

  /// <summary>Field number for the "ps" field.</summary>
  public const int PsFieldNumber = 1;
  private static readonly pb::FieldCodec<global::Par> _repeated_ps_codec
      = pb::FieldCodec.ForMessage(10, global::Par.Parser);
  private readonly pbc::RepeatedField<global::Par> ps_ = new pbc::RepeatedField<global::Par>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Par> Ps {
    get { return ps_; }
  }

  /// <summary>Field number for the "locallyFree" field.</summary>
  public const int LocallyFreeFieldNumber = 3;
  private pb::ByteString locallyFree_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString LocallyFree {
    get { return locallyFree_; }
    set {
      locallyFree_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "connective_used" field.</summary>
  public const int ConnectiveUsedFieldNumber = 4;
  private bool connectiveUsed_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool ConnectiveUsed {
    get { return connectiveUsed_; }
    set {
      connectiveUsed_ = value;
    }
  }

  /// <summary>Field number for the "remainder" field.</summary>
  public const int RemainderFieldNumber = 5;
  private global::Var remainder_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Var Remainder {
    get { return remainder_; }
    set {
      remainder_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ESet);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ESet other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!ps_.Equals(other.ps_)) return false;
    if (LocallyFree != other.LocallyFree) return false;
    if (ConnectiveUsed != other.ConnectiveUsed) return false;
    if (!object.Equals(Remainder, other.Remainder)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= ps_.GetHashCode();
    if (LocallyFree.Length != 0) hash ^= LocallyFree.GetHashCode();
    if (ConnectiveUsed != false) hash ^= ConnectiveUsed.GetHashCode();
    if (remainder_ != null) hash ^= Remainder.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    ps_.WriteTo(output, _repeated_ps_codec);
    if (LocallyFree.Length != 0) {
      output.WriteRawTag(26);
      output.WriteBytes(LocallyFree);
    }
    if (ConnectiveUsed != false) {
      output.WriteRawTag(32);
      output.WriteBool(ConnectiveUsed);
    }
    if (remainder_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(Remainder);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    ps_.WriteTo(ref output, _repeated_ps_codec);
    if (LocallyFree.Length != 0) {
      output.WriteRawTag(26);
      output.WriteBytes(LocallyFree);
    }
    if (ConnectiveUsed != false) {
      output.WriteRawTag(32);
      output.WriteBool(ConnectiveUsed);
    }
    if (remainder_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(Remainder);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += ps_.CalculateSize(_repeated_ps_codec);
    if (LocallyFree.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(LocallyFree);
    }
    if (ConnectiveUsed != false) {
      size += 1 + 1;
    }
    if (remainder_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Remainder);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ESet other) {
    if (other == null) {
      return;
    }
    ps_.Add(other.ps_);
    if (other.LocallyFree.Length != 0) {
      LocallyFree = other.LocallyFree;
    }
    if (other.ConnectiveUsed != false) {
      ConnectiveUsed = other.ConnectiveUsed;
    }
    if (other.remainder_ != null) {
      if (remainder_ == null) {
        Remainder = new global::Var();
      }
      Remainder.MergeFrom(other.Remainder);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          ps_.AddEntriesFrom(input, _repeated_ps_codec);
          break;
        }
        case 26: {
          LocallyFree = input.ReadBytes();
          break;
        }
        case 32: {
          ConnectiveUsed = input.ReadBool();
          break;
        }
        case 42: {
          if (remainder_ == null) {
            Remainder = new global::Var();
          }
          input.ReadMessage(Remainder);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          ps_.AddEntriesFrom(ref input, _repeated_ps_codec);
          break;
        }
        case 26: {
          LocallyFree = input.ReadBytes();
          break;
        }
        case 32: {
          ConnectiveUsed = input.ReadBool();
          break;
        }
        case 42: {
          if (remainder_ == null) {
            Remainder = new global::Var();
          }
          input.ReadMessage(Remainder);
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class EMap : pb::IMessage<EMap>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<EMap> _parser = new pb::MessageParser<EMap>(() => new EMap());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<EMap> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RhoTypesReflection.Descriptor.MessageTypes[19]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EMap() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EMap(EMap other) : this() {
    kvs_ = other.kvs_.Clone();
    locallyFree_ = other.locallyFree_;
    connectiveUsed_ = other.connectiveUsed_;
    remainder_ = other.remainder_ != null ? other.remainder_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EMap Clone() {
    return new EMap(this);
  }

  /// <summary>Field number for the "kvs" field.</summary>
  public const int KvsFieldNumber = 1;
  private static readonly pb::FieldCodec<global::KeyValuePair> _repeated_kvs_codec
      = pb::FieldCodec.ForMessage(10, global::KeyValuePair.Parser);
  private readonly pbc::RepeatedField<global::KeyValuePair> kvs_ = new pbc::RepeatedField<global::KeyValuePair>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::KeyValuePair> Kvs {
    get { return kvs_; }
  }

  /// <summary>Field number for the "locallyFree" field.</summary>
  public const int LocallyFreeFieldNumber = 3;
  private pb::ByteString locallyFree_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString LocallyFree {
    get { return locallyFree_; }
    set {
      locallyFree_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "connective_used" field.</summary>
  public const int ConnectiveUsedFieldNumber = 4;
  private bool connectiveUsed_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool ConnectiveUsed {
    get { return connectiveUsed_; }
    set {
      connectiveUsed_ = value;
    }
  }

  /// <summary>Field number for the "remainder" field.</summary>
  public const int RemainderFieldNumber = 5;
  private global::Var remainder_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Var Remainder {
    get { return remainder_; }
    set {
      remainder_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as EMap);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(EMap other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!kvs_.Equals(other.kvs_)) return false;
    if (LocallyFree != other.LocallyFree) return false;
    if (ConnectiveUsed != other.ConnectiveUsed) return false;
    if (!object.Equals(Remainder, other.Remainder)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= kvs_.GetHashCode();
    if (LocallyFree.Length != 0) hash ^= LocallyFree.GetHashCode();
    if (ConnectiveUsed != false) hash ^= ConnectiveUsed.GetHashCode();
    if (remainder_ != null) hash ^= Remainder.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    kvs_.WriteTo(output, _repeated_kvs_codec);
    if (LocallyFree.Length != 0) {
      output.WriteRawTag(26);
      output.WriteBytes(LocallyFree);
    }
    if (ConnectiveUsed != false) {
      output.WriteRawTag(32);
      output.WriteBool(ConnectiveUsed);
    }
    if (remainder_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(Remainder);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    kvs_.WriteTo(ref output, _repeated_kvs_codec);
    if (LocallyFree.Length != 0) {
      output.WriteRawTag(26);
      output.WriteBytes(LocallyFree);
    }
    if (ConnectiveUsed != false) {
      output.WriteRawTag(32);
      output.WriteBool(ConnectiveUsed);
    }
    if (remainder_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(Remainder);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += kvs_.CalculateSize(_repeated_kvs_codec);
    if (LocallyFree.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(LocallyFree);
    }
    if (ConnectiveUsed != false) {
      size += 1 + 1;
    }
    if (remainder_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Remainder);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(EMap other) {
    if (other == null) {
      return;
    }
    kvs_.Add(other.kvs_);
    if (other.LocallyFree.Length != 0) {
      LocallyFree = other.LocallyFree;
    }
    if (other.ConnectiveUsed != false) {
      ConnectiveUsed = other.ConnectiveUsed;
    }
    if (other.remainder_ != null) {
      if (remainder_ == null) {
        Remainder = new global::Var();
      }
      Remainder.MergeFrom(other.Remainder);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          kvs_.AddEntriesFrom(input, _repeated_kvs_codec);
          break;
        }
        case 26: {
          LocallyFree = input.ReadBytes();
          break;
        }
        case 32: {
          ConnectiveUsed = input.ReadBool();
          break;
        }
        case 42: {
          if (remainder_ == null) {
            Remainder = new global::Var();
          }
          input.ReadMessage(Remainder);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          kvs_.AddEntriesFrom(ref input, _repeated_kvs_codec);
          break;
        }
        case 26: {
          LocallyFree = input.ReadBytes();
          break;
        }
        case 32: {
          ConnectiveUsed = input.ReadBool();
          break;
        }
        case 42: {
          if (remainder_ == null) {
            Remainder = new global::Var();
          }
          input.ReadMessage(Remainder);
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///*
/// `target.method(arguments)`
/// </summary>
public sealed partial class EMethod : pb::IMessage<EMethod>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<EMethod> _parser = new pb::MessageParser<EMethod>(() => new EMethod());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<EMethod> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RhoTypesReflection.Descriptor.MessageTypes[20]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EMethod() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EMethod(EMethod other) : this() {
    methodName_ = other.methodName_;
    target_ = other.target_ != null ? other.target_.Clone() : null;
    arguments_ = other.arguments_.Clone();
    locallyFree_ = other.locallyFree_;
    connectiveUsed_ = other.connectiveUsed_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EMethod Clone() {
    return new EMethod(this);
  }

  /// <summary>Field number for the "methodName" field.</summary>
  public const int MethodNameFieldNumber = 1;
  private string methodName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string MethodName {
    get { return methodName_; }
    set {
      methodName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "target" field.</summary>
  public const int TargetFieldNumber = 2;
  private global::Par target_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Par Target {
    get { return target_; }
    set {
      target_ = value;
    }
  }

  /// <summary>Field number for the "arguments" field.</summary>
  public const int ArgumentsFieldNumber = 3;
  private static readonly pb::FieldCodec<global::Par> _repeated_arguments_codec
      = pb::FieldCodec.ForMessage(26, global::Par.Parser);
  private readonly pbc::RepeatedField<global::Par> arguments_ = new pbc::RepeatedField<global::Par>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Par> Arguments {
    get { return arguments_; }
  }

  /// <summary>Field number for the "locallyFree" field.</summary>
  public const int LocallyFreeFieldNumber = 5;
  private pb::ByteString locallyFree_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString LocallyFree {
    get { return locallyFree_; }
    set {
      locallyFree_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "connective_used" field.</summary>
  public const int ConnectiveUsedFieldNumber = 6;
  private bool connectiveUsed_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool ConnectiveUsed {
    get { return connectiveUsed_; }
    set {
      connectiveUsed_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as EMethod);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(EMethod other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (MethodName != other.MethodName) return false;
    if (!object.Equals(Target, other.Target)) return false;
    if(!arguments_.Equals(other.arguments_)) return false;
    if (LocallyFree != other.LocallyFree) return false;
    if (ConnectiveUsed != other.ConnectiveUsed) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (MethodName.Length != 0) hash ^= MethodName.GetHashCode();
    if (target_ != null) hash ^= Target.GetHashCode();
    hash ^= arguments_.GetHashCode();
    if (LocallyFree.Length != 0) hash ^= LocallyFree.GetHashCode();
    if (ConnectiveUsed != false) hash ^= ConnectiveUsed.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (MethodName.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(MethodName);
    }
    if (target_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Target);
    }
    arguments_.WriteTo(output, _repeated_arguments_codec);
    if (LocallyFree.Length != 0) {
      output.WriteRawTag(42);
      output.WriteBytes(LocallyFree);
    }
    if (ConnectiveUsed != false) {
      output.WriteRawTag(48);
      output.WriteBool(ConnectiveUsed);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (MethodName.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(MethodName);
    }
    if (target_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Target);
    }
    arguments_.WriteTo(ref output, _repeated_arguments_codec);
    if (LocallyFree.Length != 0) {
      output.WriteRawTag(42);
      output.WriteBytes(LocallyFree);
    }
    if (ConnectiveUsed != false) {
      output.WriteRawTag(48);
      output.WriteBool(ConnectiveUsed);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (MethodName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(MethodName);
    }
    if (target_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Target);
    }
    size += arguments_.CalculateSize(_repeated_arguments_codec);
    if (LocallyFree.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(LocallyFree);
    }
    if (ConnectiveUsed != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(EMethod other) {
    if (other == null) {
      return;
    }
    if (other.MethodName.Length != 0) {
      MethodName = other.MethodName;
    }
    if (other.target_ != null) {
      if (target_ == null) {
        Target = new global::Par();
      }
      Target.MergeFrom(other.Target);
    }
    arguments_.Add(other.arguments_);
    if (other.LocallyFree.Length != 0) {
      LocallyFree = other.LocallyFree;
    }
    if (other.ConnectiveUsed != false) {
      ConnectiveUsed = other.ConnectiveUsed;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          MethodName = input.ReadString();
          break;
        }
        case 18: {
          if (target_ == null) {
            Target = new global::Par();
          }
          input.ReadMessage(Target);
          break;
        }
        case 26: {
          arguments_.AddEntriesFrom(input, _repeated_arguments_codec);
          break;
        }
        case 42: {
          LocallyFree = input.ReadBytes();
          break;
        }
        case 48: {
          ConnectiveUsed = input.ReadBool();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          MethodName = input.ReadString();
          break;
        }
        case 18: {
          if (target_ == null) {
            Target = new global::Par();
          }
          input.ReadMessage(Target);
          break;
        }
        case 26: {
          arguments_.AddEntriesFrom(ref input, _repeated_arguments_codec);
          break;
        }
        case 42: {
          LocallyFree = input.ReadBytes();
          break;
        }
        case 48: {
          ConnectiveUsed = input.ReadBool();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class KeyValuePair : pb::IMessage<KeyValuePair>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<KeyValuePair> _parser = new pb::MessageParser<KeyValuePair>(() => new KeyValuePair());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<KeyValuePair> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RhoTypesReflection.Descriptor.MessageTypes[21]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public KeyValuePair() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public KeyValuePair(KeyValuePair other) : this() {
    key_ = other.key_ != null ? other.key_.Clone() : null;
    value_ = other.value_ != null ? other.value_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public KeyValuePair Clone() {
    return new KeyValuePair(this);
  }

  /// <summary>Field number for the "key" field.</summary>
  public const int KeyFieldNumber = 1;
  private global::Par key_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Par Key {
    get { return key_; }
    set {
      key_ = value;
    }
  }

  /// <summary>Field number for the "value" field.</summary>
  public const int ValueFieldNumber = 2;
  private global::Par value_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Par Value {
    get { return value_; }
    set {
      value_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as KeyValuePair);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(KeyValuePair other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Key, other.Key)) return false;
    if (!object.Equals(Value, other.Value)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (key_ != null) hash ^= Key.GetHashCode();
    if (value_ != null) hash ^= Value.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (key_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Key);
    }
    if (value_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Value);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (key_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Key);
    }
    if (value_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Value);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (key_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Key);
    }
    if (value_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(KeyValuePair other) {
    if (other == null) {
      return;
    }
    if (other.key_ != null) {
      if (key_ == null) {
        Key = new global::Par();
      }
      Key.MergeFrom(other.Key);
    }
    if (other.value_ != null) {
      if (value_ == null) {
        Value = new global::Par();
      }
      Value.MergeFrom(other.Value);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (key_ == null) {
            Key = new global::Par();
          }
          input.ReadMessage(Key);
          break;
        }
        case 18: {
          if (value_ == null) {
            Value = new global::Par();
          }
          input.ReadMessage(Value);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          if (key_ == null) {
            Key = new global::Par();
          }
          input.ReadMessage(Key);
          break;
        }
        case 18: {
          if (value_ == null) {
            Value = new global::Par();
          }
          input.ReadMessage(Value);
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// A variable used as a var should be bound in a process context, not a name
/// context. For example:
/// `for (@x &lt;- c1; @y &lt;- c2) { z!(x + y) }` is fine, but
/// `for (x &lt;- c1; y &lt;- c2) { z!(x + y) }` should raise an error.
/// </summary>
public sealed partial class EVar : pb::IMessage<EVar>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<EVar> _parser = new pb::MessageParser<EVar>(() => new EVar());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<EVar> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RhoTypesReflection.Descriptor.MessageTypes[22]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EVar() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EVar(EVar other) : this() {
    v_ = other.v_ != null ? other.v_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EVar Clone() {
    return new EVar(this);
  }

  /// <summary>Field number for the "v" field.</summary>
  public const int VFieldNumber = 1;
  private global::Var v_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Var V {
    get { return v_; }
    set {
      v_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as EVar);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(EVar other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(V, other.V)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (v_ != null) hash ^= V.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (v_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(V);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (v_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(V);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (v_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(V);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(EVar other) {
    if (other == null) {
      return;
    }
    if (other.v_ != null) {
      if (v_ == null) {
        V = new global::Var();
      }
      V.MergeFrom(other.V);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (v_ == null) {
            V = new global::Var();
          }
          input.ReadMessage(V);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          if (v_ == null) {
            V = new global::Var();
          }
          input.ReadMessage(V);
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class ENot : pb::IMessage<ENot>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ENot> _parser = new pb::MessageParser<ENot>(() => new ENot());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ENot> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RhoTypesReflection.Descriptor.MessageTypes[23]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ENot() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ENot(ENot other) : this() {
    p_ = other.p_ != null ? other.p_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ENot Clone() {
    return new ENot(this);
  }

  /// <summary>Field number for the "p" field.</summary>
  public const int PFieldNumber = 1;
  private global::Par p_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Par P {
    get { return p_; }
    set {
      p_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ENot);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ENot other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(P, other.P)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (p_ != null) hash ^= P.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (p_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(P);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (p_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(P);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (p_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(P);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ENot other) {
    if (other == null) {
      return;
    }
    if (other.p_ != null) {
      if (p_ == null) {
        P = new global::Par();
      }
      P.MergeFrom(other.P);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (p_ == null) {
            P = new global::Par();
          }
          input.ReadMessage(P);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          if (p_ == null) {
            P = new global::Par();
          }
          input.ReadMessage(P);
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class ENeg : pb::IMessage<ENeg>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ENeg> _parser = new pb::MessageParser<ENeg>(() => new ENeg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ENeg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RhoTypesReflection.Descriptor.MessageTypes[24]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ENeg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ENeg(ENeg other) : this() {
    p_ = other.p_ != null ? other.p_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ENeg Clone() {
    return new ENeg(this);
  }

  /// <summary>Field number for the "p" field.</summary>
  public const int PFieldNumber = 1;
  private global::Par p_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Par P {
    get { return p_; }
    set {
      p_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ENeg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ENeg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(P, other.P)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (p_ != null) hash ^= P.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (p_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(P);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (p_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(P);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (p_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(P);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ENeg other) {
    if (other == null) {
      return;
    }
    if (other.p_ != null) {
      if (p_ == null) {
        P = new global::Par();
      }
      P.MergeFrom(other.P);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (p_ == null) {
            P = new global::Par();
          }
          input.ReadMessage(P);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          if (p_ == null) {
            P = new global::Par();
          }
          input.ReadMessage(P);
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class EMult : pb::IMessage<EMult>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<EMult> _parser = new pb::MessageParser<EMult>(() => new EMult());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<EMult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RhoTypesReflection.Descriptor.MessageTypes[25]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EMult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EMult(EMult other) : this() {
    p1_ = other.p1_ != null ? other.p1_.Clone() : null;
    p2_ = other.p2_ != null ? other.p2_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EMult Clone() {
    return new EMult(this);
  }

  /// <summary>Field number for the "p1" field.</summary>
  public const int P1FieldNumber = 1;
  private global::Par p1_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Par P1 {
    get { return p1_; }
    set {
      p1_ = value;
    }
  }

  /// <summary>Field number for the "p2" field.</summary>
  public const int P2FieldNumber = 2;
  private global::Par p2_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Par P2 {
    get { return p2_; }
    set {
      p2_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as EMult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(EMult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(P1, other.P1)) return false;
    if (!object.Equals(P2, other.P2)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (p1_ != null) hash ^= P1.GetHashCode();
    if (p2_ != null) hash ^= P2.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (p1_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(P1);
    }
    if (p2_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(P2);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (p1_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(P1);
    }
    if (p2_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(P2);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (p1_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(P1);
    }
    if (p2_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(P2);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(EMult other) {
    if (other == null) {
      return;
    }
    if (other.p1_ != null) {
      if (p1_ == null) {
        P1 = new global::Par();
      }
      P1.MergeFrom(other.P1);
    }
    if (other.p2_ != null) {
      if (p2_ == null) {
        P2 = new global::Par();
      }
      P2.MergeFrom(other.P2);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (p1_ == null) {
            P1 = new global::Par();
          }
          input.ReadMessage(P1);
          break;
        }
        case 18: {
          if (p2_ == null) {
            P2 = new global::Par();
          }
          input.ReadMessage(P2);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          if (p1_ == null) {
            P1 = new global::Par();
          }
          input.ReadMessage(P1);
          break;
        }
        case 18: {
          if (p2_ == null) {
            P2 = new global::Par();
          }
          input.ReadMessage(P2);
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class EDiv : pb::IMessage<EDiv>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<EDiv> _parser = new pb::MessageParser<EDiv>(() => new EDiv());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<EDiv> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RhoTypesReflection.Descriptor.MessageTypes[26]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EDiv() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EDiv(EDiv other) : this() {
    p1_ = other.p1_ != null ? other.p1_.Clone() : null;
    p2_ = other.p2_ != null ? other.p2_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EDiv Clone() {
    return new EDiv(this);
  }

  /// <summary>Field number for the "p1" field.</summary>
  public const int P1FieldNumber = 1;
  private global::Par p1_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Par P1 {
    get { return p1_; }
    set {
      p1_ = value;
    }
  }

  /// <summary>Field number for the "p2" field.</summary>
  public const int P2FieldNumber = 2;
  private global::Par p2_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Par P2 {
    get { return p2_; }
    set {
      p2_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as EDiv);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(EDiv other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(P1, other.P1)) return false;
    if (!object.Equals(P2, other.P2)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (p1_ != null) hash ^= P1.GetHashCode();
    if (p2_ != null) hash ^= P2.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (p1_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(P1);
    }
    if (p2_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(P2);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (p1_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(P1);
    }
    if (p2_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(P2);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (p1_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(P1);
    }
    if (p2_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(P2);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(EDiv other) {
    if (other == null) {
      return;
    }
    if (other.p1_ != null) {
      if (p1_ == null) {
        P1 = new global::Par();
      }
      P1.MergeFrom(other.P1);
    }
    if (other.p2_ != null) {
      if (p2_ == null) {
        P2 = new global::Par();
      }
      P2.MergeFrom(other.P2);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (p1_ == null) {
            P1 = new global::Par();
          }
          input.ReadMessage(P1);
          break;
        }
        case 18: {
          if (p2_ == null) {
            P2 = new global::Par();
          }
          input.ReadMessage(P2);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          if (p1_ == null) {
            P1 = new global::Par();
          }
          input.ReadMessage(P1);
          break;
        }
        case 18: {
          if (p2_ == null) {
            P2 = new global::Par();
          }
          input.ReadMessage(P2);
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class EMod : pb::IMessage<EMod>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<EMod> _parser = new pb::MessageParser<EMod>(() => new EMod());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<EMod> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RhoTypesReflection.Descriptor.MessageTypes[27]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EMod() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EMod(EMod other) : this() {
    p1_ = other.p1_ != null ? other.p1_.Clone() : null;
    p2_ = other.p2_ != null ? other.p2_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EMod Clone() {
    return new EMod(this);
  }

  /// <summary>Field number for the "p1" field.</summary>
  public const int P1FieldNumber = 1;
  private global::Par p1_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Par P1 {
    get { return p1_; }
    set {
      p1_ = value;
    }
  }

  /// <summary>Field number for the "p2" field.</summary>
  public const int P2FieldNumber = 2;
  private global::Par p2_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Par P2 {
    get { return p2_; }
    set {
      p2_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as EMod);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(EMod other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(P1, other.P1)) return false;
    if (!object.Equals(P2, other.P2)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (p1_ != null) hash ^= P1.GetHashCode();
    if (p2_ != null) hash ^= P2.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (p1_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(P1);
    }
    if (p2_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(P2);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (p1_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(P1);
    }
    if (p2_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(P2);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (p1_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(P1);
    }
    if (p2_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(P2);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(EMod other) {
    if (other == null) {
      return;
    }
    if (other.p1_ != null) {
      if (p1_ == null) {
        P1 = new global::Par();
      }
      P1.MergeFrom(other.P1);
    }
    if (other.p2_ != null) {
      if (p2_ == null) {
        P2 = new global::Par();
      }
      P2.MergeFrom(other.P2);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (p1_ == null) {
            P1 = new global::Par();
          }
          input.ReadMessage(P1);
          break;
        }
        case 18: {
          if (p2_ == null) {
            P2 = new global::Par();
          }
          input.ReadMessage(P2);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          if (p1_ == null) {
            P1 = new global::Par();
          }
          input.ReadMessage(P1);
          break;
        }
        case 18: {
          if (p2_ == null) {
            P2 = new global::Par();
          }
          input.ReadMessage(P2);
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class EPlus : pb::IMessage<EPlus>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<EPlus> _parser = new pb::MessageParser<EPlus>(() => new EPlus());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<EPlus> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RhoTypesReflection.Descriptor.MessageTypes[28]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EPlus() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EPlus(EPlus other) : this() {
    p1_ = other.p1_ != null ? other.p1_.Clone() : null;
    p2_ = other.p2_ != null ? other.p2_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EPlus Clone() {
    return new EPlus(this);
  }

  /// <summary>Field number for the "p1" field.</summary>
  public const int P1FieldNumber = 1;
  private global::Par p1_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Par P1 {
    get { return p1_; }
    set {
      p1_ = value;
    }
  }

  /// <summary>Field number for the "p2" field.</summary>
  public const int P2FieldNumber = 2;
  private global::Par p2_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Par P2 {
    get { return p2_; }
    set {
      p2_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as EPlus);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(EPlus other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(P1, other.P1)) return false;
    if (!object.Equals(P2, other.P2)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (p1_ != null) hash ^= P1.GetHashCode();
    if (p2_ != null) hash ^= P2.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (p1_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(P1);
    }
    if (p2_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(P2);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (p1_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(P1);
    }
    if (p2_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(P2);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (p1_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(P1);
    }
    if (p2_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(P2);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(EPlus other) {
    if (other == null) {
      return;
    }
    if (other.p1_ != null) {
      if (p1_ == null) {
        P1 = new global::Par();
      }
      P1.MergeFrom(other.P1);
    }
    if (other.p2_ != null) {
      if (p2_ == null) {
        P2 = new global::Par();
      }
      P2.MergeFrom(other.P2);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (p1_ == null) {
            P1 = new global::Par();
          }
          input.ReadMessage(P1);
          break;
        }
        case 18: {
          if (p2_ == null) {
            P2 = new global::Par();
          }
          input.ReadMessage(P2);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          if (p1_ == null) {
            P1 = new global::Par();
          }
          input.ReadMessage(P1);
          break;
        }
        case 18: {
          if (p2_ == null) {
            P2 = new global::Par();
          }
          input.ReadMessage(P2);
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class EMinus : pb::IMessage<EMinus>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<EMinus> _parser = new pb::MessageParser<EMinus>(() => new EMinus());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<EMinus> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RhoTypesReflection.Descriptor.MessageTypes[29]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EMinus() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EMinus(EMinus other) : this() {
    p1_ = other.p1_ != null ? other.p1_.Clone() : null;
    p2_ = other.p2_ != null ? other.p2_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EMinus Clone() {
    return new EMinus(this);
  }

  /// <summary>Field number for the "p1" field.</summary>
  public const int P1FieldNumber = 1;
  private global::Par p1_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Par P1 {
    get { return p1_; }
    set {
      p1_ = value;
    }
  }

  /// <summary>Field number for the "p2" field.</summary>
  public const int P2FieldNumber = 2;
  private global::Par p2_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Par P2 {
    get { return p2_; }
    set {
      p2_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as EMinus);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(EMinus other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(P1, other.P1)) return false;
    if (!object.Equals(P2, other.P2)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (p1_ != null) hash ^= P1.GetHashCode();
    if (p2_ != null) hash ^= P2.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (p1_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(P1);
    }
    if (p2_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(P2);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (p1_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(P1);
    }
    if (p2_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(P2);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (p1_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(P1);
    }
    if (p2_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(P2);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(EMinus other) {
    if (other == null) {
      return;
    }
    if (other.p1_ != null) {
      if (p1_ == null) {
        P1 = new global::Par();
      }
      P1.MergeFrom(other.P1);
    }
    if (other.p2_ != null) {
      if (p2_ == null) {
        P2 = new global::Par();
      }
      P2.MergeFrom(other.P2);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (p1_ == null) {
            P1 = new global::Par();
          }
          input.ReadMessage(P1);
          break;
        }
        case 18: {
          if (p2_ == null) {
            P2 = new global::Par();
          }
          input.ReadMessage(P2);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          if (p1_ == null) {
            P1 = new global::Par();
          }
          input.ReadMessage(P1);
          break;
        }
        case 18: {
          if (p2_ == null) {
            P2 = new global::Par();
          }
          input.ReadMessage(P2);
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class ELt : pb::IMessage<ELt>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ELt> _parser = new pb::MessageParser<ELt>(() => new ELt());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ELt> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RhoTypesReflection.Descriptor.MessageTypes[30]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ELt() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ELt(ELt other) : this() {
    p1_ = other.p1_ != null ? other.p1_.Clone() : null;
    p2_ = other.p2_ != null ? other.p2_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ELt Clone() {
    return new ELt(this);
  }

  /// <summary>Field number for the "p1" field.</summary>
  public const int P1FieldNumber = 1;
  private global::Par p1_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Par P1 {
    get { return p1_; }
    set {
      p1_ = value;
    }
  }

  /// <summary>Field number for the "p2" field.</summary>
  public const int P2FieldNumber = 2;
  private global::Par p2_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Par P2 {
    get { return p2_; }
    set {
      p2_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ELt);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ELt other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(P1, other.P1)) return false;
    if (!object.Equals(P2, other.P2)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (p1_ != null) hash ^= P1.GetHashCode();
    if (p2_ != null) hash ^= P2.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (p1_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(P1);
    }
    if (p2_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(P2);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (p1_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(P1);
    }
    if (p2_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(P2);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (p1_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(P1);
    }
    if (p2_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(P2);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ELt other) {
    if (other == null) {
      return;
    }
    if (other.p1_ != null) {
      if (p1_ == null) {
        P1 = new global::Par();
      }
      P1.MergeFrom(other.P1);
    }
    if (other.p2_ != null) {
      if (p2_ == null) {
        P2 = new global::Par();
      }
      P2.MergeFrom(other.P2);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (p1_ == null) {
            P1 = new global::Par();
          }
          input.ReadMessage(P1);
          break;
        }
        case 18: {
          if (p2_ == null) {
            P2 = new global::Par();
          }
          input.ReadMessage(P2);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          if (p1_ == null) {
            P1 = new global::Par();
          }
          input.ReadMessage(P1);
          break;
        }
        case 18: {
          if (p2_ == null) {
            P2 = new global::Par();
          }
          input.ReadMessage(P2);
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class ELte : pb::IMessage<ELte>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ELte> _parser = new pb::MessageParser<ELte>(() => new ELte());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ELte> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RhoTypesReflection.Descriptor.MessageTypes[31]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ELte() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ELte(ELte other) : this() {
    p1_ = other.p1_ != null ? other.p1_.Clone() : null;
    p2_ = other.p2_ != null ? other.p2_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ELte Clone() {
    return new ELte(this);
  }

  /// <summary>Field number for the "p1" field.</summary>
  public const int P1FieldNumber = 1;
  private global::Par p1_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Par P1 {
    get { return p1_; }
    set {
      p1_ = value;
    }
  }

  /// <summary>Field number for the "p2" field.</summary>
  public const int P2FieldNumber = 2;
  private global::Par p2_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Par P2 {
    get { return p2_; }
    set {
      p2_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ELte);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ELte other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(P1, other.P1)) return false;
    if (!object.Equals(P2, other.P2)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (p1_ != null) hash ^= P1.GetHashCode();
    if (p2_ != null) hash ^= P2.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (p1_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(P1);
    }
    if (p2_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(P2);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (p1_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(P1);
    }
    if (p2_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(P2);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (p1_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(P1);
    }
    if (p2_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(P2);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ELte other) {
    if (other == null) {
      return;
    }
    if (other.p1_ != null) {
      if (p1_ == null) {
        P1 = new global::Par();
      }
      P1.MergeFrom(other.P1);
    }
    if (other.p2_ != null) {
      if (p2_ == null) {
        P2 = new global::Par();
      }
      P2.MergeFrom(other.P2);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (p1_ == null) {
            P1 = new global::Par();
          }
          input.ReadMessage(P1);
          break;
        }
        case 18: {
          if (p2_ == null) {
            P2 = new global::Par();
          }
          input.ReadMessage(P2);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          if (p1_ == null) {
            P1 = new global::Par();
          }
          input.ReadMessage(P1);
          break;
        }
        case 18: {
          if (p2_ == null) {
            P2 = new global::Par();
          }
          input.ReadMessage(P2);
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class EGt : pb::IMessage<EGt>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<EGt> _parser = new pb::MessageParser<EGt>(() => new EGt());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<EGt> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RhoTypesReflection.Descriptor.MessageTypes[32]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EGt() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EGt(EGt other) : this() {
    p1_ = other.p1_ != null ? other.p1_.Clone() : null;
    p2_ = other.p2_ != null ? other.p2_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EGt Clone() {
    return new EGt(this);
  }

  /// <summary>Field number for the "p1" field.</summary>
  public const int P1FieldNumber = 1;
  private global::Par p1_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Par P1 {
    get { return p1_; }
    set {
      p1_ = value;
    }
  }

  /// <summary>Field number for the "p2" field.</summary>
  public const int P2FieldNumber = 2;
  private global::Par p2_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Par P2 {
    get { return p2_; }
    set {
      p2_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as EGt);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(EGt other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(P1, other.P1)) return false;
    if (!object.Equals(P2, other.P2)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (p1_ != null) hash ^= P1.GetHashCode();
    if (p2_ != null) hash ^= P2.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (p1_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(P1);
    }
    if (p2_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(P2);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (p1_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(P1);
    }
    if (p2_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(P2);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (p1_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(P1);
    }
    if (p2_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(P2);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(EGt other) {
    if (other == null) {
      return;
    }
    if (other.p1_ != null) {
      if (p1_ == null) {
        P1 = new global::Par();
      }
      P1.MergeFrom(other.P1);
    }
    if (other.p2_ != null) {
      if (p2_ == null) {
        P2 = new global::Par();
      }
      P2.MergeFrom(other.P2);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (p1_ == null) {
            P1 = new global::Par();
          }
          input.ReadMessage(P1);
          break;
        }
        case 18: {
          if (p2_ == null) {
            P2 = new global::Par();
          }
          input.ReadMessage(P2);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          if (p1_ == null) {
            P1 = new global::Par();
          }
          input.ReadMessage(P1);
          break;
        }
        case 18: {
          if (p2_ == null) {
            P2 = new global::Par();
          }
          input.ReadMessage(P2);
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class EGte : pb::IMessage<EGte>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<EGte> _parser = new pb::MessageParser<EGte>(() => new EGte());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<EGte> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RhoTypesReflection.Descriptor.MessageTypes[33]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EGte() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EGte(EGte other) : this() {
    p1_ = other.p1_ != null ? other.p1_.Clone() : null;
    p2_ = other.p2_ != null ? other.p2_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EGte Clone() {
    return new EGte(this);
  }

  /// <summary>Field number for the "p1" field.</summary>
  public const int P1FieldNumber = 1;
  private global::Par p1_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Par P1 {
    get { return p1_; }
    set {
      p1_ = value;
    }
  }

  /// <summary>Field number for the "p2" field.</summary>
  public const int P2FieldNumber = 2;
  private global::Par p2_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Par P2 {
    get { return p2_; }
    set {
      p2_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as EGte);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(EGte other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(P1, other.P1)) return false;
    if (!object.Equals(P2, other.P2)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (p1_ != null) hash ^= P1.GetHashCode();
    if (p2_ != null) hash ^= P2.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (p1_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(P1);
    }
    if (p2_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(P2);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (p1_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(P1);
    }
    if (p2_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(P2);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (p1_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(P1);
    }
    if (p2_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(P2);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(EGte other) {
    if (other == null) {
      return;
    }
    if (other.p1_ != null) {
      if (p1_ == null) {
        P1 = new global::Par();
      }
      P1.MergeFrom(other.P1);
    }
    if (other.p2_ != null) {
      if (p2_ == null) {
        P2 = new global::Par();
      }
      P2.MergeFrom(other.P2);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (p1_ == null) {
            P1 = new global::Par();
          }
          input.ReadMessage(P1);
          break;
        }
        case 18: {
          if (p2_ == null) {
            P2 = new global::Par();
          }
          input.ReadMessage(P2);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          if (p1_ == null) {
            P1 = new global::Par();
          }
          input.ReadMessage(P1);
          break;
        }
        case 18: {
          if (p2_ == null) {
            P2 = new global::Par();
          }
          input.ReadMessage(P2);
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class EEq : pb::IMessage<EEq>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<EEq> _parser = new pb::MessageParser<EEq>(() => new EEq());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<EEq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RhoTypesReflection.Descriptor.MessageTypes[34]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EEq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EEq(EEq other) : this() {
    p1_ = other.p1_ != null ? other.p1_.Clone() : null;
    p2_ = other.p2_ != null ? other.p2_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EEq Clone() {
    return new EEq(this);
  }

  /// <summary>Field number for the "p1" field.</summary>
  public const int P1FieldNumber = 1;
  private global::Par p1_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Par P1 {
    get { return p1_; }
    set {
      p1_ = value;
    }
  }

  /// <summary>Field number for the "p2" field.</summary>
  public const int P2FieldNumber = 2;
  private global::Par p2_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Par P2 {
    get { return p2_; }
    set {
      p2_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as EEq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(EEq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(P1, other.P1)) return false;
    if (!object.Equals(P2, other.P2)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (p1_ != null) hash ^= P1.GetHashCode();
    if (p2_ != null) hash ^= P2.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (p1_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(P1);
    }
    if (p2_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(P2);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (p1_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(P1);
    }
    if (p2_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(P2);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (p1_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(P1);
    }
    if (p2_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(P2);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(EEq other) {
    if (other == null) {
      return;
    }
    if (other.p1_ != null) {
      if (p1_ == null) {
        P1 = new global::Par();
      }
      P1.MergeFrom(other.P1);
    }
    if (other.p2_ != null) {
      if (p2_ == null) {
        P2 = new global::Par();
      }
      P2.MergeFrom(other.P2);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (p1_ == null) {
            P1 = new global::Par();
          }
          input.ReadMessage(P1);
          break;
        }
        case 18: {
          if (p2_ == null) {
            P2 = new global::Par();
          }
          input.ReadMessage(P2);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          if (p1_ == null) {
            P1 = new global::Par();
          }
          input.ReadMessage(P1);
          break;
        }
        case 18: {
          if (p2_ == null) {
            P2 = new global::Par();
          }
          input.ReadMessage(P2);
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class ENeq : pb::IMessage<ENeq>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ENeq> _parser = new pb::MessageParser<ENeq>(() => new ENeq());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ENeq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RhoTypesReflection.Descriptor.MessageTypes[35]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ENeq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ENeq(ENeq other) : this() {
    p1_ = other.p1_ != null ? other.p1_.Clone() : null;
    p2_ = other.p2_ != null ? other.p2_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ENeq Clone() {
    return new ENeq(this);
  }

  /// <summary>Field number for the "p1" field.</summary>
  public const int P1FieldNumber = 1;
  private global::Par p1_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Par P1 {
    get { return p1_; }
    set {
      p1_ = value;
    }
  }

  /// <summary>Field number for the "p2" field.</summary>
  public const int P2FieldNumber = 2;
  private global::Par p2_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Par P2 {
    get { return p2_; }
    set {
      p2_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ENeq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ENeq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(P1, other.P1)) return false;
    if (!object.Equals(P2, other.P2)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (p1_ != null) hash ^= P1.GetHashCode();
    if (p2_ != null) hash ^= P2.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (p1_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(P1);
    }
    if (p2_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(P2);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (p1_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(P1);
    }
    if (p2_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(P2);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (p1_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(P1);
    }
    if (p2_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(P2);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ENeq other) {
    if (other == null) {
      return;
    }
    if (other.p1_ != null) {
      if (p1_ == null) {
        P1 = new global::Par();
      }
      P1.MergeFrom(other.P1);
    }
    if (other.p2_ != null) {
      if (p2_ == null) {
        P2 = new global::Par();
      }
      P2.MergeFrom(other.P2);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (p1_ == null) {
            P1 = new global::Par();
          }
          input.ReadMessage(P1);
          break;
        }
        case 18: {
          if (p2_ == null) {
            P2 = new global::Par();
          }
          input.ReadMessage(P2);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          if (p1_ == null) {
            P1 = new global::Par();
          }
          input.ReadMessage(P1);
          break;
        }
        case 18: {
          if (p2_ == null) {
            P2 = new global::Par();
          }
          input.ReadMessage(P2);
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class EAnd : pb::IMessage<EAnd>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<EAnd> _parser = new pb::MessageParser<EAnd>(() => new EAnd());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<EAnd> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RhoTypesReflection.Descriptor.MessageTypes[36]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EAnd() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EAnd(EAnd other) : this() {
    p1_ = other.p1_ != null ? other.p1_.Clone() : null;
    p2_ = other.p2_ != null ? other.p2_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EAnd Clone() {
    return new EAnd(this);
  }

  /// <summary>Field number for the "p1" field.</summary>
  public const int P1FieldNumber = 1;
  private global::Par p1_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Par P1 {
    get { return p1_; }
    set {
      p1_ = value;
    }
  }

  /// <summary>Field number for the "p2" field.</summary>
  public const int P2FieldNumber = 2;
  private global::Par p2_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Par P2 {
    get { return p2_; }
    set {
      p2_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as EAnd);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(EAnd other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(P1, other.P1)) return false;
    if (!object.Equals(P2, other.P2)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (p1_ != null) hash ^= P1.GetHashCode();
    if (p2_ != null) hash ^= P2.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (p1_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(P1);
    }
    if (p2_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(P2);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (p1_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(P1);
    }
    if (p2_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(P2);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (p1_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(P1);
    }
    if (p2_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(P2);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(EAnd other) {
    if (other == null) {
      return;
    }
    if (other.p1_ != null) {
      if (p1_ == null) {
        P1 = new global::Par();
      }
      P1.MergeFrom(other.P1);
    }
    if (other.p2_ != null) {
      if (p2_ == null) {
        P2 = new global::Par();
      }
      P2.MergeFrom(other.P2);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (p1_ == null) {
            P1 = new global::Par();
          }
          input.ReadMessage(P1);
          break;
        }
        case 18: {
          if (p2_ == null) {
            P2 = new global::Par();
          }
          input.ReadMessage(P2);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          if (p1_ == null) {
            P1 = new global::Par();
          }
          input.ReadMessage(P1);
          break;
        }
        case 18: {
          if (p2_ == null) {
            P2 = new global::Par();
          }
          input.ReadMessage(P2);
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class EOr : pb::IMessage<EOr>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<EOr> _parser = new pb::MessageParser<EOr>(() => new EOr());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<EOr> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RhoTypesReflection.Descriptor.MessageTypes[37]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EOr() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EOr(EOr other) : this() {
    p1_ = other.p1_ != null ? other.p1_.Clone() : null;
    p2_ = other.p2_ != null ? other.p2_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EOr Clone() {
    return new EOr(this);
  }

  /// <summary>Field number for the "p1" field.</summary>
  public const int P1FieldNumber = 1;
  private global::Par p1_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Par P1 {
    get { return p1_; }
    set {
      p1_ = value;
    }
  }

  /// <summary>Field number for the "p2" field.</summary>
  public const int P2FieldNumber = 2;
  private global::Par p2_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Par P2 {
    get { return p2_; }
    set {
      p2_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as EOr);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(EOr other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(P1, other.P1)) return false;
    if (!object.Equals(P2, other.P2)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (p1_ != null) hash ^= P1.GetHashCode();
    if (p2_ != null) hash ^= P2.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (p1_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(P1);
    }
    if (p2_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(P2);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (p1_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(P1);
    }
    if (p2_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(P2);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (p1_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(P1);
    }
    if (p2_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(P2);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(EOr other) {
    if (other == null) {
      return;
    }
    if (other.p1_ != null) {
      if (p1_ == null) {
        P1 = new global::Par();
      }
      P1.MergeFrom(other.P1);
    }
    if (other.p2_ != null) {
      if (p2_ == null) {
        P2 = new global::Par();
      }
      P2.MergeFrom(other.P2);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (p1_ == null) {
            P1 = new global::Par();
          }
          input.ReadMessage(P1);
          break;
        }
        case 18: {
          if (p2_ == null) {
            P2 = new global::Par();
          }
          input.ReadMessage(P2);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          if (p1_ == null) {
            P1 = new global::Par();
          }
          input.ReadMessage(P1);
          break;
        }
        case 18: {
          if (p2_ == null) {
            P2 = new global::Par();
          }
          input.ReadMessage(P2);
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class EMatches : pb::IMessage<EMatches>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<EMatches> _parser = new pb::MessageParser<EMatches>(() => new EMatches());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<EMatches> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RhoTypesReflection.Descriptor.MessageTypes[38]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EMatches() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EMatches(EMatches other) : this() {
    target_ = other.target_ != null ? other.target_.Clone() : null;
    pattern_ = other.pattern_ != null ? other.pattern_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EMatches Clone() {
    return new EMatches(this);
  }

  /// <summary>Field number for the "target" field.</summary>
  public const int TargetFieldNumber = 1;
  private global::Par target_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Par Target {
    get { return target_; }
    set {
      target_ = value;
    }
  }

  /// <summary>Field number for the "pattern" field.</summary>
  public const int PatternFieldNumber = 2;
  private global::Par pattern_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Par Pattern {
    get { return pattern_; }
    set {
      pattern_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as EMatches);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(EMatches other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Target, other.Target)) return false;
    if (!object.Equals(Pattern, other.Pattern)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (target_ != null) hash ^= Target.GetHashCode();
    if (pattern_ != null) hash ^= Pattern.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (target_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Target);
    }
    if (pattern_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Pattern);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (target_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Target);
    }
    if (pattern_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Pattern);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (target_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Target);
    }
    if (pattern_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pattern);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(EMatches other) {
    if (other == null) {
      return;
    }
    if (other.target_ != null) {
      if (target_ == null) {
        Target = new global::Par();
      }
      Target.MergeFrom(other.Target);
    }
    if (other.pattern_ != null) {
      if (pattern_ == null) {
        Pattern = new global::Par();
      }
      Pattern.MergeFrom(other.Pattern);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (target_ == null) {
            Target = new global::Par();
          }
          input.ReadMessage(Target);
          break;
        }
        case 18: {
          if (pattern_ == null) {
            Pattern = new global::Par();
          }
          input.ReadMessage(Pattern);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          if (target_ == null) {
            Target = new global::Par();
          }
          input.ReadMessage(Target);
          break;
        }
        case 18: {
          if (pattern_ == null) {
            Pattern = new global::Par();
          }
          input.ReadMessage(Pattern);
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///*
/// String interpolation
///
/// `"Hello, {name}" %% {"name": "Bob"}` denotes `"Hello, Bob"`
/// </summary>
public sealed partial class EPercentPercent : pb::IMessage<EPercentPercent>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<EPercentPercent> _parser = new pb::MessageParser<EPercentPercent>(() => new EPercentPercent());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<EPercentPercent> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RhoTypesReflection.Descriptor.MessageTypes[39]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EPercentPercent() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EPercentPercent(EPercentPercent other) : this() {
    p1_ = other.p1_ != null ? other.p1_.Clone() : null;
    p2_ = other.p2_ != null ? other.p2_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EPercentPercent Clone() {
    return new EPercentPercent(this);
  }

  /// <summary>Field number for the "p1" field.</summary>
  public const int P1FieldNumber = 1;
  private global::Par p1_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Par P1 {
    get { return p1_; }
    set {
      p1_ = value;
    }
  }

  /// <summary>Field number for the "p2" field.</summary>
  public const int P2FieldNumber = 2;
  private global::Par p2_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Par P2 {
    get { return p2_; }
    set {
      p2_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as EPercentPercent);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(EPercentPercent other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(P1, other.P1)) return false;
    if (!object.Equals(P2, other.P2)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (p1_ != null) hash ^= P1.GetHashCode();
    if (p2_ != null) hash ^= P2.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (p1_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(P1);
    }
    if (p2_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(P2);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (p1_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(P1);
    }
    if (p2_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(P2);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (p1_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(P1);
    }
    if (p2_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(P2);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(EPercentPercent other) {
    if (other == null) {
      return;
    }
    if (other.p1_ != null) {
      if (p1_ == null) {
        P1 = new global::Par();
      }
      P1.MergeFrom(other.P1);
    }
    if (other.p2_ != null) {
      if (p2_ == null) {
        P2 = new global::Par();
      }
      P2.MergeFrom(other.P2);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (p1_ == null) {
            P1 = new global::Par();
          }
          input.ReadMessage(P1);
          break;
        }
        case 18: {
          if (p2_ == null) {
            P2 = new global::Par();
          }
          input.ReadMessage(P2);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          if (p1_ == null) {
            P1 = new global::Par();
          }
          input.ReadMessage(P1);
          break;
        }
        case 18: {
          if (p2_ == null) {
            P2 = new global::Par();
          }
          input.ReadMessage(P2);
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Concatenation
/// </summary>
public sealed partial class EPlusPlus : pb::IMessage<EPlusPlus>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<EPlusPlus> _parser = new pb::MessageParser<EPlusPlus>(() => new EPlusPlus());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<EPlusPlus> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RhoTypesReflection.Descriptor.MessageTypes[40]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EPlusPlus() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EPlusPlus(EPlusPlus other) : this() {
    p1_ = other.p1_ != null ? other.p1_.Clone() : null;
    p2_ = other.p2_ != null ? other.p2_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EPlusPlus Clone() {
    return new EPlusPlus(this);
  }

  /// <summary>Field number for the "p1" field.</summary>
  public const int P1FieldNumber = 1;
  private global::Par p1_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Par P1 {
    get { return p1_; }
    set {
      p1_ = value;
    }
  }

  /// <summary>Field number for the "p2" field.</summary>
  public const int P2FieldNumber = 2;
  private global::Par p2_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Par P2 {
    get { return p2_; }
    set {
      p2_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as EPlusPlus);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(EPlusPlus other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(P1, other.P1)) return false;
    if (!object.Equals(P2, other.P2)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (p1_ != null) hash ^= P1.GetHashCode();
    if (p2_ != null) hash ^= P2.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (p1_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(P1);
    }
    if (p2_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(P2);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (p1_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(P1);
    }
    if (p2_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(P2);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (p1_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(P1);
    }
    if (p2_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(P2);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(EPlusPlus other) {
    if (other == null) {
      return;
    }
    if (other.p1_ != null) {
      if (p1_ == null) {
        P1 = new global::Par();
      }
      P1.MergeFrom(other.P1);
    }
    if (other.p2_ != null) {
      if (p2_ == null) {
        P2 = new global::Par();
      }
      P2.MergeFrom(other.P2);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (p1_ == null) {
            P1 = new global::Par();
          }
          input.ReadMessage(P1);
          break;
        }
        case 18: {
          if (p2_ == null) {
            P2 = new global::Par();
          }
          input.ReadMessage(P2);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          if (p1_ == null) {
            P1 = new global::Par();
          }
          input.ReadMessage(P1);
          break;
        }
        case 18: {
          if (p2_ == null) {
            P2 = new global::Par();
          }
          input.ReadMessage(P2);
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Set difference
/// </summary>
public sealed partial class EMinusMinus : pb::IMessage<EMinusMinus>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<EMinusMinus> _parser = new pb::MessageParser<EMinusMinus>(() => new EMinusMinus());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<EMinusMinus> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RhoTypesReflection.Descriptor.MessageTypes[41]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EMinusMinus() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EMinusMinus(EMinusMinus other) : this() {
    p1_ = other.p1_ != null ? other.p1_.Clone() : null;
    p2_ = other.p2_ != null ? other.p2_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EMinusMinus Clone() {
    return new EMinusMinus(this);
  }

  /// <summary>Field number for the "p1" field.</summary>
  public const int P1FieldNumber = 1;
  private global::Par p1_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Par P1 {
    get { return p1_; }
    set {
      p1_ = value;
    }
  }

  /// <summary>Field number for the "p2" field.</summary>
  public const int P2FieldNumber = 2;
  private global::Par p2_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Par P2 {
    get { return p2_; }
    set {
      p2_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as EMinusMinus);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(EMinusMinus other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(P1, other.P1)) return false;
    if (!object.Equals(P2, other.P2)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (p1_ != null) hash ^= P1.GetHashCode();
    if (p2_ != null) hash ^= P2.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (p1_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(P1);
    }
    if (p2_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(P2);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (p1_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(P1);
    }
    if (p2_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(P2);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (p1_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(P1);
    }
    if (p2_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(P2);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(EMinusMinus other) {
    if (other == null) {
      return;
    }
    if (other.p1_ != null) {
      if (p1_ == null) {
        P1 = new global::Par();
      }
      P1.MergeFrom(other.P1);
    }
    if (other.p2_ != null) {
      if (p2_ == null) {
        P2 = new global::Par();
      }
      P2.MergeFrom(other.P2);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (p1_ == null) {
            P1 = new global::Par();
          }
          input.ReadMessage(P1);
          break;
        }
        case 18: {
          if (p2_ == null) {
            P2 = new global::Par();
          }
          input.ReadMessage(P2);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          if (p1_ == null) {
            P1 = new global::Par();
          }
          input.ReadMessage(P1);
          break;
        }
        case 18: {
          if (p2_ == null) {
            P2 = new global::Par();
          }
          input.ReadMessage(P2);
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class Connective : pb::IMessage<Connective>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<Connective> _parser = new pb::MessageParser<Connective>(() => new Connective());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Connective> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RhoTypesReflection.Descriptor.MessageTypes[42]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Connective() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Connective(Connective other) : this() {
    switch (other.ConnectiveInstanceCase) {
      case ConnectiveInstanceOneofCase.ConnAndBody:
        ConnAndBody = other.ConnAndBody.Clone();
        break;
      case ConnectiveInstanceOneofCase.ConnOrBody:
        ConnOrBody = other.ConnOrBody.Clone();
        break;
      case ConnectiveInstanceOneofCase.ConnNotBody:
        ConnNotBody = other.ConnNotBody.Clone();
        break;
      case ConnectiveInstanceOneofCase.VarRefBody:
        VarRefBody = other.VarRefBody.Clone();
        break;
      case ConnectiveInstanceOneofCase.ConnBool:
        ConnBool = other.ConnBool;
        break;
      case ConnectiveInstanceOneofCase.ConnInt:
        ConnInt = other.ConnInt;
        break;
      case ConnectiveInstanceOneofCase.ConnString:
        ConnString = other.ConnString;
        break;
      case ConnectiveInstanceOneofCase.ConnUri:
        ConnUri = other.ConnUri;
        break;
      case ConnectiveInstanceOneofCase.ConnByteArray:
        ConnByteArray = other.ConnByteArray;
        break;
    }

    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Connective Clone() {
    return new Connective(this);
  }

  /// <summary>Field number for the "conn_and_body" field.</summary>
  public const int ConnAndBodyFieldNumber = 1;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ConnectiveBody ConnAndBody {
    get { return connectiveInstanceCase_ == ConnectiveInstanceOneofCase.ConnAndBody ? (global::ConnectiveBody) connectiveInstance_ : null; }
    set {
      connectiveInstance_ = value;
      connectiveInstanceCase_ = value == null ? ConnectiveInstanceOneofCase.None : ConnectiveInstanceOneofCase.ConnAndBody;
    }
  }

  /// <summary>Field number for the "conn_or_body" field.</summary>
  public const int ConnOrBodyFieldNumber = 2;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ConnectiveBody ConnOrBody {
    get { return connectiveInstanceCase_ == ConnectiveInstanceOneofCase.ConnOrBody ? (global::ConnectiveBody) connectiveInstance_ : null; }
    set {
      connectiveInstance_ = value;
      connectiveInstanceCase_ = value == null ? ConnectiveInstanceOneofCase.None : ConnectiveInstanceOneofCase.ConnOrBody;
    }
  }

  /// <summary>Field number for the "conn_not_body" field.</summary>
  public const int ConnNotBodyFieldNumber = 3;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Par ConnNotBody {
    get { return connectiveInstanceCase_ == ConnectiveInstanceOneofCase.ConnNotBody ? (global::Par) connectiveInstance_ : null; }
    set {
      connectiveInstance_ = value;
      connectiveInstanceCase_ = value == null ? ConnectiveInstanceOneofCase.None : ConnectiveInstanceOneofCase.ConnNotBody;
    }
  }

  /// <summary>Field number for the "var_ref_body" field.</summary>
  public const int VarRefBodyFieldNumber = 4;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::VarRef VarRefBody {
    get { return connectiveInstanceCase_ == ConnectiveInstanceOneofCase.VarRefBody ? (global::VarRef) connectiveInstance_ : null; }
    set {
      connectiveInstance_ = value;
      connectiveInstanceCase_ = value == null ? ConnectiveInstanceOneofCase.None : ConnectiveInstanceOneofCase.VarRefBody;
    }
  }

  /// <summary>Field number for the "conn_bool" field.</summary>
  public const int ConnBoolFieldNumber = 5;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool ConnBool {
    get { return connectiveInstanceCase_ == ConnectiveInstanceOneofCase.ConnBool ? (bool) connectiveInstance_ : false; }
    set {
      connectiveInstance_ = value;
      connectiveInstanceCase_ = ConnectiveInstanceOneofCase.ConnBool;
    }
  }

  /// <summary>Field number for the "conn_int" field.</summary>
  public const int ConnIntFieldNumber = 6;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool ConnInt {
    get { return connectiveInstanceCase_ == ConnectiveInstanceOneofCase.ConnInt ? (bool) connectiveInstance_ : false; }
    set {
      connectiveInstance_ = value;
      connectiveInstanceCase_ = ConnectiveInstanceOneofCase.ConnInt;
    }
  }

  /// <summary>Field number for the "conn_string" field.</summary>
  public const int ConnStringFieldNumber = 7;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool ConnString {
    get { return connectiveInstanceCase_ == ConnectiveInstanceOneofCase.ConnString ? (bool) connectiveInstance_ : false; }
    set {
      connectiveInstance_ = value;
      connectiveInstanceCase_ = ConnectiveInstanceOneofCase.ConnString;
    }
  }

  /// <summary>Field number for the "conn_uri" field.</summary>
  public const int ConnUriFieldNumber = 8;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool ConnUri {
    get { return connectiveInstanceCase_ == ConnectiveInstanceOneofCase.ConnUri ? (bool) connectiveInstance_ : false; }
    set {
      connectiveInstance_ = value;
      connectiveInstanceCase_ = ConnectiveInstanceOneofCase.ConnUri;
    }
  }

  /// <summary>Field number for the "conn_byte_array" field.</summary>
  public const int ConnByteArrayFieldNumber = 9;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool ConnByteArray {
    get { return connectiveInstanceCase_ == ConnectiveInstanceOneofCase.ConnByteArray ? (bool) connectiveInstance_ : false; }
    set {
      connectiveInstance_ = value;
      connectiveInstanceCase_ = ConnectiveInstanceOneofCase.ConnByteArray;
    }
  }

  private object connectiveInstance_;
  /// <summary>Enum of possible cases for the "connective_instance" oneof.</summary>
  public enum ConnectiveInstanceOneofCase {
    None = 0,
    ConnAndBody = 1,
    ConnOrBody = 2,
    ConnNotBody = 3,
    VarRefBody = 4,
    ConnBool = 5,
    ConnInt = 6,
    ConnString = 7,
    ConnUri = 8,
    ConnByteArray = 9,
  }
  private ConnectiveInstanceOneofCase connectiveInstanceCase_ = ConnectiveInstanceOneofCase.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ConnectiveInstanceOneofCase ConnectiveInstanceCase {
    get { return connectiveInstanceCase_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearConnectiveInstance() {
    connectiveInstanceCase_ = ConnectiveInstanceOneofCase.None;
    connectiveInstance_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Connective);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Connective other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ConnAndBody, other.ConnAndBody)) return false;
    if (!object.Equals(ConnOrBody, other.ConnOrBody)) return false;
    if (!object.Equals(ConnNotBody, other.ConnNotBody)) return false;
    if (!object.Equals(VarRefBody, other.VarRefBody)) return false;
    if (ConnBool != other.ConnBool) return false;
    if (ConnInt != other.ConnInt) return false;
    if (ConnString != other.ConnString) return false;
    if (ConnUri != other.ConnUri) return false;
    if (ConnByteArray != other.ConnByteArray) return false;
    if (ConnectiveInstanceCase != other.ConnectiveInstanceCase) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (connectiveInstanceCase_ == ConnectiveInstanceOneofCase.ConnAndBody) hash ^= ConnAndBody.GetHashCode();
    if (connectiveInstanceCase_ == ConnectiveInstanceOneofCase.ConnOrBody) hash ^= ConnOrBody.GetHashCode();
    if (connectiveInstanceCase_ == ConnectiveInstanceOneofCase.ConnNotBody) hash ^= ConnNotBody.GetHashCode();
    if (connectiveInstanceCase_ == ConnectiveInstanceOneofCase.VarRefBody) hash ^= VarRefBody.GetHashCode();
    if (connectiveInstanceCase_ == ConnectiveInstanceOneofCase.ConnBool) hash ^= ConnBool.GetHashCode();
    if (connectiveInstanceCase_ == ConnectiveInstanceOneofCase.ConnInt) hash ^= ConnInt.GetHashCode();
    if (connectiveInstanceCase_ == ConnectiveInstanceOneofCase.ConnString) hash ^= ConnString.GetHashCode();
    if (connectiveInstanceCase_ == ConnectiveInstanceOneofCase.ConnUri) hash ^= ConnUri.GetHashCode();
    if (connectiveInstanceCase_ == ConnectiveInstanceOneofCase.ConnByteArray) hash ^= ConnByteArray.GetHashCode();
    hash ^= (int) connectiveInstanceCase_;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (connectiveInstanceCase_ == ConnectiveInstanceOneofCase.ConnAndBody) {
      output.WriteRawTag(10);
      output.WriteMessage(ConnAndBody);
    }
    if (connectiveInstanceCase_ == ConnectiveInstanceOneofCase.ConnOrBody) {
      output.WriteRawTag(18);
      output.WriteMessage(ConnOrBody);
    }
    if (connectiveInstanceCase_ == ConnectiveInstanceOneofCase.ConnNotBody) {
      output.WriteRawTag(26);
      output.WriteMessage(ConnNotBody);
    }
    if (connectiveInstanceCase_ == ConnectiveInstanceOneofCase.VarRefBody) {
      output.WriteRawTag(34);
      output.WriteMessage(VarRefBody);
    }
    if (connectiveInstanceCase_ == ConnectiveInstanceOneofCase.ConnBool) {
      output.WriteRawTag(40);
      output.WriteBool(ConnBool);
    }
    if (connectiveInstanceCase_ == ConnectiveInstanceOneofCase.ConnInt) {
      output.WriteRawTag(48);
      output.WriteBool(ConnInt);
    }
    if (connectiveInstanceCase_ == ConnectiveInstanceOneofCase.ConnString) {
      output.WriteRawTag(56);
      output.WriteBool(ConnString);
    }
    if (connectiveInstanceCase_ == ConnectiveInstanceOneofCase.ConnUri) {
      output.WriteRawTag(64);
      output.WriteBool(ConnUri);
    }
    if (connectiveInstanceCase_ == ConnectiveInstanceOneofCase.ConnByteArray) {
      output.WriteRawTag(72);
      output.WriteBool(ConnByteArray);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (connectiveInstanceCase_ == ConnectiveInstanceOneofCase.ConnAndBody) {
      output.WriteRawTag(10);
      output.WriteMessage(ConnAndBody);
    }
    if (connectiveInstanceCase_ == ConnectiveInstanceOneofCase.ConnOrBody) {
      output.WriteRawTag(18);
      output.WriteMessage(ConnOrBody);
    }
    if (connectiveInstanceCase_ == ConnectiveInstanceOneofCase.ConnNotBody) {
      output.WriteRawTag(26);
      output.WriteMessage(ConnNotBody);
    }
    if (connectiveInstanceCase_ == ConnectiveInstanceOneofCase.VarRefBody) {
      output.WriteRawTag(34);
      output.WriteMessage(VarRefBody);
    }
    if (connectiveInstanceCase_ == ConnectiveInstanceOneofCase.ConnBool) {
      output.WriteRawTag(40);
      output.WriteBool(ConnBool);
    }
    if (connectiveInstanceCase_ == ConnectiveInstanceOneofCase.ConnInt) {
      output.WriteRawTag(48);
      output.WriteBool(ConnInt);
    }
    if (connectiveInstanceCase_ == ConnectiveInstanceOneofCase.ConnString) {
      output.WriteRawTag(56);
      output.WriteBool(ConnString);
    }
    if (connectiveInstanceCase_ == ConnectiveInstanceOneofCase.ConnUri) {
      output.WriteRawTag(64);
      output.WriteBool(ConnUri);
    }
    if (connectiveInstanceCase_ == ConnectiveInstanceOneofCase.ConnByteArray) {
      output.WriteRawTag(72);
      output.WriteBool(ConnByteArray);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (connectiveInstanceCase_ == ConnectiveInstanceOneofCase.ConnAndBody) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConnAndBody);
    }
    if (connectiveInstanceCase_ == ConnectiveInstanceOneofCase.ConnOrBody) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConnOrBody);
    }
    if (connectiveInstanceCase_ == ConnectiveInstanceOneofCase.ConnNotBody) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConnNotBody);
    }
    if (connectiveInstanceCase_ == ConnectiveInstanceOneofCase.VarRefBody) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(VarRefBody);
    }
    if (connectiveInstanceCase_ == ConnectiveInstanceOneofCase.ConnBool) {
      size += 1 + 1;
    }
    if (connectiveInstanceCase_ == ConnectiveInstanceOneofCase.ConnInt) {
      size += 1 + 1;
    }
    if (connectiveInstanceCase_ == ConnectiveInstanceOneofCase.ConnString) {
      size += 1 + 1;
    }
    if (connectiveInstanceCase_ == ConnectiveInstanceOneofCase.ConnUri) {
      size += 1 + 1;
    }
    if (connectiveInstanceCase_ == ConnectiveInstanceOneofCase.ConnByteArray) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Connective other) {
    if (other == null) {
      return;
    }
    switch (other.ConnectiveInstanceCase) {
      case ConnectiveInstanceOneofCase.ConnAndBody:
        if (ConnAndBody == null) {
          ConnAndBody = new global::ConnectiveBody();
        }
        ConnAndBody.MergeFrom(other.ConnAndBody);
        break;
      case ConnectiveInstanceOneofCase.ConnOrBody:
        if (ConnOrBody == null) {
          ConnOrBody = new global::ConnectiveBody();
        }
        ConnOrBody.MergeFrom(other.ConnOrBody);
        break;
      case ConnectiveInstanceOneofCase.ConnNotBody:
        if (ConnNotBody == null) {
          ConnNotBody = new global::Par();
        }
        ConnNotBody.MergeFrom(other.ConnNotBody);
        break;
      case ConnectiveInstanceOneofCase.VarRefBody:
        if (VarRefBody == null) {
          VarRefBody = new global::VarRef();
        }
        VarRefBody.MergeFrom(other.VarRefBody);
        break;
      case ConnectiveInstanceOneofCase.ConnBool:
        ConnBool = other.ConnBool;
        break;
      case ConnectiveInstanceOneofCase.ConnInt:
        ConnInt = other.ConnInt;
        break;
      case ConnectiveInstanceOneofCase.ConnString:
        ConnString = other.ConnString;
        break;
      case ConnectiveInstanceOneofCase.ConnUri:
        ConnUri = other.ConnUri;
        break;
      case ConnectiveInstanceOneofCase.ConnByteArray:
        ConnByteArray = other.ConnByteArray;
        break;
    }

    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          global::ConnectiveBody subBuilder = new global::ConnectiveBody();
          if (connectiveInstanceCase_ == ConnectiveInstanceOneofCase.ConnAndBody) {
            subBuilder.MergeFrom(ConnAndBody);
          }
          input.ReadMessage(subBuilder);
          ConnAndBody = subBuilder;
          break;
        }
        case 18: {
          global::ConnectiveBody subBuilder = new global::ConnectiveBody();
          if (connectiveInstanceCase_ == ConnectiveInstanceOneofCase.ConnOrBody) {
            subBuilder.MergeFrom(ConnOrBody);
          }
          input.ReadMessage(subBuilder);
          ConnOrBody = subBuilder;
          break;
        }
        case 26: {
          global::Par subBuilder = new global::Par();
          if (connectiveInstanceCase_ == ConnectiveInstanceOneofCase.ConnNotBody) {
            subBuilder.MergeFrom(ConnNotBody);
          }
          input.ReadMessage(subBuilder);
          ConnNotBody = subBuilder;
          break;
        }
        case 34: {
          global::VarRef subBuilder = new global::VarRef();
          if (connectiveInstanceCase_ == ConnectiveInstanceOneofCase.VarRefBody) {
            subBuilder.MergeFrom(VarRefBody);
          }
          input.ReadMessage(subBuilder);
          VarRefBody = subBuilder;
          break;
        }
        case 40: {
          ConnBool = input.ReadBool();
          break;
        }
        case 48: {
          ConnInt = input.ReadBool();
          break;
        }
        case 56: {
          ConnString = input.ReadBool();
          break;
        }
        case 64: {
          ConnUri = input.ReadBool();
          break;
        }
        case 72: {
          ConnByteArray = input.ReadBool();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          global::ConnectiveBody subBuilder = new global::ConnectiveBody();
          if (connectiveInstanceCase_ == ConnectiveInstanceOneofCase.ConnAndBody) {
            subBuilder.MergeFrom(ConnAndBody);
          }
          input.ReadMessage(subBuilder);
          ConnAndBody = subBuilder;
          break;
        }
        case 18: {
          global::ConnectiveBody subBuilder = new global::ConnectiveBody();
          if (connectiveInstanceCase_ == ConnectiveInstanceOneofCase.ConnOrBody) {
            subBuilder.MergeFrom(ConnOrBody);
          }
          input.ReadMessage(subBuilder);
          ConnOrBody = subBuilder;
          break;
        }
        case 26: {
          global::Par subBuilder = new global::Par();
          if (connectiveInstanceCase_ == ConnectiveInstanceOneofCase.ConnNotBody) {
            subBuilder.MergeFrom(ConnNotBody);
          }
          input.ReadMessage(subBuilder);
          ConnNotBody = subBuilder;
          break;
        }
        case 34: {
          global::VarRef subBuilder = new global::VarRef();
          if (connectiveInstanceCase_ == ConnectiveInstanceOneofCase.VarRefBody) {
            subBuilder.MergeFrom(VarRefBody);
          }
          input.ReadMessage(subBuilder);
          VarRefBody = subBuilder;
          break;
        }
        case 40: {
          ConnBool = input.ReadBool();
          break;
        }
        case 48: {
          ConnInt = input.ReadBool();
          break;
        }
        case 56: {
          ConnString = input.ReadBool();
          break;
        }
        case 64: {
          ConnUri = input.ReadBool();
          break;
        }
        case 72: {
          ConnByteArray = input.ReadBool();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class VarRef : pb::IMessage<VarRef>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<VarRef> _parser = new pb::MessageParser<VarRef>(() => new VarRef());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VarRef> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RhoTypesReflection.Descriptor.MessageTypes[43]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VarRef() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VarRef(VarRef other) : this() {
    index_ = other.index_;
    depth_ = other.depth_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VarRef Clone() {
    return new VarRef(this);
  }

  /// <summary>Field number for the "index" field.</summary>
  public const int IndexFieldNumber = 1;
  private int index_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Index {
    get { return index_; }
    set {
      index_ = value;
    }
  }

  /// <summary>Field number for the "depth" field.</summary>
  public const int DepthFieldNumber = 2;
  private int depth_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Depth {
    get { return depth_; }
    set {
      depth_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VarRef);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VarRef other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Index != other.Index) return false;
    if (Depth != other.Depth) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Index != 0) hash ^= Index.GetHashCode();
    if (Depth != 0) hash ^= Depth.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (Index != 0) {
      output.WriteRawTag(8);
      output.WriteSInt32(Index);
    }
    if (Depth != 0) {
      output.WriteRawTag(16);
      output.WriteSInt32(Depth);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (Index != 0) {
      output.WriteRawTag(8);
      output.WriteSInt32(Index);
    }
    if (Depth != 0) {
      output.WriteRawTag(16);
      output.WriteSInt32(Depth);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Index != 0) {
      size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Index);
    }
    if (Depth != 0) {
      size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Depth);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VarRef other) {
    if (other == null) {
      return;
    }
    if (other.Index != 0) {
      Index = other.Index;
    }
    if (other.Depth != 0) {
      Depth = other.Depth;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Index = input.ReadSInt32();
          break;
        }
        case 16: {
          Depth = input.ReadSInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Index = input.ReadSInt32();
          break;
        }
        case 16: {
          Depth = input.ReadSInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class ConnectiveBody : pb::IMessage<ConnectiveBody>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ConnectiveBody> _parser = new pb::MessageParser<ConnectiveBody>(() => new ConnectiveBody());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ConnectiveBody> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RhoTypesReflection.Descriptor.MessageTypes[44]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ConnectiveBody() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ConnectiveBody(ConnectiveBody other) : this() {
    ps_ = other.ps_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ConnectiveBody Clone() {
    return new ConnectiveBody(this);
  }

  /// <summary>Field number for the "ps" field.</summary>
  public const int PsFieldNumber = 1;
  private static readonly pb::FieldCodec<global::Par> _repeated_ps_codec
      = pb::FieldCodec.ForMessage(10, global::Par.Parser);
  private readonly pbc::RepeatedField<global::Par> ps_ = new pbc::RepeatedField<global::Par>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Par> Ps {
    get { return ps_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ConnectiveBody);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ConnectiveBody other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!ps_.Equals(other.ps_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= ps_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    ps_.WriteTo(output, _repeated_ps_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    ps_.WriteTo(ref output, _repeated_ps_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += ps_.CalculateSize(_repeated_ps_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ConnectiveBody other) {
    if (other == null) {
      return;
    }
    ps_.Add(other.ps_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          ps_.AddEntriesFrom(input, _repeated_ps_codec);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          ps_.AddEntriesFrom(ref input, _repeated_ps_codec);
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class DeployId : pb::IMessage<DeployId>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<DeployId> _parser = new pb::MessageParser<DeployId>(() => new DeployId());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DeployId> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RhoTypesReflection.Descriptor.MessageTypes[45]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeployId() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeployId(DeployId other) : this() {
    sig_ = other.sig_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeployId Clone() {
    return new DeployId(this);
  }

  /// <summary>Field number for the "sig" field.</summary>
  public const int SigFieldNumber = 1;
  private pb::ByteString sig_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Sig {
    get { return sig_; }
    set {
      sig_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DeployId);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DeployId other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Sig != other.Sig) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Sig.Length != 0) hash ^= Sig.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (Sig.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(Sig);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (Sig.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(Sig);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Sig.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Sig);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DeployId other) {
    if (other == null) {
      return;
    }
    if (other.Sig.Length != 0) {
      Sig = other.Sig;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Sig = input.ReadBytes();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          Sig = input.ReadBytes();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class DeployerId : pb::IMessage<DeployerId>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<DeployerId> _parser = new pb::MessageParser<DeployerId>(() => new DeployerId());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DeployerId> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RhoTypesReflection.Descriptor.MessageTypes[46]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeployerId() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeployerId(DeployerId other) : this() {
    publicKey_ = other.publicKey_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeployerId Clone() {
    return new DeployerId(this);
  }

  /// <summary>Field number for the "publicKey" field.</summary>
  public const int PublicKeyFieldNumber = 1;
  private pb::ByteString publicKey_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString PublicKey {
    get { return publicKey_; }
    set {
      publicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DeployerId);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DeployerId other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PublicKey != other.PublicKey) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PublicKey.Length != 0) hash ^= PublicKey.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (PublicKey.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(PublicKey);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (PublicKey.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(PublicKey);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PublicKey.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(PublicKey);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DeployerId other) {
    if (other == null) {
      return;
    }
    if (other.PublicKey.Length != 0) {
      PublicKey = other.PublicKey;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          PublicKey = input.ReadBytes();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          PublicKey = input.ReadBytes();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Unforgeable names resulting from `new x { ... }`
/// These should only occur as the program is being evaluated. There is no way in
/// the grammar to construct them.
/// </summary>
public sealed partial class GUnforgeable : pb::IMessage<GUnforgeable>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<GUnforgeable> _parser = new pb::MessageParser<GUnforgeable>(() => new GUnforgeable());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GUnforgeable> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RhoTypesReflection.Descriptor.MessageTypes[47]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GUnforgeable() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GUnforgeable(GUnforgeable other) : this() {
    switch (other.UnfInstanceCase) {
      case UnfInstanceOneofCase.GPrivateBody:
        GPrivateBody = other.GPrivateBody.Clone();
        break;
      case UnfInstanceOneofCase.GDeployIdBody:
        GDeployIdBody = other.GDeployIdBody.Clone();
        break;
      case UnfInstanceOneofCase.GDeployerIdBody:
        GDeployerIdBody = other.GDeployerIdBody.Clone();
        break;
      case UnfInstanceOneofCase.GSysAuthTokenBody:
        GSysAuthTokenBody = other.GSysAuthTokenBody.Clone();
        break;
    }

    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GUnforgeable Clone() {
    return new GUnforgeable(this);
  }

  /// <summary>Field number for the "g_private_body" field.</summary>
  public const int GPrivateBodyFieldNumber = 1;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GPrivate GPrivateBody {
    get { return unfInstanceCase_ == UnfInstanceOneofCase.GPrivateBody ? (global::GPrivate) unfInstance_ : null; }
    set {
      unfInstance_ = value;
      unfInstanceCase_ = value == null ? UnfInstanceOneofCase.None : UnfInstanceOneofCase.GPrivateBody;
    }
  }

  /// <summary>Field number for the "g_deploy_id_body" field.</summary>
  public const int GDeployIdBodyFieldNumber = 2;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GDeployId GDeployIdBody {
    get { return unfInstanceCase_ == UnfInstanceOneofCase.GDeployIdBody ? (global::GDeployId) unfInstance_ : null; }
    set {
      unfInstance_ = value;
      unfInstanceCase_ = value == null ? UnfInstanceOneofCase.None : UnfInstanceOneofCase.GDeployIdBody;
    }
  }

  /// <summary>Field number for the "g_deployer_id_body" field.</summary>
  public const int GDeployerIdBodyFieldNumber = 3;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GDeployerId GDeployerIdBody {
    get { return unfInstanceCase_ == UnfInstanceOneofCase.GDeployerIdBody ? (global::GDeployerId) unfInstance_ : null; }
    set {
      unfInstance_ = value;
      unfInstanceCase_ = value == null ? UnfInstanceOneofCase.None : UnfInstanceOneofCase.GDeployerIdBody;
    }
  }

  /// <summary>Field number for the "g_sys_auth_token_body" field.</summary>
  public const int GSysAuthTokenBodyFieldNumber = 4;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GSysAuthToken GSysAuthTokenBody {
    get { return unfInstanceCase_ == UnfInstanceOneofCase.GSysAuthTokenBody ? (global::GSysAuthToken) unfInstance_ : null; }
    set {
      unfInstance_ = value;
      unfInstanceCase_ = value == null ? UnfInstanceOneofCase.None : UnfInstanceOneofCase.GSysAuthTokenBody;
    }
  }

  private object unfInstance_;
  /// <summary>Enum of possible cases for the "unf_instance" oneof.</summary>
  public enum UnfInstanceOneofCase {
    None = 0,
    GPrivateBody = 1,
    GDeployIdBody = 2,
    GDeployerIdBody = 3,
    GSysAuthTokenBody = 4,
  }
  private UnfInstanceOneofCase unfInstanceCase_ = UnfInstanceOneofCase.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UnfInstanceOneofCase UnfInstanceCase {
    get { return unfInstanceCase_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearUnfInstance() {
    unfInstanceCase_ = UnfInstanceOneofCase.None;
    unfInstance_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GUnforgeable);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GUnforgeable other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(GPrivateBody, other.GPrivateBody)) return false;
    if (!object.Equals(GDeployIdBody, other.GDeployIdBody)) return false;
    if (!object.Equals(GDeployerIdBody, other.GDeployerIdBody)) return false;
    if (!object.Equals(GSysAuthTokenBody, other.GSysAuthTokenBody)) return false;
    if (UnfInstanceCase != other.UnfInstanceCase) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (unfInstanceCase_ == UnfInstanceOneofCase.GPrivateBody) hash ^= GPrivateBody.GetHashCode();
    if (unfInstanceCase_ == UnfInstanceOneofCase.GDeployIdBody) hash ^= GDeployIdBody.GetHashCode();
    if (unfInstanceCase_ == UnfInstanceOneofCase.GDeployerIdBody) hash ^= GDeployerIdBody.GetHashCode();
    if (unfInstanceCase_ == UnfInstanceOneofCase.GSysAuthTokenBody) hash ^= GSysAuthTokenBody.GetHashCode();
    hash ^= (int) unfInstanceCase_;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (unfInstanceCase_ == UnfInstanceOneofCase.GPrivateBody) {
      output.WriteRawTag(10);
      output.WriteMessage(GPrivateBody);
    }
    if (unfInstanceCase_ == UnfInstanceOneofCase.GDeployIdBody) {
      output.WriteRawTag(18);
      output.WriteMessage(GDeployIdBody);
    }
    if (unfInstanceCase_ == UnfInstanceOneofCase.GDeployerIdBody) {
      output.WriteRawTag(26);
      output.WriteMessage(GDeployerIdBody);
    }
    if (unfInstanceCase_ == UnfInstanceOneofCase.GSysAuthTokenBody) {
      output.WriteRawTag(34);
      output.WriteMessage(GSysAuthTokenBody);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (unfInstanceCase_ == UnfInstanceOneofCase.GPrivateBody) {
      output.WriteRawTag(10);
      output.WriteMessage(GPrivateBody);
    }
    if (unfInstanceCase_ == UnfInstanceOneofCase.GDeployIdBody) {
      output.WriteRawTag(18);
      output.WriteMessage(GDeployIdBody);
    }
    if (unfInstanceCase_ == UnfInstanceOneofCase.GDeployerIdBody) {
      output.WriteRawTag(26);
      output.WriteMessage(GDeployerIdBody);
    }
    if (unfInstanceCase_ == UnfInstanceOneofCase.GSysAuthTokenBody) {
      output.WriteRawTag(34);
      output.WriteMessage(GSysAuthTokenBody);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (unfInstanceCase_ == UnfInstanceOneofCase.GPrivateBody) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(GPrivateBody);
    }
    if (unfInstanceCase_ == UnfInstanceOneofCase.GDeployIdBody) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(GDeployIdBody);
    }
    if (unfInstanceCase_ == UnfInstanceOneofCase.GDeployerIdBody) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(GDeployerIdBody);
    }
    if (unfInstanceCase_ == UnfInstanceOneofCase.GSysAuthTokenBody) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(GSysAuthTokenBody);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GUnforgeable other) {
    if (other == null) {
      return;
    }
    switch (other.UnfInstanceCase) {
      case UnfInstanceOneofCase.GPrivateBody:
        if (GPrivateBody == null) {
          GPrivateBody = new global::GPrivate();
        }
        GPrivateBody.MergeFrom(other.GPrivateBody);
        break;
      case UnfInstanceOneofCase.GDeployIdBody:
        if (GDeployIdBody == null) {
          GDeployIdBody = new global::GDeployId();
        }
        GDeployIdBody.MergeFrom(other.GDeployIdBody);
        break;
      case UnfInstanceOneofCase.GDeployerIdBody:
        if (GDeployerIdBody == null) {
          GDeployerIdBody = new global::GDeployerId();
        }
        GDeployerIdBody.MergeFrom(other.GDeployerIdBody);
        break;
      case UnfInstanceOneofCase.GSysAuthTokenBody:
        if (GSysAuthTokenBody == null) {
          GSysAuthTokenBody = new global::GSysAuthToken();
        }
        GSysAuthTokenBody.MergeFrom(other.GSysAuthTokenBody);
        break;
    }

    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          global::GPrivate subBuilder = new global::GPrivate();
          if (unfInstanceCase_ == UnfInstanceOneofCase.GPrivateBody) {
            subBuilder.MergeFrom(GPrivateBody);
          }
          input.ReadMessage(subBuilder);
          GPrivateBody = subBuilder;
          break;
        }
        case 18: {
          global::GDeployId subBuilder = new global::GDeployId();
          if (unfInstanceCase_ == UnfInstanceOneofCase.GDeployIdBody) {
            subBuilder.MergeFrom(GDeployIdBody);
          }
          input.ReadMessage(subBuilder);
          GDeployIdBody = subBuilder;
          break;
        }
        case 26: {
          global::GDeployerId subBuilder = new global::GDeployerId();
          if (unfInstanceCase_ == UnfInstanceOneofCase.GDeployerIdBody) {
            subBuilder.MergeFrom(GDeployerIdBody);
          }
          input.ReadMessage(subBuilder);
          GDeployerIdBody = subBuilder;
          break;
        }
        case 34: {
          global::GSysAuthToken subBuilder = new global::GSysAuthToken();
          if (unfInstanceCase_ == UnfInstanceOneofCase.GSysAuthTokenBody) {
            subBuilder.MergeFrom(GSysAuthTokenBody);
          }
          input.ReadMessage(subBuilder);
          GSysAuthTokenBody = subBuilder;
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          global::GPrivate subBuilder = new global::GPrivate();
          if (unfInstanceCase_ == UnfInstanceOneofCase.GPrivateBody) {
            subBuilder.MergeFrom(GPrivateBody);
          }
          input.ReadMessage(subBuilder);
          GPrivateBody = subBuilder;
          break;
        }
        case 18: {
          global::GDeployId subBuilder = new global::GDeployId();
          if (unfInstanceCase_ == UnfInstanceOneofCase.GDeployIdBody) {
            subBuilder.MergeFrom(GDeployIdBody);
          }
          input.ReadMessage(subBuilder);
          GDeployIdBody = subBuilder;
          break;
        }
        case 26: {
          global::GDeployerId subBuilder = new global::GDeployerId();
          if (unfInstanceCase_ == UnfInstanceOneofCase.GDeployerIdBody) {
            subBuilder.MergeFrom(GDeployerIdBody);
          }
          input.ReadMessage(subBuilder);
          GDeployerIdBody = subBuilder;
          break;
        }
        case 34: {
          global::GSysAuthToken subBuilder = new global::GSysAuthToken();
          if (unfInstanceCase_ == UnfInstanceOneofCase.GSysAuthTokenBody) {
            subBuilder.MergeFrom(GSysAuthTokenBody);
          }
          input.ReadMessage(subBuilder);
          GSysAuthTokenBody = subBuilder;
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class GPrivate : pb::IMessage<GPrivate>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<GPrivate> _parser = new pb::MessageParser<GPrivate>(() => new GPrivate());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GPrivate> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RhoTypesReflection.Descriptor.MessageTypes[48]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GPrivate() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GPrivate(GPrivate other) : this() {
    id_ = other.id_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GPrivate Clone() {
    return new GPrivate(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private pb::ByteString id_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GPrivate);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GPrivate other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(Id);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(Id);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Id);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GPrivate other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadBytes();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          Id = input.ReadBytes();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class GDeployId : pb::IMessage<GDeployId>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<GDeployId> _parser = new pb::MessageParser<GDeployId>(() => new GDeployId());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GDeployId> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RhoTypesReflection.Descriptor.MessageTypes[49]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GDeployId() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GDeployId(GDeployId other) : this() {
    sig_ = other.sig_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GDeployId Clone() {
    return new GDeployId(this);
  }

  /// <summary>Field number for the "sig" field.</summary>
  public const int SigFieldNumber = 1;
  private pb::ByteString sig_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Sig {
    get { return sig_; }
    set {
      sig_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GDeployId);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GDeployId other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Sig != other.Sig) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Sig.Length != 0) hash ^= Sig.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (Sig.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(Sig);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (Sig.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(Sig);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Sig.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Sig);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GDeployId other) {
    if (other == null) {
      return;
    }
    if (other.Sig.Length != 0) {
      Sig = other.Sig;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Sig = input.ReadBytes();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          Sig = input.ReadBytes();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class GDeployerId : pb::IMessage<GDeployerId>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<GDeployerId> _parser = new pb::MessageParser<GDeployerId>(() => new GDeployerId());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GDeployerId> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RhoTypesReflection.Descriptor.MessageTypes[50]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GDeployerId() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GDeployerId(GDeployerId other) : this() {
    publicKey_ = other.publicKey_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GDeployerId Clone() {
    return new GDeployerId(this);
  }

  /// <summary>Field number for the "publicKey" field.</summary>
  public const int PublicKeyFieldNumber = 1;
  private pb::ByteString publicKey_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString PublicKey {
    get { return publicKey_; }
    set {
      publicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GDeployerId);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GDeployerId other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PublicKey != other.PublicKey) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PublicKey.Length != 0) hash ^= PublicKey.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (PublicKey.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(PublicKey);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (PublicKey.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(PublicKey);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PublicKey.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(PublicKey);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GDeployerId other) {
    if (other == null) {
      return;
    }
    if (other.PublicKey.Length != 0) {
      PublicKey = other.PublicKey;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          PublicKey = input.ReadBytes();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          PublicKey = input.ReadBytes();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class GSysAuthToken : pb::IMessage<GSysAuthToken>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<GSysAuthToken> _parser = new pb::MessageParser<GSysAuthToken>(() => new GSysAuthToken());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GSysAuthToken> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RhoTypesReflection.Descriptor.MessageTypes[51]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GSysAuthToken() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GSysAuthToken(GSysAuthToken other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GSysAuthToken Clone() {
    return new GSysAuthToken(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GSysAuthToken);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GSysAuthToken other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GSysAuthToken other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
      }
    }
  }
  #endif

}

#endregion


#endregion Designer generated code
