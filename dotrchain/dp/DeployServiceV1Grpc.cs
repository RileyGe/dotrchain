// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: DeployServiceV1.proto
// </auto-generated>
// Original file comments:
// *
// The main API is `DeployService`.
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Casper.V1 {
  /// <summary>
  /// Use `doDeploy` to queue deployments of Rholang code and then
  /// `ProposeServiceV2.propose` to make a new block with the results of running them
  /// all.
  ///
  /// To get results back, use `listenForDataAtName`.
  /// </summary>
  public static partial class DeployService
  {
    static readonly string __ServiceName = "casper.v1.DeployService";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::Casper.DeployDataProto> __Marshaller_casper_DeployDataProto = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Casper.DeployDataProto.Parser));
    static readonly grpc::Marshaller<global::Casper.V1.DeployResponse> __Marshaller_casper_v1_DeployResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Casper.V1.DeployResponse.Parser));
    static readonly grpc::Marshaller<global::Casper.BlockQuery> __Marshaller_casper_BlockQuery = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Casper.BlockQuery.Parser));
    static readonly grpc::Marshaller<global::Casper.V1.BlockResponse> __Marshaller_casper_v1_BlockResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Casper.V1.BlockResponse.Parser));
    static readonly grpc::Marshaller<global::Casper.VisualizeDagQuery> __Marshaller_casper_VisualizeDagQuery = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Casper.VisualizeDagQuery.Parser));
    static readonly grpc::Marshaller<global::Casper.V1.VisualizeBlocksResponse> __Marshaller_casper_v1_VisualizeBlocksResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Casper.V1.VisualizeBlocksResponse.Parser));
    static readonly grpc::Marshaller<global::Casper.MachineVerifyQuery> __Marshaller_casper_MachineVerifyQuery = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Casper.MachineVerifyQuery.Parser));
    static readonly grpc::Marshaller<global::Casper.V1.MachineVerifyResponse> __Marshaller_casper_v1_MachineVerifyResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Casper.V1.MachineVerifyResponse.Parser));
    static readonly grpc::Marshaller<global::Casper.BlocksQuery> __Marshaller_casper_BlocksQuery = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Casper.BlocksQuery.Parser));
    static readonly grpc::Marshaller<global::Casper.V1.BlockInfoResponse> __Marshaller_casper_v1_BlockInfoResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Casper.V1.BlockInfoResponse.Parser));
    static readonly grpc::Marshaller<global::Casper.DataAtNameQuery> __Marshaller_casper_DataAtNameQuery = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Casper.DataAtNameQuery.Parser));
    static readonly grpc::Marshaller<global::Casper.V1.ListeningNameDataResponse> __Marshaller_casper_v1_ListeningNameDataResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Casper.V1.ListeningNameDataResponse.Parser));
    static readonly grpc::Marshaller<global::Casper.ContinuationAtNameQuery> __Marshaller_casper_ContinuationAtNameQuery = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Casper.ContinuationAtNameQuery.Parser));
    static readonly grpc::Marshaller<global::Casper.V1.ContinuationAtNameResponse> __Marshaller_casper_v1_ContinuationAtNameResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Casper.V1.ContinuationAtNameResponse.Parser));
    static readonly grpc::Marshaller<global::Casper.FindDeployQuery> __Marshaller_casper_FindDeployQuery = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Casper.FindDeployQuery.Parser));
    static readonly grpc::Marshaller<global::Casper.V1.FindDeployResponse> __Marshaller_casper_v1_FindDeployResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Casper.V1.FindDeployResponse.Parser));
    static readonly grpc::Marshaller<global::Casper.PrivateNamePreviewQuery> __Marshaller_casper_PrivateNamePreviewQuery = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Casper.PrivateNamePreviewQuery.Parser));
    static readonly grpc::Marshaller<global::Casper.V1.PrivateNamePreviewResponse> __Marshaller_casper_v1_PrivateNamePreviewResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Casper.V1.PrivateNamePreviewResponse.Parser));
    static readonly grpc::Marshaller<global::Casper.LastFinalizedBlockQuery> __Marshaller_casper_LastFinalizedBlockQuery = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Casper.LastFinalizedBlockQuery.Parser));
    static readonly grpc::Marshaller<global::Casper.V1.LastFinalizedBlockResponse> __Marshaller_casper_v1_LastFinalizedBlockResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Casper.V1.LastFinalizedBlockResponse.Parser));
    static readonly grpc::Marshaller<global::Casper.IsFinalizedQuery> __Marshaller_casper_IsFinalizedQuery = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Casper.IsFinalizedQuery.Parser));
    static readonly grpc::Marshaller<global::Casper.V1.IsFinalizedResponse> __Marshaller_casper_v1_IsFinalizedResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Casper.V1.IsFinalizedResponse.Parser));
    static readonly grpc::Marshaller<global::Casper.BondStatusQuery> __Marshaller_casper_BondStatusQuery = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Casper.BondStatusQuery.Parser));
    static readonly grpc::Marshaller<global::Casper.V1.BondStatusResponse> __Marshaller_casper_v1_BondStatusResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Casper.V1.BondStatusResponse.Parser));
    static readonly grpc::Marshaller<global::Casper.ExploratoryDeployQuery> __Marshaller_casper_ExploratoryDeployQuery = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Casper.ExploratoryDeployQuery.Parser));
    static readonly grpc::Marshaller<global::Casper.V1.ExploratoryDeployResponse> __Marshaller_casper_v1_ExploratoryDeployResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Casper.V1.ExploratoryDeployResponse.Parser));
    static readonly grpc::Marshaller<global::Casper.BlocksQueryByHeight> __Marshaller_casper_BlocksQueryByHeight = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Casper.BlocksQueryByHeight.Parser));
    static readonly grpc::Marshaller<global::Casper.V1.EventInfoResponse> __Marshaller_casper_v1_EventInfoResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Casper.V1.EventInfoResponse.Parser));

    static readonly grpc::Method<global::Casper.DeployDataProto, global::Casper.V1.DeployResponse> __Method_doDeploy = new grpc::Method<global::Casper.DeployDataProto, global::Casper.V1.DeployResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "doDeploy",
        __Marshaller_casper_DeployDataProto,
        __Marshaller_casper_v1_DeployResponse);

    static readonly grpc::Method<global::Casper.BlockQuery, global::Casper.V1.BlockResponse> __Method_getBlock = new grpc::Method<global::Casper.BlockQuery, global::Casper.V1.BlockResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getBlock",
        __Marshaller_casper_BlockQuery,
        __Marshaller_casper_v1_BlockResponse);

    static readonly grpc::Method<global::Casper.VisualizeDagQuery, global::Casper.V1.VisualizeBlocksResponse> __Method_visualizeDag = new grpc::Method<global::Casper.VisualizeDagQuery, global::Casper.V1.VisualizeBlocksResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "visualizeDag",
        __Marshaller_casper_VisualizeDagQuery,
        __Marshaller_casper_v1_VisualizeBlocksResponse);

    static readonly grpc::Method<global::Casper.MachineVerifyQuery, global::Casper.V1.MachineVerifyResponse> __Method_machineVerifiableDag = new grpc::Method<global::Casper.MachineVerifyQuery, global::Casper.V1.MachineVerifyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "machineVerifiableDag",
        __Marshaller_casper_MachineVerifyQuery,
        __Marshaller_casper_v1_MachineVerifyResponse);

    static readonly grpc::Method<global::Casper.BlocksQuery, global::Casper.V1.BlockInfoResponse> __Method_showMainChain = new grpc::Method<global::Casper.BlocksQuery, global::Casper.V1.BlockInfoResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "showMainChain",
        __Marshaller_casper_BlocksQuery,
        __Marshaller_casper_v1_BlockInfoResponse);

    static readonly grpc::Method<global::Casper.BlocksQuery, global::Casper.V1.BlockInfoResponse> __Method_getBlocks = new grpc::Method<global::Casper.BlocksQuery, global::Casper.V1.BlockInfoResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "getBlocks",
        __Marshaller_casper_BlocksQuery,
        __Marshaller_casper_v1_BlockInfoResponse);

    static readonly grpc::Method<global::Casper.DataAtNameQuery, global::Casper.V1.ListeningNameDataResponse> __Method_listenForDataAtName = new grpc::Method<global::Casper.DataAtNameQuery, global::Casper.V1.ListeningNameDataResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "listenForDataAtName",
        __Marshaller_casper_DataAtNameQuery,
        __Marshaller_casper_v1_ListeningNameDataResponse);

    static readonly grpc::Method<global::Casper.ContinuationAtNameQuery, global::Casper.V1.ContinuationAtNameResponse> __Method_listenForContinuationAtName = new grpc::Method<global::Casper.ContinuationAtNameQuery, global::Casper.V1.ContinuationAtNameResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "listenForContinuationAtName",
        __Marshaller_casper_ContinuationAtNameQuery,
        __Marshaller_casper_v1_ContinuationAtNameResponse);

    static readonly grpc::Method<global::Casper.FindDeployQuery, global::Casper.V1.FindDeployResponse> __Method_findDeploy = new grpc::Method<global::Casper.FindDeployQuery, global::Casper.V1.FindDeployResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "findDeploy",
        __Marshaller_casper_FindDeployQuery,
        __Marshaller_casper_v1_FindDeployResponse);

    static readonly grpc::Method<global::Casper.PrivateNamePreviewQuery, global::Casper.V1.PrivateNamePreviewResponse> __Method_previewPrivateNames = new grpc::Method<global::Casper.PrivateNamePreviewQuery, global::Casper.V1.PrivateNamePreviewResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "previewPrivateNames",
        __Marshaller_casper_PrivateNamePreviewQuery,
        __Marshaller_casper_v1_PrivateNamePreviewResponse);

    static readonly grpc::Method<global::Casper.LastFinalizedBlockQuery, global::Casper.V1.LastFinalizedBlockResponse> __Method_lastFinalizedBlock = new grpc::Method<global::Casper.LastFinalizedBlockQuery, global::Casper.V1.LastFinalizedBlockResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "lastFinalizedBlock",
        __Marshaller_casper_LastFinalizedBlockQuery,
        __Marshaller_casper_v1_LastFinalizedBlockResponse);

    static readonly grpc::Method<global::Casper.IsFinalizedQuery, global::Casper.V1.IsFinalizedResponse> __Method_isFinalized = new grpc::Method<global::Casper.IsFinalizedQuery, global::Casper.V1.IsFinalizedResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "isFinalized",
        __Marshaller_casper_IsFinalizedQuery,
        __Marshaller_casper_v1_IsFinalizedResponse);

    static readonly grpc::Method<global::Casper.BondStatusQuery, global::Casper.V1.BondStatusResponse> __Method_bondStatus = new grpc::Method<global::Casper.BondStatusQuery, global::Casper.V1.BondStatusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "bondStatus",
        __Marshaller_casper_BondStatusQuery,
        __Marshaller_casper_v1_BondStatusResponse);

    static readonly grpc::Method<global::Casper.ExploratoryDeployQuery, global::Casper.V1.ExploratoryDeployResponse> __Method_exploratoryDeploy = new grpc::Method<global::Casper.ExploratoryDeployQuery, global::Casper.V1.ExploratoryDeployResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "exploratoryDeploy",
        __Marshaller_casper_ExploratoryDeployQuery,
        __Marshaller_casper_v1_ExploratoryDeployResponse);

    static readonly grpc::Method<global::Casper.BlocksQueryByHeight, global::Casper.V1.BlockInfoResponse> __Method_getBlocksByHeights = new grpc::Method<global::Casper.BlocksQueryByHeight, global::Casper.V1.BlockInfoResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "getBlocksByHeights",
        __Marshaller_casper_BlocksQueryByHeight,
        __Marshaller_casper_v1_BlockInfoResponse);

    static readonly grpc::Method<global::Casper.BlockQuery, global::Casper.V1.EventInfoResponse> __Method_getEventByHash = new grpc::Method<global::Casper.BlockQuery, global::Casper.V1.EventInfoResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getEventByHash",
        __Marshaller_casper_BlockQuery,
        __Marshaller_casper_v1_EventInfoResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Casper.V1.DeployServiceV1Reflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of DeployService</summary>
    [grpc::BindServiceMethod(typeof(DeployService), "BindService")]
    public abstract partial class DeployServiceBase
    {
      /// <summary>
      /// Queue deployment of Rholang code (or fail to parse).
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Casper.V1.DeployResponse> doDeploy(global::Casper.DeployDataProto request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get details about a particular block.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Casper.V1.BlockResponse> getBlock(global::Casper.BlockQuery request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get dag
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task visualizeDag(global::Casper.VisualizeDagQuery request, grpc::IServerStreamWriter<global::Casper.V1.VisualizeBlocksResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Casper.V1.MachineVerifyResponse> machineVerifiableDag(global::Casper.MachineVerifyQuery request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns on success LightBlockInfo
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task showMainChain(global::Casper.BlocksQuery request, grpc::IServerStreamWriter<global::Casper.V1.BlockInfoResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a summary of blocks on the blockchain.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task getBlocks(global::Casper.BlocksQuery request, grpc::IServerStreamWriter<global::Casper.V1.BlockInfoResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Find data sent to a name.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Casper.V1.ListeningNameDataResponse> listenForDataAtName(global::Casper.DataAtNameQuery request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Find processes receiving on a name.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Casper.V1.ContinuationAtNameResponse> listenForContinuationAtName(global::Casper.ContinuationAtNameQuery request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Find block containing a deploy.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Casper.V1.FindDeployResponse> findDeploy(global::Casper.FindDeployQuery request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Preview new top-level unforgeable names (for example, to compute signatures over them).
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Casper.V1.PrivateNamePreviewResponse> previewPrivateNames(global::Casper.PrivateNamePreviewQuery request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get details about a particular block.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Casper.V1.LastFinalizedBlockResponse> lastFinalizedBlock(global::Casper.LastFinalizedBlockQuery request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Check if a given block is finalized.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Casper.V1.IsFinalizedResponse> isFinalized(global::Casper.IsFinalizedQuery request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Check if a given validator is bonded.
      /// Returns on success BondStatusResponse
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Casper.V1.BondStatusResponse> bondStatus(global::Casper.BondStatusQuery request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Executes deploy as user deploy with immediate rollback and return result
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Casper.V1.ExploratoryDeployResponse> exploratoryDeploy(global::Casper.ExploratoryDeployQuery request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// get blocks by block height
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task getBlocksByHeights(global::Casper.BlocksQueryByHeight request, grpc::IServerStreamWriter<global::Casper.V1.BlockInfoResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// temporary api for testing
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Casper.V1.EventInfoResponse> getEventByHash(global::Casper.BlockQuery request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for DeployService</summary>
    public partial class DeployServiceClient : grpc::ClientBase<DeployServiceClient>
    {
      /// <summary>Creates a new client for DeployService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public DeployServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for DeployService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public DeployServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected DeployServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected DeployServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Queue deployment of Rholang code (or fail to parse).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Casper.V1.DeployResponse doDeploy(global::Casper.DeployDataProto request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return doDeploy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Queue deployment of Rholang code (or fail to parse).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Casper.V1.DeployResponse doDeploy(global::Casper.DeployDataProto request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_doDeploy, null, options, request);
      }
      /// <summary>
      /// Queue deployment of Rholang code (or fail to parse).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Casper.V1.DeployResponse> doDeployAsync(global::Casper.DeployDataProto request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return doDeployAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Queue deployment of Rholang code (or fail to parse).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Casper.V1.DeployResponse> doDeployAsync(global::Casper.DeployDataProto request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_doDeploy, null, options, request);
      }
      /// <summary>
      /// Get details about a particular block.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Casper.V1.BlockResponse getBlock(global::Casper.BlockQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getBlock(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get details about a particular block.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Casper.V1.BlockResponse getBlock(global::Casper.BlockQuery request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getBlock, null, options, request);
      }
      /// <summary>
      /// Get details about a particular block.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Casper.V1.BlockResponse> getBlockAsync(global::Casper.BlockQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getBlockAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get details about a particular block.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Casper.V1.BlockResponse> getBlockAsync(global::Casper.BlockQuery request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getBlock, null, options, request);
      }
      /// <summary>
      /// Get dag
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Casper.V1.VisualizeBlocksResponse> visualizeDag(global::Casper.VisualizeDagQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return visualizeDag(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get dag
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Casper.V1.VisualizeBlocksResponse> visualizeDag(global::Casper.VisualizeDagQuery request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_visualizeDag, null, options, request);
      }
      public virtual global::Casper.V1.MachineVerifyResponse machineVerifiableDag(global::Casper.MachineVerifyQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return machineVerifiableDag(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Casper.V1.MachineVerifyResponse machineVerifiableDag(global::Casper.MachineVerifyQuery request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_machineVerifiableDag, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Casper.V1.MachineVerifyResponse> machineVerifiableDagAsync(global::Casper.MachineVerifyQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return machineVerifiableDagAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Casper.V1.MachineVerifyResponse> machineVerifiableDagAsync(global::Casper.MachineVerifyQuery request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_machineVerifiableDag, null, options, request);
      }
      /// <summary>
      /// Returns on success LightBlockInfo
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Casper.V1.BlockInfoResponse> showMainChain(global::Casper.BlocksQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return showMainChain(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns on success LightBlockInfo
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Casper.V1.BlockInfoResponse> showMainChain(global::Casper.BlocksQuery request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_showMainChain, null, options, request);
      }
      /// <summary>
      /// Get a summary of blocks on the blockchain.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Casper.V1.BlockInfoResponse> getBlocks(global::Casper.BlocksQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getBlocks(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a summary of blocks on the blockchain.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Casper.V1.BlockInfoResponse> getBlocks(global::Casper.BlocksQuery request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_getBlocks, null, options, request);
      }
      /// <summary>
      /// Find data sent to a name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Casper.V1.ListeningNameDataResponse listenForDataAtName(global::Casper.DataAtNameQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return listenForDataAtName(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Find data sent to a name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Casper.V1.ListeningNameDataResponse listenForDataAtName(global::Casper.DataAtNameQuery request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_listenForDataAtName, null, options, request);
      }
      /// <summary>
      /// Find data sent to a name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Casper.V1.ListeningNameDataResponse> listenForDataAtNameAsync(global::Casper.DataAtNameQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return listenForDataAtNameAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Find data sent to a name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Casper.V1.ListeningNameDataResponse> listenForDataAtNameAsync(global::Casper.DataAtNameQuery request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_listenForDataAtName, null, options, request);
      }
      /// <summary>
      /// Find processes receiving on a name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Casper.V1.ContinuationAtNameResponse listenForContinuationAtName(global::Casper.ContinuationAtNameQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return listenForContinuationAtName(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Find processes receiving on a name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Casper.V1.ContinuationAtNameResponse listenForContinuationAtName(global::Casper.ContinuationAtNameQuery request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_listenForContinuationAtName, null, options, request);
      }
      /// <summary>
      /// Find processes receiving on a name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Casper.V1.ContinuationAtNameResponse> listenForContinuationAtNameAsync(global::Casper.ContinuationAtNameQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return listenForContinuationAtNameAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Find processes receiving on a name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Casper.V1.ContinuationAtNameResponse> listenForContinuationAtNameAsync(global::Casper.ContinuationAtNameQuery request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_listenForContinuationAtName, null, options, request);
      }
      /// <summary>
      /// Find block containing a deploy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Casper.V1.FindDeployResponse findDeploy(global::Casper.FindDeployQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return findDeploy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Find block containing a deploy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Casper.V1.FindDeployResponse findDeploy(global::Casper.FindDeployQuery request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_findDeploy, null, options, request);
      }
      /// <summary>
      /// Find block containing a deploy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Casper.V1.FindDeployResponse> findDeployAsync(global::Casper.FindDeployQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return findDeployAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Find block containing a deploy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Casper.V1.FindDeployResponse> findDeployAsync(global::Casper.FindDeployQuery request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_findDeploy, null, options, request);
      }
      /// <summary>
      /// Preview new top-level unforgeable names (for example, to compute signatures over them).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Casper.V1.PrivateNamePreviewResponse previewPrivateNames(global::Casper.PrivateNamePreviewQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return previewPrivateNames(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Preview new top-level unforgeable names (for example, to compute signatures over them).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Casper.V1.PrivateNamePreviewResponse previewPrivateNames(global::Casper.PrivateNamePreviewQuery request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_previewPrivateNames, null, options, request);
      }
      /// <summary>
      /// Preview new top-level unforgeable names (for example, to compute signatures over them).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Casper.V1.PrivateNamePreviewResponse> previewPrivateNamesAsync(global::Casper.PrivateNamePreviewQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return previewPrivateNamesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Preview new top-level unforgeable names (for example, to compute signatures over them).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Casper.V1.PrivateNamePreviewResponse> previewPrivateNamesAsync(global::Casper.PrivateNamePreviewQuery request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_previewPrivateNames, null, options, request);
      }
      /// <summary>
      /// Get details about a particular block.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Casper.V1.LastFinalizedBlockResponse lastFinalizedBlock(global::Casper.LastFinalizedBlockQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return lastFinalizedBlock(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get details about a particular block.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Casper.V1.LastFinalizedBlockResponse lastFinalizedBlock(global::Casper.LastFinalizedBlockQuery request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_lastFinalizedBlock, null, options, request);
      }
      /// <summary>
      /// Get details about a particular block.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Casper.V1.LastFinalizedBlockResponse> lastFinalizedBlockAsync(global::Casper.LastFinalizedBlockQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return lastFinalizedBlockAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get details about a particular block.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Casper.V1.LastFinalizedBlockResponse> lastFinalizedBlockAsync(global::Casper.LastFinalizedBlockQuery request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_lastFinalizedBlock, null, options, request);
      }
      /// <summary>
      /// Check if a given block is finalized.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Casper.V1.IsFinalizedResponse isFinalized(global::Casper.IsFinalizedQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return isFinalized(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Check if a given block is finalized.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Casper.V1.IsFinalizedResponse isFinalized(global::Casper.IsFinalizedQuery request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_isFinalized, null, options, request);
      }
      /// <summary>
      /// Check if a given block is finalized.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Casper.V1.IsFinalizedResponse> isFinalizedAsync(global::Casper.IsFinalizedQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return isFinalizedAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Check if a given block is finalized.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Casper.V1.IsFinalizedResponse> isFinalizedAsync(global::Casper.IsFinalizedQuery request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_isFinalized, null, options, request);
      }
      /// <summary>
      /// Check if a given validator is bonded.
      /// Returns on success BondStatusResponse
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Casper.V1.BondStatusResponse bondStatus(global::Casper.BondStatusQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return bondStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Check if a given validator is bonded.
      /// Returns on success BondStatusResponse
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Casper.V1.BondStatusResponse bondStatus(global::Casper.BondStatusQuery request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_bondStatus, null, options, request);
      }
      /// <summary>
      /// Check if a given validator is bonded.
      /// Returns on success BondStatusResponse
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Casper.V1.BondStatusResponse> bondStatusAsync(global::Casper.BondStatusQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return bondStatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Check if a given validator is bonded.
      /// Returns on success BondStatusResponse
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Casper.V1.BondStatusResponse> bondStatusAsync(global::Casper.BondStatusQuery request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_bondStatus, null, options, request);
      }
      /// <summary>
      /// Executes deploy as user deploy with immediate rollback and return result
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Casper.V1.ExploratoryDeployResponse exploratoryDeploy(global::Casper.ExploratoryDeployQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return exploratoryDeploy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Executes deploy as user deploy with immediate rollback and return result
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Casper.V1.ExploratoryDeployResponse exploratoryDeploy(global::Casper.ExploratoryDeployQuery request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_exploratoryDeploy, null, options, request);
      }
      /// <summary>
      /// Executes deploy as user deploy with immediate rollback and return result
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Casper.V1.ExploratoryDeployResponse> exploratoryDeployAsync(global::Casper.ExploratoryDeployQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return exploratoryDeployAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Executes deploy as user deploy with immediate rollback and return result
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Casper.V1.ExploratoryDeployResponse> exploratoryDeployAsync(global::Casper.ExploratoryDeployQuery request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_exploratoryDeploy, null, options, request);
      }
      /// <summary>
      /// get blocks by block height
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Casper.V1.BlockInfoResponse> getBlocksByHeights(global::Casper.BlocksQueryByHeight request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getBlocksByHeights(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get blocks by block height
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Casper.V1.BlockInfoResponse> getBlocksByHeights(global::Casper.BlocksQueryByHeight request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_getBlocksByHeights, null, options, request);
      }
      /// <summary>
      /// temporary api for testing
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Casper.V1.EventInfoResponse getEventByHash(global::Casper.BlockQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getEventByHash(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// temporary api for testing
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Casper.V1.EventInfoResponse getEventByHash(global::Casper.BlockQuery request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getEventByHash, null, options, request);
      }
      /// <summary>
      /// temporary api for testing
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Casper.V1.EventInfoResponse> getEventByHashAsync(global::Casper.BlockQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getEventByHashAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// temporary api for testing
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Casper.V1.EventInfoResponse> getEventByHashAsync(global::Casper.BlockQuery request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getEventByHash, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override DeployServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new DeployServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(DeployServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_doDeploy, serviceImpl.doDeploy)
          .AddMethod(__Method_getBlock, serviceImpl.getBlock)
          .AddMethod(__Method_visualizeDag, serviceImpl.visualizeDag)
          .AddMethod(__Method_machineVerifiableDag, serviceImpl.machineVerifiableDag)
          .AddMethod(__Method_showMainChain, serviceImpl.showMainChain)
          .AddMethod(__Method_getBlocks, serviceImpl.getBlocks)
          .AddMethod(__Method_listenForDataAtName, serviceImpl.listenForDataAtName)
          .AddMethod(__Method_listenForContinuationAtName, serviceImpl.listenForContinuationAtName)
          .AddMethod(__Method_findDeploy, serviceImpl.findDeploy)
          .AddMethod(__Method_previewPrivateNames, serviceImpl.previewPrivateNames)
          .AddMethod(__Method_lastFinalizedBlock, serviceImpl.lastFinalizedBlock)
          .AddMethod(__Method_isFinalized, serviceImpl.isFinalized)
          .AddMethod(__Method_bondStatus, serviceImpl.bondStatus)
          .AddMethod(__Method_exploratoryDeploy, serviceImpl.exploratoryDeploy)
          .AddMethod(__Method_getBlocksByHeights, serviceImpl.getBlocksByHeights)
          .AddMethod(__Method_getEventByHash, serviceImpl.getEventByHash).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, DeployServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_doDeploy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Casper.DeployDataProto, global::Casper.V1.DeployResponse>(serviceImpl.doDeploy));
      serviceBinder.AddMethod(__Method_getBlock, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Casper.BlockQuery, global::Casper.V1.BlockResponse>(serviceImpl.getBlock));
      serviceBinder.AddMethod(__Method_visualizeDag, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Casper.VisualizeDagQuery, global::Casper.V1.VisualizeBlocksResponse>(serviceImpl.visualizeDag));
      serviceBinder.AddMethod(__Method_machineVerifiableDag, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Casper.MachineVerifyQuery, global::Casper.V1.MachineVerifyResponse>(serviceImpl.machineVerifiableDag));
      serviceBinder.AddMethod(__Method_showMainChain, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Casper.BlocksQuery, global::Casper.V1.BlockInfoResponse>(serviceImpl.showMainChain));
      serviceBinder.AddMethod(__Method_getBlocks, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Casper.BlocksQuery, global::Casper.V1.BlockInfoResponse>(serviceImpl.getBlocks));
      serviceBinder.AddMethod(__Method_listenForDataAtName, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Casper.DataAtNameQuery, global::Casper.V1.ListeningNameDataResponse>(serviceImpl.listenForDataAtName));
      serviceBinder.AddMethod(__Method_listenForContinuationAtName, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Casper.ContinuationAtNameQuery, global::Casper.V1.ContinuationAtNameResponse>(serviceImpl.listenForContinuationAtName));
      serviceBinder.AddMethod(__Method_findDeploy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Casper.FindDeployQuery, global::Casper.V1.FindDeployResponse>(serviceImpl.findDeploy));
      serviceBinder.AddMethod(__Method_previewPrivateNames, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Casper.PrivateNamePreviewQuery, global::Casper.V1.PrivateNamePreviewResponse>(serviceImpl.previewPrivateNames));
      serviceBinder.AddMethod(__Method_lastFinalizedBlock, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Casper.LastFinalizedBlockQuery, global::Casper.V1.LastFinalizedBlockResponse>(serviceImpl.lastFinalizedBlock));
      serviceBinder.AddMethod(__Method_isFinalized, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Casper.IsFinalizedQuery, global::Casper.V1.IsFinalizedResponse>(serviceImpl.isFinalized));
      serviceBinder.AddMethod(__Method_bondStatus, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Casper.BondStatusQuery, global::Casper.V1.BondStatusResponse>(serviceImpl.bondStatus));
      serviceBinder.AddMethod(__Method_exploratoryDeploy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Casper.ExploratoryDeployQuery, global::Casper.V1.ExploratoryDeployResponse>(serviceImpl.exploratoryDeploy));
      serviceBinder.AddMethod(__Method_getBlocksByHeights, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Casper.BlocksQueryByHeight, global::Casper.V1.BlockInfoResponse>(serviceImpl.getBlocksByHeights));
      serviceBinder.AddMethod(__Method_getEventByHash, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Casper.BlockQuery, global::Casper.V1.EventInfoResponse>(serviceImpl.getEventByHash));
    }

  }
}
#endregion
